T 1567243294 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567243294 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567243294 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567243614 18<lesshaste18>	I have 401 files called primdemo2-0 to primdemo2-400 . How can I delete primdemo2-200+ that is all of them with the number 200 or more as the suffix?
T 1567243642 18<lesshaste18>	actually they are called primdemo2-0.png to primdemo2-400.png
T 1567244246 18<manARMy18>	https://paste.debian.net/1098134/
T 1567244252 18<manARMy18>	Hello
T 1567244284 18<lesshaste18>	hi
T 1567244300 18<manARMy18>	Could I write that better?
T 1567244914 18<voldial18>	I have a very expensive cat. It's |'ing lines to someone who thinks about each line for a long time. Can the cat detect that someone has lines already buffered and does not need any more? I want the cat to stop sending and go to sleep until someone is ready.
T 1567244997 18<manARMy18>	voldial: What breed?
T 1567245009 18<manARMy18>	man dd ... fullblock   bs
T 1567245281 18<voldial18>	manARMy: longhair postgres
T 1567245340 18<manARMy18>	voldial: do you have dd if=fullblock?
T 1567245354 18<manARMy18>	iflag=fullblock
T 1567245391 18<manARMy18>	Otherwise it's a 5 line C program.
T 1567245425 18<voldial18>	I'm reading that now... that's specific to the blocksize dd is reading from. my cat is looking up strings in a big pg database... I dont want it to keep quering when the | has more than X items in it (optimally just 1 or 2)
T 1567245465 18<manARMy18>	I understand. iflag=fullblock means dd won't pass the buffer until it's full.
T 1567245470 18*	voldial will drop the cat now
T 1567245486 18<manARMy18>	* cat lands on paws. *
T 1567245542 18<voldial18>	this is really "cat file | grep something" where file is practically infinite, and grep hands the result to a long running process which must finish before it starts on the next line. is dd useful here?
T 1567245576 18<manARMy18>	process file | dd iflag=fullblock bs=$(( 1024 * 1024 * 128 )) | grep something
T 1567245608 18<manARMy18>	This helps the CPU cache.
T 1567245622 18<voldial18>	but... mumble (hands flailing) I need to hand grep lines, not some part of a line...
T 1567245685 18<manARMy18>	My example means that only "process" or "grep" is on the CPU cache at any given time.
T 1567245700 18<manARMy18>	Just the one.
T 1567245758 18<lesshaste18>	I have 500 files in a directory and some of them are duplicates. They are called prime-0.png to prime-499.png. I can see they are duplicated by running md5sum for example on them.
T 1567245767 18<lesshaste18>	How can I delete the duplicate files so I am left with only one copy of each?
T 1567245826 18<manARMy18>	lesshaste I would: 1. backup   2. rename them
T 1567245858 18<pj18>	voldial: why not just run all of that in the background so it doesn't block further processing?
T 1567245885 18<voldial18>	manARMy: I'm lost, but I'll try it. you picked a bs=128M, that almost never will align with the newline... so you must realize that... ah... it does not matter... for ref: cat inf_file_of_lines | tr '\n' '\0' | xargs -0 -I '{}' /usr/bin/expensive_calculator '{}'
T 1567245970 18<voldial18>	pj: run which processes in the bg? I dont know how to detach "cat inf_file_of_lines" and still have it pipe... I want that cat to stop reading that file until the pipe is empty
T 1567246009 18<lesshaste18>	manARMy, could you explain more? How does that remove the duplicates?
T 1567246038 18<pj18>	voldial: also this does sound like uuoc
T 1567246044 18<pj18>	!uuoc > voldial
T 1567246044 18<greybot18>	voldial: Useless Use Of Cat (cat foo | grep bar). See https://mywiki.wooledge.org/BashFAQ/119 and http://www.iki.fi/era/unix/award.html#cat
T 1567246049 18<manARMy18>	lesshaste: mv MD5abcd MD5abcd   overwrite
T 1567246090 18<manARMy18>	lesshaste: Need to note the "stat" file numbers before hand.
T 1567246104 18<pj18>	voldial: anyways, I mean to just background the whole thing as a group (run it in a subshell and background it).
T 1567246112 18<voldial18>	lesshaste: find yourdir -type f -exec https://bpaste.net/show/T05p {} \;
T 1567246114 18<zztop18>	for forever running services like vnc server, i have a bash script that does `while(1) run_the_thing`, so if the program crashes or whatever, bash will start it again, is this reliable?
T 1567246157 18<voldial18>	(oops) lesshaste: find yourdir -type f -exec https://bpaste.net/show/T05p {} . \;
T 1567246167 18<manARMy18>	zztop: Could in theory damage storage.
T 1567246177 18<pj18>	zztop: seeing as that's not bash syntax, I would say it's not going to be reliable.
T 1567246181 18<zztop18>	manARMy: how?
T 1567246188 18<voldial18>	lesshaste: backup first.
T 1567246197 18<zztop18>	pj: it's just pseudo code, even CS books use pseudo code
T 1567246203 18<manARMy18>	zztop: I myself use the cron daemon to restart
T 1567246221 18<voldial18>	pj: uuoc?
T 1567246227 18<zztop18>	manARMy: well, that while(1) thing has been suggested by someone here time ago, btw
T 1567246232 18<pj18>	voldial: read the factoid.
T 1567246238 18<zztop18>	manARMy: how that can damage storage?
T 1567246259 18<manARMy18>	After write 10000 times to one sector HDD damage
T 1567246274 18<voldial18>	pj: ah. no I was just using cat as a example. my real app isnt getting fed by the cat:)
T 1567246304 18<pj18>	zztop: well if the wrapper script is killed then it won't "run_the_thing" if it dies.  I prefer using cron for better reliability.
T 1567246305 18<zztop18>	manARMy: what?!?! do you know how that thing works? bash will run that program once, and only when the program crashes  the while(1) will do a second cycle!
T 1567246339 18<zztop18>	pj: yeah, that's a point. Someone is telling me i should use systemd
T 1567246357 18<pj18>	systemd is not a bad idea either.
T 1567246401 18<voldial18>	lemme know if you want someone to tell you otherwise.
T 1567246406 18<pj18>	voldial: anyways, you can do something like: `cat foo | bar &' and then your script will carry on after that line and not have to wait for it to complete.
T 1567246413 18<pj18>	!& > voldial
T 1567246413 18<greybot18>	voldial: If you put the control operator & at the end of a command, e.g. ''command args &'', the shell executes the command in the background in a subshell. The shell does not wait for the command to finish, and the return status is 0. Pid of the last backgrounded command is available via the special variable $!
T 1567246462 18<voldial18>	pj: thx, ya I understand that. the problem is the real cat will eat my cpu buffering results that are not needed yet.
T 1567246565 18<pj18>	oh ok, I thought you were just worried about it blocking your script.
T 1567246592 18<voldial18>	ya, I think the dd fullblock thing is right. testing
T 1567247235 18<esselfe18>	how do I disable a shell builtin (kill)
T 1567247343 18<voldial18>	heh. I didnt know there were 2 killers
T 1567247412 18<pj18>	write a function to replace it and hope they don't use the kill binary instead.
T 1567247420 18<voldial18>	esselfe: alias kill="/bin/kill"
T 1567247425 18<geirha18>	esselfe: you can enable and disable builtins with the enable builtin, but why would you want to disable the builtin kill?
T 1567247448 18<esselfe18>	voldial: thanks
T 1567247475 18<pj18>	and yeah, this sounds like a misdirected sense of someone trying to secure their system.
T 1567247487 18<esselfe18>	geirha: because my IRC bot is executing it with ^sh, but it shouldn't be able to kill itself
T 1567247504 18<geirha18>	o_O
T 1567247524 18<voldial18>	your bot is executing local commands;/? e gads.
T 1567247550 18<pj18>	fix the bot, don't cripple your system.
T 1567247574 18<voldial18>	is it for RC?
T 1567247683 18<esselfe18>	voldial: it's running system() calls within a vm
T 1567247710 18<voldial18>	right. why not ssh/
T 1567247750 18<voldial18>	it's fw punching?
T 1567247811 18<geirha18>	so it'll be easy to break your bot in other words
T 1567247821 18<geirha18>	disabling kill just moves the goal post a few centimetres
T 1567247934 18<pj18>	so you have a sh command for your bot that spawns a shell and can execute anything including killing the bot itself?  wow.
T 1567248021 18<voldial18>	!help
T 1567248021 18<greybot18>	I can do: !faq {number|string}, !pf {number|string}, !learn key value, !meta key, !metaurl key, !forget key, !searchkeys string, !factstats, !faqstats, !faqpages, !date, !version. For help with Bash builtins, use "help command" in bash.
T 1567248030 18<pj18>	actually if you really want to be able to run shell commands from your bot, I would recommend doing it in a sandbox like shbot does.  In fact, the code for shbot is publicly available, I think.
T 1567248032 18<pj18>	!shbot
T 1567248033 18<greybot18>	shbot runs each session in a new VM as root. Feel free to play with the bot in #evalbot. | Original: http://www.vidarholen.net/contents/evalbot/ | geirha's fork: https://github.com/geirha/shbot | current triggers: /msg shbot triggers
T 1567248215 18<voldial18>	!shbot whereis kill
T 1567248229 18<voldial18>	:(
T 1567248269 18<pj18>	# whereis kill
T 1567248271 18<shbot18>	pj: bash: whereis: command not found
T 1567248295 18<voldial18>	shbot isnt bash;)?
T 1567248316 18<pj18>	of course it is, what makes you think whereis is bash?
T 1567248318 18<nil18>	no, whereis isn't bash
T 1567248326 18<voldial18>	eh. my mistake. thought that was builtin
T 1567248344 18<geirha18>	# type -a kill
T 1567248345 18<shbot18>	geirha: kill is a shell builtin
T 1567248345 18<shbot18>	geirha: kill is /bin/kill
T 1567248374 18<voldial18>	# pidof shbot
T 1567248376 18<shbot18>	voldial: bash: pidof: command not found
T 1567248407 18<pj18>	voldial: shbot does not run in the sandbox, there is nothing to kill.
T 1567248415 18<geirha18>	the bot runs on the host, the commands it runs in a VM it spawns each time
T 1567248445 18<pj18>	# ps uax
T 1567248449 18<shbot18>	pj: USER      PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
T 1567248449 18<shbot18>	pj: root        1 89.2  2.3  12000  2900 ?        S    10:47   0:03 /bin/bash4 /init
T 1567248449 18<shbot18>	pj: etc... ( http://ix.io/1TSV )
T 1567248455 18<voldial18>	ah.
T 1567248483 18<pj18>	there you can see everything that is actually running in the VM ^^^^
T 1567248529 18<voldial18>	# file /init
T 1567248530 18<shbot18>	voldial: /init: Bourne-Again shell script, ASCII text executable
T 1567248540 18<voldial18>	# cat /init
T 1567248543 18<shbot18>	voldial: #!/bin/bash4
T 1567248543 18<shbot18>	voldial: shopt -s extglob
T 1567248543 18<shbot18>	voldial: etc... ( http://ix.io/1zFc )
T 1567248573 18<voldial18>	I like it
T 1567248612 18<voldial18>	# ls /bin
T 1567248614 18<shbot18>	voldial: '['         bunzip2    echo       iconv       mksh      rm        tsort
T 1567248614 18<shbot18>	voldial:  adu        bzcat      ed         id          mktemp    rmdir     tty
T 1567248614 18<shbot18>	voldial: etc... ( http://ix.io/1Cnn )
T 1567248626 18<pj18>	voldial: feel free to continue to play around with the bot in PM.
T 1567248674 18<voldial18>	I'll stop :) back to work
T 1567257111 18<mknod18>	Hello. Has anyone else had problems using ffmpeg in process substitution?
T 1567257216 18<lopid18>	!ffmpeg
T 1567257217 18<greybot18>	http://mywiki.wooledge.org/BashFAQ/089 -- I'm using a loop which runs once per line of input but it only seems to run once; everything after the first line is ignored?
T 1567257230 18<mknod18>	this works: ffmpeg -i music.m4a -f singlejpeg - > /dev/null
T 1567257253 18<mknod18>	this DOESN'T work: cat <(ffmpeg -i music.m4a -f singlejpeg -) > /dev/null
T 1567257380 18<twkm18>	in one stdout is redirected, in the other it is a pipe.
T 1567257624 18<mknod18>	twkm, I can't remember when was the last time I wrote a line of Bash but I'm pretty confident that these two examples above should yield the same result
T 1567257647 18<twkm18>	yet [repeat:] in one stdout is redirected, in the other it is a pipe.
T 1567257741 18<mknod18>	I'm failing to understand the obvious
T 1567257799 18<twkm18>	#ffmpeg may know.
T 1567257850 18<mknod18>	I'm considering it, though Bash is equally involved here
T 1567257890 18<twkm18>	nope.
T 1567257920 18<twkm18>	apart from you choosing redirection vs a pipe and bash obeying you.
T 1567257955 18<twkm18>	it is ffmpeg that decides whether it likes one and/or the other.
T 1567258205 18<lopid18>	same would happen in another shell
T 1567258253 18<mknod18>	let's see if the ffmpeg folks know what's a process substitution at all
T 1567258324 18<lopid18>	they might get asked it a lot
T 1567258369 18<twkm18>	so ask them about bash sytax because it is too hard to ask about whether a pipe matters?  okay, whatever.
T 1567258570 18<twkm18>	in any case, be kind to them and define "not work".
T 1567258580 18<mknod18>	I did.
T 1567258587 18<mknod18>	it just "hangs".
T 1567259418 18<mknod18>	[15:44:14]  <@durandal_1707>	mknod: from where you got that line?
T 1567259419 18<mknod18>	[15:46:11]  <@durandal_1707>	i first time see that
T 1567259419 18<mknod18>	[15:46:52]  <@durandal_1707>	which shell is that?
T 1567259425 18<mknod18>	see my point now?
T 1567259620 18<mknod18>	btw, ffmpeg seems to hang as soon as it's run in background
T 1567259719 18<lopid18>	it's reading from stdin?
T 1567259765 18<mknod18>	lopid, just found out that it was the issue :)
T 1567259768 18<twkm18>	because you provided them with bash syntax, not the result of that syntax.
T 1567259770 18<mknod18>	< /dev/null solved it
T 1567259792 18<lopid18>	…which is given in the faq posted right at the start
T 1567259850 18<mknod18>	lopid, the author must consider refining the title then
T 1567259875 18<lopid18>	you didn't read it because of the title?
T 1567259914 18<mknod18>	I did read it but moved away quickly.
T 1567262152 18<guardian18>	hello, what's the proper syntax to make "command_a || command_b" happen in background? Is it { command_a || command_b; }& ?
T 1567262173 18<mknod18>	yup
T 1567262232 18<guardian18>	thanks
T 1567262657 18<lesshaste18>	what does || do?
T 1567262679 18<lopid18>	!||
T 1567262679 18<greybot18>	Short-circuit control operators <http://mywiki.wooledge.org/BashSheet#Tests> A || B means "Run A. If A fails, run B." A && B means "Run A. If A succeeds, run B." Example: foobar || { echo "error" >&2; exit 1; }
T 1567263728 18<geirha18>	guardian: a || b &  will also run both commands in the background
T 1567264038 18<mknod18>	lopid, if you want to edit the FAQ entry
T 1567264073 18<mknod18>	The -nostdin switch is another way to address this issue. More elegant in my opinion.
T 1567264184 18<lopid18>	nice
T 1567264195 18<lopid18>	a shame it is necessary
T 1567268340 18<classsic18>	hi everybody
T 1567269276 18<a1fa18>	hello.. i am trying to put a seq 0 10 into an array.. does this sound right.. ARRAY=($(seq 0 10))
T 1567269303 18<geirha18>	array=( {0..10} )
T 1567269365 18<a1fa18>	geirha: sorry  - i forgot to add | sort -R
T 1567269380 18<geirha18>	in general though, to put the lines of a command into an array, use mapfile.   mapfile -t array < <(cmd)
T 1567269387 18<geirha18>	also, use lowercase variable names
T 1567269405 18<geirha18>	!faq random
T 1567269406 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/026 -- How can I randomize (shuffle) the order of lines in a file?  Or select a random line from a file, or select a random file from a directory?
T 1567269625 18<a1fa18>	thank you
T 1567269899 18<aozt18>	a1fa: you can use {10..1} to generate a list of numbers in reverse order
T 1567269908 18<aozt18>	# printf %s\n {3..1}
T 1567269910 18<shbot18>	aozt: 3n2n1n
T 1567269916 18<aozt18>	sorry
T 1567269918 18<twkm18>	depends on the version of bash.
T 1567269920 18<aozt18>	# printf '%s\n' {3..1}
T 1567269921 18<shbot18>	aozt: 3
T 1567269921 18<shbot18>	aozt: 2
T 1567269921 18<shbot18>	aozt: 1
T 1567269942 18<aozt18>	maybe you will need to put in your script a run-time feature test for that
T 1567270018 18<aozt18>	# if [[ $(printf '%s ' {3..1}) != "3 2 1 " ]]; then  printf >&2 'ERROR: use a newer version of bash, you!\n'; exit 1; fi
T 1567270019 18<shbot18>	aozt: no output
T 1567270025 18<aozt18>	2# if [[ $(printf '%s ' {3..1}) != "3 2 1 " ]]; then  printf >&2 'ERROR: use a newer version of bash, you!\n'; exit 1; fi
T 1567270027 18<shbot18>	aozt: ERROR: use a newer version of bash, you!
T 1567270027 18<shbot18>	aozt: logout
T 1567270027 18<shbot18>	aozt: (shell exited with 1)
T 1567276553 18<fred180718>	is it safe to assume, I always better use printf, example: printf '%(%H:%I:%S)T', instead of date in my scripts?
T 1567276907 18<aozt18>	fred1807: %(...)T format of printf is bash extension
T 1567276974 18<aozt18>	unfortunately it cannot be used to print timestamps with nanosecond or even millisecond precision
T 1567277018 18<aozt18>	yet GNU date can be used for that
T 1567277065 18<aozt18>	# printf '%(%c %N)T\n'; echo vs.; date '+%c %N'
T 1567277066 18<shbot18>	aozt: Sat Aug 31 18:44:25 2019 %N
T 1567277066 18<shbot18>	aozt: vs.
T 1567277066 18<shbot18>	aozt: Sat Aug 31 18:44:25 2019 254591389
T 1567277152 18<aozt18>	%N format is extension of GNU date...
T 1567277164 18<aozt18>	and %(...)T is the extension of GNU bash
T 1567277201 18<aozt18>	in this battle of GNU extensions the one that is in date wins, in my opinion
T 1567277312 18<aozt18>	GNU find can also print timestamps with nanosecond precision
T 1567277351 18<aozt18>	# find .bashrc -printf '%a\n'
T 1567277352 18<shbot18>	aozt: Sat Aug 31 18:49:11.1519999960 2019
T 1567277628 18<Soo_Slow18>	does anybody there use jq with bash? Im using it to quickly verify json files with bash (jq -f ./filename.json). If there are errors - it reports them, if there is nothing wrong - command just keep going forever. Is there any way to make it stop in that case and echo "Success"? Or maybe some other flag to make it go without printing the whole json file into terminal?
T 1567277839 18*	aozt just did  echo { | jq .; echo "$?"
T 1567277848 18<aozt18>	and the reported termination status was 0
T 1567277901 18<aozt18>	did    echo '{"' | jq .; echo "$?"    and the status was also 0
T 1567277950 18<aozt18>	it seems, at least for me, jq does not report any errors when invalid JSON data gets piped into it
T 1567277982 18<aozt18>	or do you have some filter program that does some specific checks of your json files?
T 1567278067 18<Soo_Slow18>	https://bpaste.net/show/DMXd aozt
T 1567278076 18<Soo_Slow18>	when json contain error, it reports them
T 1567278141 18<aozt18>	it seems that bpaste.net is forbidden in my country or something.  i cannot open any paste placed on this site
T 1567278167 18<Soo_Slow18>	https://pastebin.com/zkXqj6iB
T 1567278167 18<pasteban18>	Paste is available without ads on http://pastebin.com/raw/zkXqj6iB
T 1567278188 18<Soo_Slow18>	and with 'jq "." ./brokenjson.json', output will be
T 1567278198 18<Soo_Slow18>	'parse error: Expected separator between values at line 6, column 16'
T 1567278208 18<Soo_Slow18>	so it DOES report errors if they happen
T 1567278222 18<aozt18>	you are misusing your jq
T 1567278230 18<Soo_Slow18>	why so?
T 1567278242 18<aozt18>	-f option is for specifying a filter program
T 1567278252 18<Soo_Slow18>	maybe
T 1567278266 18<aozt18>	the filter program will be compiled, then jq will expect data on stdin and filter it
T 1567278280 18<aozt18>	you are seeing compilation errors
T 1567278292 18<aozt18>	the trivial filter program is  .
T 1567278298 18<Soo_Slow18>	but then again - if file is fine, 'jq "." ./filename.json' will print whole json's content
T 1567278310 18<Soo_Slow18>	while I just need to print something like "No errors were found"
T 1567278360 18<aozt18>	i just checked, and it seems that jq (at least without of any special options) just does not check for errors in JSON data
T 1567278388 18<Soo_Slow18>	but in my case it does
T 1567278402 18<Soo_Slow18>	did you compile it by your own or get from some repo?
T 1567278409 18<aozt18>	# echo '{ ' | jq .
T 1567278411 18<shbot18>	aozt: parse error: Unfinished JSON term at EOF at line 2, column 0
T 1567278431 18<aozt18>	i have jq-1.5-1-a5b5cbe
T 1567278448 18<aozt18>	# jq --version
T 1567278448 18<Soo_Slow18>	shbot just reported you error
T 1567278449 18<shbot18>	aozt: jq-1.6-17-g61cd6db-dirty
T 1567278491 18<aozt18>	it seems that reports about parsing errors is a feature that was added only recently...
T 1567278535 18<Soo_Slow18>	probably
T 1567278536 18<go|dfish18>	1.5 does too, it's just that it had a lot of edge cases about allowing invalid json through
T 1567278551 18<aozt18>	or maybe my version has a bug because of which such invalid JSON data as { and {" are just ignored...
T 1567278556 18<go|dfish18>	Soo_Slow: sounds like you just want to discard jq's output
T 1567278563 18<aozt18>	# echo '{ ' | jq .; echo $?
T 1567278565 18<shbot18>	aozt: parse error: Unfinished JSON term at EOF at line 2, column 0
T 1567278565 18<shbot18>	aozt: 0
T 1567278577 18<aozt18>	it still terminates with return status of success
T 1567278578 18<Soo_Slow18>	go|dfish, only in case there are no errors. But probably
T 1567278578 18<go|dfish18>	ouch
T 1567278599 18<go|dfish18>	# echo '{"lol' | jq .; echo $?
T 1567278600 18<shbot18>	go|dfish: parse error: Unfinished string at EOF at line 2, column 0
T 1567278601 18<shbot18>	go|dfish: 0
T 1567278607 18<go|dfish18>	hashtag rekt
T 1567278659 18<Soo_Slow18>	# echo '{ ' | jq .&& echo $?
T 1567278662 18<shbot18>	Soo_Slow: parse error: Unfinished JSON term at EOF at line 2, column 0
T 1567278662 18<shbot18>	Soo_Slow: 0
T 1567278681 18<go|dfish18>	looks like -e was added?
T 1567278688 18<go|dfish18>	# echo '{"lol' | jq -e .; echo $?
T 1567278690 18<shbot18>	go|dfish: parse error: Unfinished string at EOF at line 2, column 0
T 1567278690 18<shbot18>	go|dfish: 4
T 1567278728 18<aozt18>	-e affects return status in a weird way
T 1567278735 18<aozt18>	# jq_stderr=$(echo '{ ' | jq . 3>&1 >/dev/null 2>&3);  if [[ -z $jq_stderr ]]; then  echo no errors;  else  echo there were errors;  fi
T 1567278737 18<shbot18>	aozt: there were errors
T 1567278745 18<aozt18>	# jq_stderr=$(echo '{} ' | jq . 3>&1 >/dev/null 2>&3);  if [[ -z $jq_stderr ]]; then  echo no errors;  else  echo there were errors;  fi
T 1567278747 18<shbot18>	aozt: no errors
T 1567278789 18<aozt18>	"no errors" = nothing was printed on stderr while jq was running
T 1567278914 18<Soo_Slow18>	maybe I should send jq's output to grep and if there are no error messages (grep's output is empty) - echo 'success'?
T 1567278937 18<Soo_Slow18>	(otherway print errors)
T 1567278943 18<aozt18>	you can capture stderr output of jq using redirections
T 1567278958 18<Soo_Slow18>	but you've just said that jq's stderr is broken, no?
T 1567279075 18<aozt18>	i didn't say that stderr is broken, i noticed that jq just silently ignores some sorts of malformed JSON, at least in my version
T 1567279126 18<aozt18>	it seems natural that if there are no parsing errors, then there will be no messages on stderr
T 1567279212 18<aozt18>	you can capture stderr of a program using the  3>&1 >/dev/null 2>&3  sequence of redirections, then you can use -z test of [[ ... ]] command (or [ -z "$var" ], or test -z "$var")) to check if variable is empty
T 1567279292 18<aozt18>	(to check if contents of the variable, the text stored in the buffer referenced by the variable, is an empty string)
T 1567279557 18<aozt18>	maybe, if you want to bail out early and avoid saving all the log of errors in memory, it makes sense to read at most one byte of output
T 1567279565 18<kerframil18>	wouldn't using -e then checking whether ? > 1 do?
T 1567279572 18<kerframil18>	$? even
T 1567279573 18<aozt18>	in bash, read -r -N1 can be used for that
T 1567279589 18<lavalike18>	what is the bot command that explains that 2&>1 is position dependent in your redirections?
T 1567279680 18<aozt18>	kerframil: manpage says, that jq will exit with 4 "if no valid result was ever produced"
T 1567279754 18<aozt18>	kerframil: maybe some valid result will be produced, even if there will be some parsing errors.  or is this guess of mine wrong?
T 1567279853 18<kerframil18>	aozt: I thought not but I'm by no means certain. I gave up upon jq because of these quirks and now use jshon. I know jq is more powerful but when it gets to that point, I would find myself reaching for something other than bash.
T 1567279882 18<kerframil18>	4 does cover the invalid JSON case, at least.
T 1567279883 18<aozt18>	Soo_Slow: if you trust kerframil and his suggestion to use -e option to check that the return status is 4 or not 4 (it should be 4 in case of parsing error), then you can use this method
T 1567279918 18<mknod18>	Soo_Slow: never trust kerframil!
T 1567279941 18<kerframil18>	well, if you do, test (( $? > 1 )), I think. 2 and 3 are both valid reasons to bail out.
T 1567279942 18<aozt18>	# echo Soo_Slow: | jq -e >/dev/null 2>&1; jq_ret=$?;  if [[ $jq_ret == 4 ]]; then  echo  parsing errors;  else  echo no errors;  fi
T 1567279943 18<shbot18>	aozt: no errors
T 1567279955 18<aozt18>	no way
T 1567279956 18<kerframil18>	along with 4.
T 1567279963 18<aozt18>	# echo Soo_Slow: | jq -e . >/dev/null 2>&1; jq_ret=$?;  if [[ $jq_ret == 4 ]]; then  echo  parsing errors;  else  echo no errors;  fi
T 1567279965 18<shbot18>	aozt: parsing errors
T 1567279983 18<aozt18>	# echo '  "Soo_Slow:" ' | jq -e . >/dev/null 2>&1; jq_ret=$?;  if [[ $jq_ret == 4 ]]; then  echo  parsing errors;  else  echo no errors;  fi
T 1567279985 18<shbot18>	aozt: no errors
T 1567280021 18<kerframil18>	# echo '  "Soo_Slow:" ' | jq -e . &>/dev/null; (( $? > 1 )) && echo "errors"
T 1567280023 18<shbot18>	kerframil: no output
T 1567280027 18<kerframil18>	hmm
T 1567280055 18<kerframil18>	well, that sucks.
T 1567280084 18<aozt18>	"Soo_Slow:" is valid JSON, it is a string in double quotes
T 1567280123 18<kerframil18>	oh, so it doesn't need an array or object then. ok.
T 1567280134 18<kerframil18>	jshon would reject that.
T 1567280197 18<kerframil18>	anyway, 1 is definitely the not-necessarily-bad exit status value.
T 1567280226 18<aozt18>	Soo_Slow: ok, if you think it is safe for you to do that,   ... | jq -e . &>/dev/null;  (($? > 1)) && echo errors    is not the worst approach, it seems
T 1567280241 18<Soo_Slow18>	uuhhhh
T 1567280242 18<Soo_Slow18>	thanks :D
T 1567280286 18<aozt18>	Soo_Slow: when using $?, it's recommended to instantly save it to some variable
T 1567280344 18<aozt18>	because checks like   if [[ $? == 3 ]] || [[ $? == 4 ]]; then ... fi   will NOT WORK with $? because of natural properties of $?
T 1567280382 18<Soo_Slow18>	didnt know
T 1567280459 18<aozt18>	you should typically immediately assign the status returned by $? to some variable, preferably on the same line where the command is called (to avoid inserting by mistake another command between the command status of which you want to save and the assignment of $? to a variable)
T 1567280463 18<kerframil18>	how about wrapping it? jq() { command jq -e "$@"; (( $? < 1 )); }
T 1567280500 18<kerframil18>	er, (( $? < 2 )), sorry
T 1567280540 18<kerframil18>	then if jq ... should work as expected. hopefully.
T 1567407102 20*	Disconnected (20)
T 1567407129 19*	Now talking on 22#bash
T 1567407129 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567407129 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567407129 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567407949 20*	Disconnected (20)
T 1567407972 19*	Now talking on 22#bash
T 1567407972 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567407972 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567407972 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567407976 18<pj18>	Kira: as best as I can tell it dates back to the original bourne shell (/bin/sh).  Some googling shows these explanations: https://superuser.com/questions/57575/what-is-the-origin-of-the-unix-dollar-prompt https://unix.stackexchange.com/questions/291729/why-is-the-default-symbol-for-a-user-shell-and-the-default-symbol-for-a-root
T 1567408063 18<Kira18>	ah, I saw the one on superuser.com, but not the one on unix stackexchange.
T 1567408090 18<Kira18>	Looks like the one at unix stackexchange provides a better explanation.
T 1567408192 18<xeon18>	regex question: how to match 0 to (up to) 5 spaces?
T 1567408503 18<stockholm18>	so i have a bash script started from systemd as a service, and inside that script i do while true; do ...; find . | entr -dn "directory changed"; done. My problem is that my startup script is really slow (1:30min - systemctl timeout) to restart. i thought it might have been entr not dying when receiving TERM, but can it be the while; do; done loop restats the entr process that i keep seeing?
T 1567408617 18<xeon18>	regex question: how to match as many as possible but at most 5 spaces?
T 1567409240 18<osse18>	xeon: usually something like   x \{0,5}y
T 1567409874 20*	Disconnected (20)
T 1567409897 19*	Now talking on 22#bash
T 1567409897 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567409897 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567409897 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567410618 18<stockholm18>	geirha: the while loop wont the restart the pileline over and over again, though, will it?
T 1567410639 18<geirha18>	no
T 1567410644 18<stockholm18>	geirha: can i end the pipeline?
T 1567410671 18<geirha18>	if you run it in the background, and wait for it with wait, a TERM signal will interrupt it immediately
T 1567410683 18<geirha18>	In that case you'll want to set a trap that kills the pipeline on exit though
T 1567410745 18<stockholm18>	i can sure run it in the background... currently i dont. how do i set a trap for the pipeline? catch it's PID and send it a term?
T 1567410748 18<stockholm18>	TERM
T 1567410800 18<geirha18>	yeah
T 1567410801 18<stockholm18>	i use a trap for TERM already for other cleanup, i would need to set a new one in each loop, right?
T 1567410827 18<geirha18>	no, one will do
T 1567410838 18<geirha18>	*once
T 1567410923 18<stockholm18>	hu? the PID inside the loop with change each time.
T 1567410952 18<geirha18>	yes, but you store it in the same variable each time, which the trap can access
T 1567410986 18<geirha18>	trap 'if [[ $pid ]]; then kill "$pid"; fi' EXIT
T 1567412306 18<CrtxReavr18>	I need a way to print lines with less than 3 commas with sed preferable.
T 1567412436 18<survietamine18>	no idea why sed, but you can ask in its channel
T 1567412452 18<CrtxReavr18>	grep then?
T 1567412456 18<CrtxReavr18>	I'm easy I ugess.
T 1567412457 18<CrtxReavr18>	guess
T 1567412571 18<pj18>	grep is easy, sed probably is as well: grep -v ',.*,.*,'
T 1567412662 18<CrtxReavr18>	Thanks.
T 1567412676 18<CrtxReavr18>	I was hell-bent on trying to escape the comas.
T 1567412991 18<Patsie18>	sed -n '/,.*,.*,/p'
T 1567413100 18<RastaBusta2x18>	schedule it every 15 minutes needs xcowsay installed https://www.datafilehost.com/d/1ec1001f
T 1567413262 18<geirha18>	awk -F, 'NF <= 3'
T 1567413464 18<Soliton18>	for certain interpretations of less than.
T 1567415182 18<wuseman18>	CrtxReavr: for sed as asked:
T 1567415186 18<wuseman18>	# echo "a,b,c,d,e,f,g,h" |  sed 's/,/\n/3;P;d'
T 1567415188 18<shbot18>	wuseman: a,b,c
T 1567415194 18<wuseman18>	echo "a,b,c,d,e,f,g,h" |  sed -r 's/([^,]+,)([^,]+,)([^,]+).*/\1\2\3/'
T 1567415207 18<wuseman18>	or echo "a,b,c,d,e,f,g,h" |  sed -r 's/(([^,]+,){2}([^,]+)).*/\1/'
T 1567415300 18<Soliton18>	# echo ",b,c,d,e,f,g,h" |  sed -r 's/(([^,]+,){2}([^,]+)).*/\1/'
T 1567415302 18<shbot18>	Soliton: ,b,c,d
T 1567415377 18<Soliton18>	none of those are portable, btw.
T 1567415548 18<pj18>	or with pure bash: while IFS= read -r line; do [[ $line == ,*,*, ]] || echo "$line"; done < filename
T 1567415552 18<pj18>	untested ^^^^
T 1567415745 18<wuseman18>	hehe
T 1567415764 18<wuseman18>	the most simple one I think is
T 1567415768 18<wuseman18>	# echo "b,c,d,e,f,g,h" | sed 's/,[^,]*//3g'
T 1567415769 18<shbot18>	wuseman: b,c,d
T 1567415774 18<wuseman18>	sed ftw !!!
T 1567415825 18<wuseman18>	last is for gnu/sed
T 1567416277 18<b0tanik18>	.7
T 1567417172 18<geirha18>	what, the awk isn't simple enough?
T 1567417206 18<wuseman18>	If it would work, sure
T 1567417218 18<wuseman18>	# echo "a,b,c,d,e,f,g,h" | awk -F, 'NF <= 3'
T 1567417219 18<shbot18>	wuseman: no output
T 1567417240 18<geirha18>	the line has more than 3 commas, so it shouldn't print
T 1567417347 18<survietamine18>	hehe
T 1567417399 18<geirha18>	# printf '%s\n' a,b a,b,c a,b,c,d | awk -F, 'NF <= 3'
T 1567417401 18<shbot18>	geirha: a,b
T 1567417401 18<shbot18>	geirha: a,b,c
T 1567418030 18<survietamine18>	# printf '%s\n' a,b a,b,c a,b,c,d | sed 's/,[^,]*//3g'
T 1567418031 18<shbot18>	survietamine: a,b
T 1567418031 18<shbot18>	survietamine: a,b,c
T 1567418031 18<shbot18>	survietamine: a,b,c
T 1567418061 18<geirha18>	mh, printing the lines that fit, vs modifying the lines to fit
T 1567418081 18<survietamine18>	yeah, that's why I answered "no idea why sed'
T 1567418089 18<survietamine18>	imho, it's not proper tool
T 1567418096 18<wuseman18>	nope
T 1567418638 20*	Disconnected (20)
T 1567418665 19*	Now talking on 22#bash
T 1567418665 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567418665 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567418665 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567421673 18<andre144k18>	hi all.. anyone know a shortcut to change insde "mc" active folder to folder from other window-side?
T 1567421693 18<andre144k18>	so that both folders are same?
T 1567421824 18<jan618>	!nabq
T 1567421824 18<greybot18>	Not a #bash question. We're no experts in that software or OS; consider asking the channel or mailing list with experts on that topic (eg. ##linux #openssh #ubuntu #zsh #systemd).
T 1567421948 18<jan618>	andre144k: ^ not a bash question, ##linux MIGHT know, but they're not the "correct" channel either, but at least they're a general channel, mc has nothing to do with bash or shells tho, so definitely doesn't belong here ,P
T 1567421984 18<andre144k18>	yes i knw - i thougt maybe someone knows :)
T 1567425360 20*	Disconnected (20)
T 1567425386 19*	Now talking on 22#bash
T 1567425386 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567425386 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567425386 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567429525 18<fred180718>	is there a global way (gnu/posix/osx/linux) to test if time is am or pm ?
T 1567429611 18<jan618>	use logic and reasoning? ;P
T 1567429659 18<twkm18>	not everwhere believes in am vs pm.
T 1567429711 18<kerframil18>	which time ... the current time? an arbitrary time?
T 1567429754 18<twkm18>	but something like shopt -s nocasematch; case $(date +%X) in *AM*) ...;; *PM*) ...;; *) ...;; esac might work for you.
T 1567429785 18<Patsie18>	# date +%X
T 1567429786 18<shbot18>	Patsie: 13:09:45
T 1567429802 18<Patsie18>	I guess taht falls under the *) category then :)
T 1567429803 18<kerframil18>	# date +%r
T 1567429804 18<shbot18>	kerframil: 01:10:03 PM
T 1567429806 18<twkm18>	thus my first response and the *).
T 1567429866 18<jan618>	# date +%p
T 1567429867 18<twkm18>	now one might say, idgaf, in which case you might LC_TIME=en_US for date.
T 1567429868 18<shbot18>	jan6: PM
T 1567429871 18<jan618>	;P
T 1567429886 18<jan618>	%p is locale-specific, but otherwise nice
T 1567430023 18<jan618>	# if test "$(date +%H)" -gt 12 ; then echo "PM" ; else echo "AM" ; fi
T 1567430024 18<shbot18>	jan6: PM
T 1567430051 18<Patsie18>	-ge 12
T 1567430056 18<jan618>	[[ instead of "test" ]] for bash could be better, but still
T 1567430058 18<jan618>	that too
T 1567430115 18*	jan6 doesn't know midnight/day am-pm-ness ;P
T 1567430396 18<kerframil18>	[[ would be worse without qualifying the base.
T 1567430408 18<kerframil18>	# [[ 08 -gt 12 ]]
T 1567430409 18<shbot18>	kerframil: bash: [[: 08: value too great for base (error token is "08")
T 1567430436 18<kerframil18>	so, test ain't so bad there.
T 1567432194 18<kurahaupo18>	# declare -i h ; printf -v h '10#%(%H)T' ; if ((h<12)) ; then echo morning ; else echo afternoon ; fi
T 1567432195 18<shbot18>	kurahaupo: afternoon
T 1567432572 18<kurahaupo18>	# declare -i h ; TZ=NZ printf -v h '10#%(%H)T' ; if ((h<12)) ; then echo morning ; else echo afternoon ; fi
T 1567432573 18<shbot18>	kurahaupo: afternoon
T 1567432733 18*	kurahaupo glares at shbot for its TZ handling; it's early morning in NZ right now.
T 1567432759 18<Soliton18>	looks like shbot doesn't travel much.
T 1567432761 18<twkm18>	perhaps no zoneinfo.
T 1567432832 18<kurahaupo18>	# find /usr/share/zoneinfo -type f -printf x | wc -c
T 1567432833 18<shbot18>	kurahaupo: find: '/usr/share/zoneinfo': No such file or directory
T 1567432834 18<shbot18>	kurahaupo: 0
T 1567432902 18<twkm18>	# locale -a | wc -l
T 1567432903 18<shbot18>	twkm: 6
T 1567432967 18<jan618>	# locale -a | grep -Ev 'POSIX|C' | wc -l
T 1567432968 18<shbot18>	jan6: 4
T 1567433052 18<twkm18>	<http://ix.io/OBU>
T 1567433108 18<jan618>	yep, german, english, estonian, norse, it seems (not certain of the last one, but probably norse)
T 1567433181 18<Soliton18>	norwegian
T 1567433217 18<twkm18>	mainly i meant to show that it is a quite small install, in keeping with no obvious tzinfo.
T 1567433231 18<jan618>	right
T 1567433236 18<twkm18>	6 vs typically hundreds if not trimmed.
T 1567433248 18<Achylles18>	how do I use this stow command for symlinking? Always get these slashes errors
T 1567433255 18<Achylles18>	stow -vt /tmp/other/ ~vagner/.stumpwm.d/compton.conf
T 1567433271 18<Achylles18>	stow: ERROR: Slashes are not permitted in package names
T 1567433274 18<Soliton18>	check the documentation.
T 1567433287 18<jan618>	# TZ=GMT-3 date
T 1567433288 18<shbot18>	jan6: Mon Sep  2 17:08:07 GMT 2019
T 1567433290 18<jan618>	# TZ=GMT-7 date
T 1567433291 18<shbot18>	jan6: Mon Sep  2 21:08:10 GMT 2019
T 1567433297 18<jan618>	that still works tho ;P
T 1567433342 18<twkm18>	Achylles: surely that's not hard to understand.  packages are not paths.
T 1567433388 18<kurahaupo18>	# TZ=XXX-12YYY,M9.5,M4.1 date +%F,%T,%z,%Z # do SysV-style TZ strings still get fully interpreted?
T 1567433389 18<shbot18>	kurahaupo: 2019-09-03,02:09:48,+1200,XXX
T 1567433420 18<kurahaupo18>	# TZ=XXX-12YYY,M8.5,M4.1 date +%F,%T,%z,%Z # really!?
T 1567433422 18<shbot18>	kurahaupo: 2019-09-03,03:10:21,+1300,YYY
T 1567433428 18<kurahaupo18>	yay! it really works!
T 1567433558 18<jan618>	wait what? what sorcery is this!? ;P
T 1567433753 18<twkm18>	it describes the zone tagnames and gmt offset along with when it changes from a to b time -- ''man timezone'' might describe it more fully.
T 1567433798 18<kurahaupo18>	jan6: Name Offset [dstname [dstoffset]] [,autumnswitchdate,springswitchdate]
T 1567433860 18<kurahaupo18>	where the switch dates are given as M month.week-of-month[.day-of-week] or one of several others that I don't recall just now
T 1567433866 18<twkm18>	well, end is required but start isn't.  stdoffset[dst[offset][,start[/time],end[/time]]]
T 1567434026 18<kurahaupo18>	jan6: TZ=NZST-12NZDT,M8.5,M4.1 means 12 hours ahead of UTC during winter, labelled "NZST", and one more hour ahead during summer, labelled "NZDT", where summer starts on the last Sunday of September, and ends on the first Sunday of April.
T 1567434030 18<twkm18>	Achylles: perhaps you wanted cp.
T 1567434069 18<jan618>	nice
T 1567434071 18<kurahaupo18>	(the default switch is 2am Sunday)
T 1567434080 18<Achylles18>	twkm, not really. I am trying to learn how to make symlinks with stow
T 1567434101 18<twkm18>	stow isn't a general symlink'ing tool.
T 1567434116 18<kurahaupo18>	ln -s ?
T 1567434169 18<twkm18>	it is a private repo manager, so you "install" a particular package which stow does by symlink'ing the various components.
T 1567434217 18<Achylles18>	twkm, kurahaupo  https://invidio.us/watch?v=zhdO46oqeRw
T 1567434238 18<twkm18>	a'la, ln -s /path/to/package/bin/foo /install/location/bin/ && ln -s /path/to/package/lib/libfoo.a /install/location/lib/ && ...
T 1567434345 18<twkm18>	watch a video?  hahahaha.
T 1567434352 18<kurahaupo18>	twkm: I'd hate to see that on top of (underneath?) /etc/alternatives :-(
T 1567434429 18<twkm18>	certainly one generally would not mix them.
T 1567434500 18<twkm18>	each has a way for mere users to use the tooling.
T 1567434657 18<twkm18>	Achylles seems to think stow is just automated ln -s (so far so good, but ...) where a path can be named where a package name is expected.
T 1567434729 18<kurahaupo18>	That said, some of the things in my $HOME/bin go like: frub -> ../projects/frubnosticator/bin/frub and $HOME/projects/frubnosticaor/bin -> .GIT/bin and $HOME/projects/frubnosticator/.GIT -> ../../git/frubnosticator
T 1567434790 18<kurahaupo18>	and then there's the two layers of local git repo - the "stable" and the "dev"
T 1567434835 18<kurahaupo18>	which I switch between by changing the .GIT symlink
T 1567434920 18<twkm18>	Achylles: but the textual notes ... note that no pathname is used except as a -t argument.
T 1567434989 18<Achylles18>	twkm, I found the issue
T 1567434991 18<twkm18>	e.g., ''stow -vt ~/Remote name...''  nowhere is there a ''stow ... path/name/here''.
T 1567435015 18<Achylles18>	it links only folders and not files
T 1567435022 18<Achylles18>	not single files
T 1567435062 18<twkm18>	packages, which might mean directories are linked or files depending on the state of the target.
T 1567435090 18<Achylles18>	yes. packages means folders. LOL
T 1567435125 18<twkm18>	each package is certainly a directory under the stow toplevel, yes.  but that package might be only files.
T 1567435434 18<twkm18>	e.g., ./name/ might contain only files which would be symlink'd into ~/Remote/, or it might (usuallly would) contain a complete (sub)tree composed of files and directories, which if the directories are not present under ~/Remote/ the directory is symlink'd otherwise just the files are.
T 1567435567 18<twkm18>	(and if the target directory is a symlink it is removed, created as a directory, then the current package's files as well as the original package's files are symlink'd)
T 1567435694 18<Achylles18>	twkm, I have found here that the command does not work in tmux, but non-tmux env
T 1567435761 18<twkm18>	not too surprising.
T 1567435843 18<kurahaupo18>	Achylles: Which shell are you running inside tmux? Which shell do you run otherwise? Do you start your shells as "login shells", or not, so that they always (or never) read .profile/.bash_profile
T 1567435926 18<kurahaupo18>	Do you set your PATH differently in .bashrc vs .bash_profile?
T 1567436653 18<Achylles18>	kurahaupo, I do not have .bash_profile
T 1567436662 18<kurahaupo18>	or a .profile?
T 1567436663 18<Achylles18>	I do .profile
T 1567436743 18<Achylles18>	kurahaupo, if [ -f "$HOME/.bashrc" ]; then
T 1567436758 18<Achylles18>	. "$HOME/.bashrc"
T 1567498452 20*	Disconnected (20)
T 1567498477 19*	Now talking on 22#bash
T 1567498477 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567498477 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567498478 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567499161 18<floppydh18>	what are opinions on: instead of quitting on errors in longer running scripts, print the error and pause the script, so that the user can fix the problem and then continue with the remaining things
T 1567499452 18<twkm18>	depends.
T 1567499874 18*	pj remembers "Abort/Retry/Ignore"
T 1567499955 18<pj18>	it would be pretty easy to write a function that does that.
T 1567500014 18<geirha18>	though I'd avoid making that feature default behavior
T 1567500580 18<floppydh18>	apparently this has fallen out of fashion
T 1567500600 18<floppydh18>	I guess in favor of automation
T 1567500701 18<geirha18>	yeah, instead, when it fails, you're supposed to go to stackoverflow and copy/paste the first answer you find
T 1567500948 18<pj18>	geirha: I would write it as a wrapper that has to be called for each individual command where you want it.
T 1567502607 18<xqo18>	':' //; exec "`npm bin`/babel-node" "$0" "$@" this is the second line of a shell-script (first line is #!/bin/sh). how can I include the arg: --presets @babel/env ?
T 1567502691 18<xqo18>	when I put it in the first parentheses, exec thinks the path to the executable includes the arg. if I include it in any later parantheses, the binary doesnt run as if the args were included
T 1567502717 18<geirha18>	exec "$(npm bin)/babel-node "$0" --presets @babel/env "$@"
T 1567502897 18<xqo18>	geirha devops/setup-env: line 2: exec: /Users/olve/github/fileconverter/backend/node_modules/.bin/babel-node devops/setup-env: cannot execute: No such file or directory
T 1567502905 18<xqo18>	the paths are correct though
T 1567503100 18<geirha18>	so it didn't work from the start?
T 1567503147 18<geirha18>	also, why isn't it using npx?
T 1567503204 18<geirha18>	but anyway, the weird part is passing "$0" there. Almost as if it's written as a hybrid between javascript and sh
T 1567503237 18<xqo18>	i want to run javascript as shell-scripts like: $> devops/setup-env. I can call the files as expected if I do: ':' //; exec "`npm bin`/babel-node" "$0" "$@"
T 1567503255 18<geirha18>	eww
T 1567503258 18<xqo18>	however babel-node doesnt read its config file for some reason, so I need to call with the --presets @babel/env arg
T 1567503270 18<xqo18>	if I want to use modern syntax in the js
T 1567503325 18<geirha18>	so maybe that option should be before "$0" then
T 1567503375 18<xqo18>	i tried now, the binary acts as if the arg doesnt exist
T 1567503399 18<geirha18>	ok? what is the "binary" in this context?
T 1567503410 18<igemnace18>	you sure you don't want to use an npm script instead? that'd just be a "babel-node --presets @babel/env" line
T 1567503444 18<xqo18>	node_modules/.bin/babel-node is the executable. npm bin prints the path of the .bin directory
T 1567503510 18<Soliton18>	your error above shows wrong quoting. babel-node and $0 should be separate arguments.
T 1567503545 18<geirha18>	':' //; exec npx babel-node --presets @babel/env "$0" "$@"
T 1567503557 18<geirha18>	still sounds like a bad idea
T 1567503836 18<xqo18>	still didnt work. guess i'll just use npm scripts
T 1567504134 18<xqo18>	thanks anyway!
T 1567508087 18<pyzozord18>	hi what's the easiest one liner to feed some string std in to other program? Like i want to run single line of javscripn in node.js from bash
T 1567508101 18<pyzozord18>	"console.log('hi')" | node doesnt work :(
T 1567508147 18<lopid18>	echo "string" | command
T 1567508162 18<pyzozord18>	lopid: thought so, just double checking that im not worng, thanks!
T 1567508163 18<kurahaupo18>	your_command <<<some_string
T 1567508164 18<personaNonSpot18>	google search
T 1567508182 18<kurahaupo18>	pyzozord: ^^
T 1567508220 18<kurahaupo18>	pyzozord: "console.log" is Javascript (ECMAscript), which is a completely different language from the Shell.
T 1567508221 18<personaNonSpot18>	 /join #bash
T 1567508231 18<kurahaupo18>	personaNonSpot: you're already here
T 1567508243 18<personaNonSpot18>	oh sorry
T 1567508252 18<kurahaupo18>	personaNonSpot: hi, welcome
T 1567508264 18<lopid18>	node interprets javascript
T 1567508277 18*	lopid makes a bold claim
T 1567508295 18<han-solo18>	`echo 'console.log("hellow orld")' | node ` # workz too
T 1567508357 18<kurahaupo18>	pyzozord: when you write thingA | thingB both things have to be programs (possibly with arguments); "echo" is a program that writes its arguments to stdout.
T 1567509200 18<oskie18>	I need to create a pseudo tty device, that basically just sits there and does nothing - just emulating a terminal for a program. Any suggestions?
T 1567509229 18<kurahaupo18>	oskie: do you need to feed it any input, or record output?
T 1567509257 18<oskie18>	kurahaupo: no
T 1567509364 18<oskie18>	I need to run a program called winexe. If I do "winexe </dev/null" the program won't work. But I can't give it stdin, becaue it is used for other purposes
T 1567509401 18<Soliton18>	!faketty
T 1567509401 18<greybot18>	Quick way to make programs believe that they're reading/writing from/to a terminal: function faketty { script -qfc "$(printf "%q " "$@")" /dev/null; }
T 1567509421 18<kurahaupo18>	oskie: the utility "script" is probably what you want
T 1567509485 18<oskie18>	nice, thanks!
T 1567509586 18<oskie18>	strange, for some reason it did not work. Well, I'll have to investigate the winexe code.
T 1567509656 18<wwilliam18>	Hello is this OK or it can be improve?
T 1567509657 18<wwilliam18>	http://paste.debian.net/hidden/845b3e0d/
T 1567509812 18<Soliton18>	!check
T 1567509812 18<checkbot18>	Soliton: Looks good to me
T 1567509949 18<Soliton18>	at least no shell injection so that's a plus.
T 1567509983 18<wwilliam18>	OK should work?
T 1567509984 18<Soliton18>	find -exec with {} not the last argument looks questionable.
T 1567509998 18<wwilliam18>	it goes into another bigger "script"
T 1567510068 18<Soliton18>	also some weird sleep in there.
T 1567510091 18<wwilliam18>	that while has to run forever
T 1567510114 18<wwilliam18>	so i let it rest 5 mins until new shs show to proccess them.
T 1567510225 18<wwilliam18>	{} always have to be last? on that find?
T 1567510293 18<wwilliam18>	the thing is that $2 is a script that needs that copy there and then the last arg for $2 has to be index.txt
T 1567510443 18<wwilliam18>	for x  in ./*copy*;do  "$2" prod test "$x" "$3";done
T 1567510444 18<Soliton18>	well, it's not -exec + so it's fine.
T 1567510450 18<wwilliam18>	may be that better?
T 1567510482 18<Soliton18>	if you don't actually go through a dir hierarchy, sure.
T 1567510489 18<wwilliam18>	I dont
T 1567510517 18<wwilliam18>	I just cd and then the file *copy* should be there.
T 1567510549 18<Soliton18>	then use for loop + glob, yes.
T 1567510647 18<wwilliam18>	oh issue if i use that for loop + glob i get results with ./  i need to remove that from the result or $2 will fail.
T 1567510734 18<Soliton18>	so remove it from the glob...
T 1567510748 18<wwilliam18>	oh ok thanks
T 1567510790 18<wwilliam18>	Thank you Soliton for your time and knowledge all good now I will use that.
T 1567510790 18<Soliton18>	sounds like a bug in that other script though.
T 1567510828 18<Soliton18>	sure. it does seem like you're starting to understand what you're doing. :-)
T 1567510861 18<wwilliam18>	Which other script? $2?
T 1567510868 18<wwilliam18>	Well that one is not mine.
T 1567510871 18<Soliton18>	yes.
T 1567510877 18<wwilliam18>	I have to call it in mine.
T 1567510907 18<wwilliam18>	I will post the whole thing........one moment please
T 1567510908 18<Soliton18>	if it take file paths it should just work. if it needs the basename or whatever it should do that.
T 1567511613 18<wwilliam18>	this is the whole thing with the for loop and glob.
T 1567511671 18<wwilliam18>	http://paste.debian.net/hidden/f59ea33a/
T 1567511742 18<phreaky18>	Hey guys I need some help with jq tool. How the f*** do I use script variable which serves as a dynamic key to get the value from a dictionary ?
T 1567511775 18<Soliton18>	!jqcreate
T 1567511776 18<greybot18>	To create JSON strings with variable assignments: jq -nc --arg bar "$bar" '{foo:$bar}' ;# compare with awk -v awkvar="$bashvar"
T 1567511790 18<Soliton18>	that shows how to hand a variable to jq.
T 1567511940 18<kurahaupo18>	phreaky: where is your "dictionary" currently stored?
T 1567511943 18<phreaky18>	Soliton, first thanks for the fast reply second , doesn't that serve the purpose when you have a variable as a key within the JSON itself ?
T 1567511946 18<wwilliam18>	problem you are right soliton I need to go through a dir hierarchy. :( that for loop no good.
T 1567511982 18<Soliton18>	phreaky: what else do you mean with dynamic key?
T 1567512003 18<phreaky18>	kurahaupo, I fetch it with curl so it has something like this { ns1_key1: value, ns1_key2: value, ns2_key1: value, ns2_key2: value }
T 1567512028 18<phreaky18>	first I filter all the keys by `ns1_` and then I want to get the values for all the `ns1_*` keys
T 1567512039 18<phreaky18>	so I have a loop
T 1567512066 18<phreaky18>	for key in $( echo ${object} | jq  'to_entries | .[] | select(.key|test("NS1_.")) | .key'  )
T 1567512080 18<phreaky18>	and I Want to have something like:
T 1567512130 18<phreaky18>	printf "${key}: $(echo ${object} | jq '.${key})'"
T 1567512147 18<phreaky18>	but it constantly bitches about syntax error
T 1567512336 18<wwilliam18>	will this work?
T 1567512338 18<wwilliam18>	for x in "$1"/CMOD????????/*Copy01_1_1; do "$2" PROD isfortest "$x" "$3"
T 1567512374 18<wwilliam18>	!work > wwilliam
T 1567512374 18<greybot18>	wwilliam: In this context, the word "work" is misleading. We're here looking for solutions, not hacks. Be specific about what you need, and try to let go of how you think it should be done.
T 1567512466 18<Soliton18>	# var=key1; jq -r --arg key "$var" '.[$key]' <<< '{ "key1":"value1", "key2":"value2" }'
T 1567512468 18<shbot18>	Soliton: value1
T 1567512503 18<wwilliam18>	;done
T 1567512564 18<Soliton18>	phreaky: show json and desired output. that's some terrible example code.
T 1567512754 18<phreaky18>	Soliton,  let me assimilate this :) . Much appreciated
T 1567512839 18<kurahaupo18>	wwilliam: if the second argument to your function or script is the name of a program to run, then sure, it'll work by running that program
T 1567512876 18<wwilliam18>	Yes "$2" is the location and name of a "program"
T 1567512890 18<wwilliam18>	Thank you kurahaupo
T 1567513008 18<Soliton18>	!faq 1 > phreaky: in case that for loop was not just a terrible example
T 1567513008 18<greybot18>	phreaky: in case that for loop was not just a terrible example: https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
T 1567513346 18<phreaky18>	ok it worked but in a different way
T 1567513352 18<phreaky18>	thank you allll
T 1567513358 18<phreaky18>	and you Soliton specifically
T 1567514040 18<kurahaupo18>	wwilliam: The clarification "location and name" is unnecessary. Most programs that take a "filename" from the user simply pass it through to the kernel unmodified, where it will always be interpreted as a path. So unless specified otherwise or required by context, the "name of a file" should be understood to mean any path that refers to the file, not just the last component of such a path, nor any putative "full path". Likewise, the "name of a
T 1567514077 18<wwilliam18>	ah cool thank you for the clarification kurahaupo
T 1567514097 18<geirha18>	your message cut off at:  Likewise, the "name of a
T 1567514099 18<Soliton18>	cut off at: the "name of a
T 1567514105 18<kurahaupo18>	Likewise, the "name of a command" can be any of the various names of an executable file, excluding those names consisting of only a single path component, or it may be a single path component naming an executable file within a directory that's included in $PATH.
T 1567514135 18<ansyeb18>	hi. what exactly does this block mean? https://bpaste.net/show/B74P
T 1567514152 18<Soliton18>	!local
T 1567514152 18<greybot18>	local [option] name[=value]. Same as using declare in a function. Define a variable as local to restrict to a function and the function's children. Good practice to prevent littering your global scope with temp vars. Less impact in an isolated script.
T 1567514203 18<geirha18>	ansyeb: it stores the first argument in local variable action, second in local variable name, and the remaining arguments it mashes into a string assigned to local variable args
T 1567514221 18<ansyeb18>	ok. thx
T 1567514225 18<kurahaupo18>	ansyeb: it's the start of a function definition, where it accepts 2 fixed positional parameters (action and name) and then an arbitrary number of parameters that will be joined together as "args". Unless you're writing for posix sh, args would usually be better defined as an array.
T 1567514244 18<kurahaupo18>	local args=("$@")
T 1567514270 18<geirha18>	since posix doesn't define local, we better hope it's not an sh script
T 1567514270 18<Soliton18>	the function keyword wouldn't be portable anyway.
T 1567514288 18<kurahaupo18>	ansyeb: also, use EITHER the "function" keyword, OR the "()", NOT BOTH
T 1567514290 18<geirha18>	ah yes, function AND () is a bashism
T 1567514304 18<kurahaupo18>	geirha: d'oh, good point
T 1567514321 18<wwilliam18>	!arrays > wwilliam
T 1567514321 18<greybot18>	wwilliam: An array maps numbers to strings. Bash 4 also has associative arrays (maps strings to strings). http://mywiki.wooledge.org/BashSheet#Arrays http://mywiki.wooledge.org/BashFAQ/005 http://wiki.bash-hackers.org/syntax/arrays
T 1567514342 18<geirha18>	wwilliam: please query the bot in private instead
T 1567514348 18<kurahaupo18>	wwilliam: you don't need ">myname" if you just want to read it yourself
T 1567514350 18<geirha18>	e.g. /query greybot !arrays
T 1567514363 18<wwilliam18>	ah thank you.
T 1567514385 18<oskie18>	is there anything equivalent to /dev/null but that blocks forever when read from - or like /dev/zero, but which doesn't produce any data when read?
T 1567514406 18<kurahaupo18>	oskie: a disconnected fifo will do that
T 1567514484 18<oskie18>	kurahaupo: hmm, true
T 1567514495 18<kurahaupo18>	oskie: yourcmd < <( sleep 1000000000000000000 ; echo The end of the world is nigh! )
T 1567514575 18<oskie18>	kurahaupo: interesting, that seems to have worked
T 1567514644 18<geirha18>	read -r query < /dev/comcast
T 1567514688 18<kurahaupo18>	oskie: actually, that sleep is about 6× too long for "the end of the world", when the sun will grow and engulf this planet
T 1567514701 18<oskie18>	:)
T 1567514733 18<kurahaupo18>	file a bug, and it will be fixed in a release sometime before then
T 1567514811 18<kurahaupo18>	(aka, the Sun Microsystems response to a Y10k bug report)
T 1567518664 18<ansyeb18>	hi. and what exactly is the meaning of: https://bpaste.net/show/GjOU ?
T 1567518777 18<geirha18>	it's an option parsing loop, parsing only a single option -a, which takes an argument
T 1567518786 18<geirha18>	!faq options
T 1567518787 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/035 -- How can I handle command-line options and arguments in my script easily?
T 1567519538 18<jamie_118>	hey, im having some real fun with some nested loops... im trying to make a function i can call in a loop and then call a loop inside of it to specify further.  how would i do something to the effect of creating the beginning of a call in the first loop like xpath "/Configuration/SpecifiedConfiguration[@name='$1']/" then in the nested loop do for x in "${furthdef[@]" do funcBase/Value[@name='$1']    and both
T 1567519544 18<jamie_118>	have an array
T 1567519557 18<knstn18>	you can iterate over a string in bash, using pe string length?
T 1567519613 18<jamie_118>	well i need the main loop to run 5 times with the nestedloop to run 4 times every loop
T 1567519623 18<jamie_118>	im trying to get a list of configs from an xml file
T 1567520588 18<Soliton18>	no idea what the question is. is there some issue with the nested loop?
T 1567520934 18<wwilliam18>	What is this mean again?
T 1567520936 18<wwilliam18>	for ((1; 1; 1)); do
T 1567520984 18<Soliton18>	!cfor
T 1567520984 18<greybot18>	C-style for loop: for (( expr; expr; expr )); do COMMANDS; done # Each expr is done in a math context. Example: for ((i=1; i<=n; i++)); do echo "$i"; done. Use in place of the non-working: for i in {1..$number}
T 1567521081 18<wwilliam18>	Thank you soliton and how can i do that bash syle?
T 1567521114 18<Soliton18>	that is bash. perhaps more readable as: while true; do ...
T 1567521116 18<han-solo18>	just that
T 1567521121 18<jamie_118>	okay so i did get a way that i think should work.... https://pastebin.com/raw/6GGMY33m
T 1567521129 18<wwilliam18>	Ok Thank you.
T 1567521212 18<jamie_118>	i have always had a bit of a challenge when it comes to wraping my head around nested loops
T 1567521396 18<rafasc18>	jamie_1: using descriptive variable names instead of x and y helps.
T 1567521435 18<jamie_118>	rafasc: yeah... im working on that one, that was more psudocode than anything else, have yet to test it
T 1567524404 18<wwilliam18>	I am getting this bash: line 14: syntax error: unexpected end of file
T 1567524425 18<greycat18>	somewhere in the first 14 lines of the script, which is probably the whole script, there is a syntax error.  a missing closing element.  find it.
T 1567524448 18<wwilliam18>	http://paste.debian.net/hidden/a2642aa0/
T 1567524448 18<greycat18>	could be a quote or fi or done or esac or a closing curly brace or anything
T 1567524452 18<greycat18>	!check
T 1567524454 18<checkbot18>	wwilliam: Line 1: dest is referenced but not assigned. Line 1: rnaxa is referenced but not assigned. Line 1: shdndr is referenced but not assigned. See https://shellcheck.net/?id=cb24454 for all 6 issues.
T 1567524499 18<wwilliam18>	the shellcheck dont show anything
T 1567524506 18<wwilliam18>	the whole thing here:
T 1567524510 18<greycat18>	Then read the script line by line until you find it.
T 1567524527 18<greycat18>	In some cases, an editor with syntax highlighting can help you find it.
T 1567524542 18<greycat18>	But if that doesn't work, don't waste TIME on it.  Just read the god damned words with your eyes.
T 1567524544 18<wwilliam18>	im using vim with colors
T 1567524574 18<Soliton18>	for x in *.sh ; do echo "$x" >> "$5"
T 1567524582 18<Soliton18>	missing ; done
T 1567524607 18<greycat18>	Is that the entire loop?  If so, you can replace it with a single printf command.
T 1567524619 18<Soliton18>	yeah, indeed.
T 1567524644 18<wwilliam18>	thans
T 1567524659 18<wwilliam18>	how greycat ?
T 1567524671 18<Soliton18>	printf %s\\n *.sh
T 1567524673 18<greycat18>	printf '%s\n' *.sh >> "$5"
T 1567524725 18<wwilliam18>	thank you I will change
T 1567524770 18<wwilliam18>	Ok changed running again.
T 1567524995 18<wwilliam18>	I found something odd in shellcheck it does not check the commands of the here file
T 1567525006 18<knstn18>	I started reading python. Can someone explain me, why understand it so easily, compared to bash?
T 1567525017 18<greycat18>	that's expecting a lot
T 1567525024 18<wwilliam18>	Oh OK.
T 1567525027 18<wwilliam18>	sorry.
T 1567525169 18<_1balck_jack18>	hi
T 1567525330 18<kerframil18>	wwilliam: you could write the routine as a function then convey it with declare -f or by way of an export, although the latter might be difficult in this case. either way, that would allow for shellcheck to scrutinise it.
T 1567525357 18<wwilliam18>	ughh
T 1567525368 18<wwilliam18>	Thanks anyway.
T 1567525369 18<kerframil18>	?
T 1567525377 18<wwilliam18>	i didnt understand.
T 1567525380 18<greycat18>	if this is related to a thing from a week or two ago, I believe the function or mini-script is being run via sudo, in which case there is a concern that sudo might strip the exported function from the environment
T 1567525382 18<kerframil18>	I see.
T 1567525403 18<wwilliam18>	Yes greycat this is the continuation of that
T 1567525670 18<kerframil18>	for instance: myfunc() { the code goes here instead; }; printf '%s\n' "$(declare -f myfunc)" 'myfunc "$@"' | sudo bash -s ...
T 1567525693 18<greycat18>	that's getting a little carried away, IMHO
T 1567525715 18<kerframil18>	<shrug>. it addresses his complaint.
T 1567525723 18<greycat18>	true
T 1567525779 18<greycat18>	Also, I wouldn't use a command substitution there; just { declare -f myfunc; echo 'myfunc "$@"'; } | sudo bash -s ...
T 1567525805 18<kerframil18>	ah, yes.
T 1567526008 18<_1balck_jack18>	hi
T 1567531242 20*	Disconnected (20)
T 1567531266 19*	Now talking on 22#bash
T 1567531266 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567531266 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567531266 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567531285 18<cha1818>	pretty sure you link me this page every time I come here
T 1567531300 18<cha1818>	I'll read it
T 1567531308 18<greycat18>	Stop writing for i in $(...) and we'll stop repeating our response to that.
T 1567531372 18<docmax18>	i have to work with while and "shift"
T 1567531387 18<docmax18>	https://superuser.com/questions/186272/check-if-any-of-the-parameters-to-a-bash-script-match-a-string
T 1567531391 18<greycat18>	because...?
T 1567531399 18<greycat18>	!homework
T 1567531399 18<greybot18>	"I have to count the lines in a file. But I'm not allowed to use wc. And I'm not allowed to use grep. And I have to type it in using a teletype. With no paper in it. In the dark. Left-handed."
T 1567531417 18<docmax18>	lol
T 1567531515 18<scx18>	Is this correct? https://pastebin.com/ku28JUBJ
T 1567531515 18<pasteban18>	Paste is available without ads on http://pastebin.com/raw/ku28JUBJ
T 1567531535 18<Soliton18>	!check
T 1567531535 18<checkbot18>	scx: Line 1: Use ./*glob* or -- *glob* so names with dashes won't become options. See https://shellcheck.net/?id=cb31535
T 1567531593 18<Soliton18>	perhaps * was meant to be .
T 1567531626 18<scx18>	ok, anything except that (find .)?
T 1567531631 18<koala_man18>	scx: looks good
T 1567531644 18<KodiakIT18>	So, maybe it's me being less than entirely all-there atm, but I can't seem to figure out exatly how to make the syntax of this basic bash parallelism in bash gel with what I need to do with sqlite: https://gist.github.com/KodiakIT/b2e5807e7b119098a371eb93ae8152ce (excuse the title/desc, I should be initalizing a full repo shortly)
T 1567531664 18<scx18>	koala_man: thanks
T 1567531785 18<koala_man18>	KodiakIT: what about it?
T 1567531928 18<KodiakIT[m]18>	Koala_man: well namely building the array/getting it to loop (and probably some checks whether the DB is locked before attempting initialize or populate, etc, etc)
T 1567531950 18<Soliton18>	!check
T 1567531950 18<checkbot18>	KodiakIT: Line 60: array is referenced but not assigned. Line 61: n is referenced but not assigned. Line 59: maxjobs appears unused. Verify use (or export if used externally). See https://shellcheck.net/?id=cb31950
T 1567531959 18<cha1818>	greycat: If I know what the output of the command is and it doesn't vary, I'm not understanding why the for loop is bad. the command feeding the loop is modified by `cut` and `grep` so there isn't going to be unexpected blank lines
T 1567531989 18<greycat18>	If you know what the output of the command is, and it does not vary, then you don't need to RUN the command.  Just hard-code the string(s) or the list you wish to use in the script.
T 1567532043 18<KodiakIT[m]18>	Soliton: I put it through shell check before coming here, I know the not-quite-pseudo-code for the parallelism isn't actually syntactically valid bash.
T 1567532078 18<Soliton18>	what is the syntax error?
T 1567532098 18<cha1818>	it occasionally varies but I know the outputs. "list vms", maybe there are 3, or 4 if I duplicated a vm recently, so it should be run
T 1567532098 18<koala_man18>	that part actually looks fine, except for it using the wrong variable name
T 1567532114 18<Soliton18>	if you left out the array assignment then no idea how you expect help with it.
T 1567532169 18<greycat18>	cha18: there's still no reason to do things *wrong*.  Just read the results into an array and iterate over the array, *or* read the results with a while read loop.
T 1567532225 18<greycat18>	mapfile -t vms < <(command that lists vms one per line); for i in "${vms[@]}"; do ...; done
T 1567532265 18<KodiakIT[m]18>	That's just it, at this point it's only being populated by `initialize_db` as a result of `find`, so what should I just take a segment of SQL say `SELECT (id, canonical_path) files (canonical_path, name) LIMIT 8` and iterate over that?
T 1567532286 18<greycat18>	whyinthehellareyouwritingthisinbash
T 1567532313 18<docmax18>	how can i check if there are no command-arguments?
T 1567532319 18<Soliton18>	!$#
T 1567532319 18<greybot18>	$# expands to the number of arguments, not counting $0.
T 1567532320 18<greycat18>	if (($# == 0))
T 1567532333 18<docmax18>	tjx
T 1567532334 18<docmax18>	thx
T 1567532344 18<iwkse18>	al2o3-cr: yes
T 1567532361 18<al2o3-cr18>	mind a PM?
T 1567532368 18<_1BLACK_JACK_18>	NICE
T 1567532375 18<iwkse18>	sure np
T 1567532379 18<al2o3-cr18>	ok
T 1567532399 22*	26ChanServ gives channel operator status to 18greycat
T 1567532404 18<KodiakIT[m]18>	Also when I tried to query the sqlitedb (even when it just ended with the `find -exec initialize_db_row`) as it was populating there were errors complaining that the DB was locked, which I assume, given that there's no error handling on the initialize function, means those weren't written to the DB?
T 1567532413 22*	26greycat sets quiet on 18*!~jack@2405:205:120c:bcbb:2c52:d5ad:26ab:b8af
T 1567532425 22*	26greycat removes channel operator status from 18greycat
T 1567532489 18<docmax18>	if [[ "$*" == *YOURSTRING* ]]  also nice
T 1567532500 18<greycat18>	Terrible.
T 1567532511 18<KodiakIT[m]18>	also, greycat: if that was directed at me: I'm trying to keep it as stripped down simple & portable as I can make it (while first having it y'know, working)
T 1567532517 18<greycat18>	But since you don't care what I say, I'll just stop saying anything to you.
T 1567532520 18<Soliton18>	!bobby > KodiakIT[m]
T 1567532520 18<greybot18>	KodiakIT[m]: https://xkcd.com/327/ # https://mywiki.wooledge.org/CodeInjection # https://mywiki.wooledge.org/BashWeaknesses # Don't write database code in bash. Use perl, python, etc.; any language with an appropriate database API.
T 1567532547 18<Soliton18>	!$* > docmax
T 1567532547 18<greybot18>	docmax: The difference between $@ and $*: "$@" (quoted) expands to each positional parameter as its own argument: "$1" "$2" ... while "$*" expands to the single argument "$1c$2c..." where c is the first character of IFS. You almost always want "$@". The same goes for arrays: "${array[@]}" or "${array[*]}". Unquoted $* and $@ are undefined; DO NOT use.
T 1567532557 18<docmax18>	greybot: sorry, just searching for the shortest possible... no much for else...
T 1567532562 18<docmax18>	if else
T 1567532586 18<Soliton18>	are you golfing?
T 1567532614 18<Soliton18>	do you care if the code is correct?
T 1567535145 20*	Disconnected (20)
T 1567535172 19*	Now talking on 22#bash
T 1567535172 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567535172 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567535172 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567535205 18<docmax18>	case --ram=4g) ... can i extract the "4g" to the case command?
T 1567535325 18<twkm18>	yes.
T 1567535337 18<docmax18>	twkm: can you tell me how?
T 1567535362 18<mknod18>	docmax, are you sure you want to hardcode this?
T 1567535412 18<docmax18>	no something like case ram=?) echo ?
T 1567535452 18<docmax18>	command --ram=4g
T 1567535496 18<docmax18>	then: case --ram=?) my command ?   (my command 4g)
T 1567535647 18<docmax18>	i think i got it
T 1567535673 18<docmax18>	case --ram=*) echo "${i#*=}"
T 1567535689 18<docmax18>	output: 4g
T 1567535714 18<docmax18>	right?
T 1567536061 18<kerframil18>	yes.
T 1567536129 18<kerframil18>	assuming you were iterating with $i and meant case $i in.
T 1567536154 18<mnrmnaugh18>	eschwartz r u triggered yet? https://0x0.st/zJs5.txt
T 1567536185 18<kerframil18>	# set -- --ram=4g; for i; do case $i in --ram=*) echo "${i#*=}" ;; esac; done
T 1567536186 18<shbot18>	kerframil: 4g
T 1567536228 18<mnrmnaugh18>	i can never friggin remember which side is which... #%#%
T 1567536272 18<greycat18>	on the US keyboard, # is to the left, % to the right
T 1567536313 18<eschwartz18>	mnrmnaugh: I saw your nick, so yes
T 1567536330 18<mnrmnaugh18>	HAH, touche
T 1567536632 18<eschwartz18>	I will however admit this is surprisingly inventive and yet superficially clean.
T 1567536697 18<docmax18>	help
T 1567536707 18<docmax18>	    case "$1" in    -r=*|--ram=*)       ram=(-m ${i#*=})
T 1567536726 18<docmax18>	does not give me what is given in "*"
T 1567536813 18<docmax18>	what my fault... never mind
T 1567536817 18<docmax18>	wait
T 1567538269 18<dendazen18>	just saw this code __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
T 1567538278 18<dendazen18>	is this really a good way to do it?
T 1567538282 18<greycat18>	!faq location
T 1567538284 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/028 -- How do I determine the location of my script?  I want to read some config files from the same place.
T 1567538457 18<oxalis18>	!dirname
T 1567538457 18<greybot18>	dirname(1) removes the filename part of a pathname (/a/b/c -> /a/b). A parameter expansion can do it cleaner and *much* faster: "${path%/*}". Beware the difference for arguments without /
T 1567538553 18<greycat18>	"What you're attempting to do is impossible and wrong-headed, and you should rethink your entire goal set, and oh by the way, you could have optimized it."
T 1567538606 18<dendazen18>	is that for me?
T 1567538617 18<greycat18>	*plonk*
T 1567538657 18<pj18>	dendazen: well it's code you ran across so I suppose it's just indirectly for you.
T 1567538686 18<greycat18>	If he ran over it, he didn't do a thorough enough job, because it's still there.
T 1567538687 18<dendazen18>	Oh, sorry, I didn't create it, just stumbled on it
T 1567538702 18<greycat18>	I suggest fire.
T 1567538709 18<dendazen18>	Someone's code
T 1567538726 18<dendazen18>	But it confused me, but I am no bash expert
T 1567538738 18<dendazen18>	So i thought i'd ask here.
T 1567538740 18<pj18>	dendazen: but to answer your original question, there really isn't a good way to do that, but that's one of the more creative ways I've seen.
T 1567538832 18<pj18>	there are various ways to break it, though, just one being: bash < /path/to/scriptname
T 1567538834 18<greycat18>	It has been my experience over the years that FAQ 28 deniers are never worth a second attempt to educate.  They are beyond my reach.
T 1567538886 18<learning_2_learn18>	greycat: How many years of experience you have in bash, just asking out of curiosity.
T 1567538886 18<dendazen18>	I am not a denier of that FAQ.
T 1567538907 18<dendazen18>	I mean that was the first line of that bash
T 1567538916 18<greycat18>	Well, the first time I ever used it was probably in ... 1991 or 1992, ish?  I was extremely ignorant at the time, of course.
T 1567538918 18<dendazen18>	the second one was even worse imo
T 1567538921 18<dendazen18>	__root="${__dir}/../../../.."
T 1567538932 18<greycat18>	The first time I ever really *did* anything with it would be 1993.
T 1567538939 18<eschwartz18>	_dir=$(readlink -f "${BASH_SOURCE[0]}"); _dir=${dir%/*} # generally more efficient at least
T 1567539002 18<learning_2_learn18>	greycat: Cool.'
T 1567539005 18<pj18>	efficiency is the least of the problems, unless you're competing for the most efficient way to have a broken script.
T 1567539126 18<eschwartz18>	Well, step 2 is "anyone who uses bash < ./thescript gets a kick in the butt and told they are unsupported in the strongest possible terms", but I acknowledge that solution isn't for everyone :)
T 1567539146 18<linux_dream18>	how would I block all websites containing "game" in their name?  I mean I know how to edit the hosts file, but in bash, what would be the command to check whether a website contains "game" in its name?
T 1567539157 18<greycat18>	!os > linux_dream
T 1567539157 18<greybot18>	linux_dream: Take it to your OS channel. Your issue is specific to your Operating System or Distribution.
T 1567539173 18<linux_dream18>	thanks greybot
T 1567539195 18<eschwartz18>	linux_dream: are you genuinely suggesting your OS executes a bash script to determine whether a website is permitted?
T 1567539199 18<pj18>	the entire concept is wrong to begin with, there are many ways to run a bash script that leave bash completely unaware of the actual location of the script being run, and other ways where the result may vary from one version of bash to another.  Trying to make that crap more efficient is very much like trying to shine a turd (and yes, I'm aware that myth busters proved you can shine a turd but it's still probably not a good idea to try).
T 1567539208 18<kurahaupo18>	linux_dream: if $site_name has the website name, use [[ $site_name = *game* ]]
T 1567539227 18<greycat18>	kurahaupo: why are you so cruel
T 1567539269 18*	kurahaupo gets out a crewel needle
T 1567539275 18<linux_dream18>	i guess im not wanting that, after all
T 1567539301 18<linux_dream18>	if i use game*   then anything that starts with game will be blocked I guess
T 1567539316 18<linux_dream18>	but that's only if the website starts that way, not if it contains it
T 1567539321 18<greycat18>	linux_dream: a serious answer would be something like "set up a transparent http proxy, force traffic through it, and configure it with appropriate regex-based rules", absolutely none of which has the slightest relationship to bash
T 1567539331 18<kurahaupo18>	linux_dream: pretty much yes
T 1567539342 18<linux_dream18>	oh man really.  damn it that's crazy
T 1567539348 18<greycat18>	also why do you hate ligaments and ligament research
T 1567539353 18<pj18>	linux_dream: that's like asking how to make your toaster drive your son to work.
T 1567539356 18<Akuw_18>	how can i convert Hexadecimal to Decimal ?
T 1567539372 18<koala_man18>	# echo $((0x42))
T 1567539373 18<shbot18>	koala_man: 66
T 1567539373 18<greycat18>	Akuw_: please show sample input and tell us where you're getting it from
T 1567539375 18<linux_dream18>	in what way pj ?
T 1567539392 18<pj18>	linux_dream: think about it, think about it really hard.
T 1567539406 18<Akuw_18>	00000000000000342BDD  that is a date
T 1567539411 18<pj18>	...but not too hard, I'd hate for you to break something.
T 1567539415 18<Akuw_18>	soory
T 1567539416 18<greycat18>	O_o
T 1567539429 18<greycat18>	that is a lot of digits
T 1567539431 18<kurahaupo18>	# echo $((0x00000000000000342BDD))
T 1567539432 18<shbot18>	kurahaupo: 3419101
T 1567539441 18<kurahaupo18>	funny looking date
T 1567539442 18<Akuw_18>	5D291F0000000146
T 1567539459 18<greycat18>	Is this a puzzle?
T 1567539460 18<pj18>	looks like a bra size being stuttered to me.
T 1567539472 18<kurahaupo18>	Akuw_: are you sure you're not mangling the endianess?
T 1567539473 18<linux_dream18>	i dont have your experience pj what i see is that i ask for something apparently very hard, near impossible, same as a toaster would drive my son to work
T 1567539485 18<linux_dream18>	is that it? or did i miss the point
T 1567539493 18<kurahaupo18>	# echo $((0x5D291F0000000146))
T 1567539494 18<shbot18>	kurahaupo: 6712930804432896326
T 1567539514 18<kurahaupo18>	that doesn't look plausible at all
T 1567539522 18<greycat18>	Akuw_: what are you trying to do?
T 1567539533 18<Akuw_18>	that is a log file
T 1567539542 18<greycat18>	No it's not.
T 1567539545 18<Akuw_18>	many recors
T 1567539563 18<Akuw_18>	sorry its a trasaction file
T 1567539571 18<eschwartz18>	It might have come from a log file, but it sure as heck isn't the logfile itself.
T 1567539583 18<greycat18>	I don't know what that means, but it sure doesn't look like "a transaction file" to my novice eyes.
T 1567539614 18<greycat18>	It looks like a tiny piece of some vast puzzle and you will not give enough information to understand it.
T 1567539638 18<learning_2_learn18>	Akuw_: let's assume it's log file what you're trying to do?
T 1567539641 18<Akuw_18>	4th fields separated by ; its time in seoconds UTC 01/01/1970 00:00:00 4 bytes for seconds
T 1567539647 18<eschwartz18>	Obviously it is our fault for not understanding it, because we aren't cool enough to have a decoder ring
T 1567539648 18<greycat18>	It isn't.
T 1567539660 18<greycat18>	It is not the time in seconds since the epoch.
T 1567539661 18<Akuw_18>	i have to tell if there is a salt more than one hour
T 1567539665 18<greycat18>	# date +%s
T 1567539666 18<shbot18>	greycat: 1567539665
T 1567539678 18<greycat18>	That is the time in seconds since the epoch, in base 10.  Your two sample values are nowhere NEAR hat.
T 1567539698 18<kurahaupo18>	Akuw_: if it's 4 bytes then it should be exactly 8 hexadecimal digits
T 1567539699 18<greycat18>	Nor are they anywhere near EACH OTHER.
T 1567539750 18<greycat18>	it's like you found two random hexadecimal numbers on the internet, from different pages, and just pasted one of each into the channel without context
T 1567539764 18<kurahaupo18>	# printf -v x '%(%s)T' ; printf '%#x\n' $x
T 1567539765 18<shbot18>	kurahaupo: 0x5d6ec234
T 1567539804 18<greycat18>	kurahaupo: hmm.... you think maybe the first 8 chars of the second one might be a timestamp?
T 1567539830 18<kurahaupo18>	maybe...
T 1567539882 18<kurahaupo18>	# printf '%(%F,%T,%z)T\n' $((0x5D291F00))
T 1567539883 18<shbot18>	kurahaupo: 2019-07-13,00:00:00,+0000
T 1567539910 18<kurahaupo18>	Akuw_: does the middle of last month sound about the right ballpark?
T 1567539948 18<Akuw_18>	kurahaupo: what?
T 1567539983 18<greycat18>	He's a native Spanish speaker, I think.  "the right ballpark" might be too idiomatic.
T 1567539986 18<kurahaupo18>	Akuw_: the first eight digits of the second number you quoted correspond to 13 Aug 2019
T 1567539996 18<greycat18>	Jul not Aug
T 1567540007 18<kurahaupo18>	oh yeah
T 1567540028 18<kurahaupo18>	The date shown by shbot above ↑
T 1567540032 18<Akuw_18>	i dont know another person created that
T 1567540044 18<learning_2_learn18>	lol Akuw_
T 1567540046 18<Akuw_18>	Long= 8 bytes
T 1567540047 18<greycat18>	You don't know what your input IS?
T 1567540068 18<Akuw_18>	i just have a document that explain field 4
T 1567540076 18<learning_2_learn18>	Did other person left you his address or phone number to contact and ask?
T 1567540083 18<greycat18>	they just dropped a random file's content on you, without even giving you its NAME, and said "here, ask random questions about this on the internet"?
T 1567540099 18<bashtux18>	lol
T 1567540132 18<Akuw_18>	documentation says Time_PC
T 1567540134 18<kurahaupo18>	Akuw_: you're the one who said timestamps are 4 bytes, which translates to 8 hexadecimal digits. 16 hexadecimal digits is way too many
T 1567540153 18<greycat18>	Akuw_: WHAT documentation?
T 1567540165 18<pj18>	# d=5D291F00; printf '%(%F,%T,%z)T\n' "$((16#$d))"
T 1567540166 18<shbot18>	pj: 2019-07-13,00:00:00,+0000
T 1567540172 18<pj18>	another way ^^^^
T 1567540183 18<kurahaupo18>	Akuw_: given that the number comes out exactly on midnight, If would count that as "convincing"
T 1567540189 18<Akuw_18>	Time in seconds from 01/01/1970 00:00:00 UTC 4 bytes for seconds from 01/01/1970
T 1567540205 18<greycat18>	Akuw_: what is the NAME of the documentation you are READING?  Where did it COME FROM?
T 1567540222 18<Akuw_18>	is a custom file
T 1567540222 18<greycat18>	Akuw_: what is the NAME of the FILE you are reading?  Where did it COME FROM?  What are you trying to DO with it?
T 1567540241 18<kurahaupo18>	Akuw_: seconds since 1/1/1970 00:00 UTC is the standard Unix timestamp format, fairly well known
T 1567540244 18<Akuw_18>	i need to see if there is a salt more tnat one hour
T 1567540265 18<kurahaupo18>	Akuw_: "salt" does not make sense in English
T 1567540272 18<Akuw_18>	for example if time is 09:00 and next line is 10:00 then many transactions not happen
T 1567540274 18<learning_2_learn18>	Akuw_: what is salt?
T 1567540277 18<Akuw_18>	wait
T 1567540307 18<Akuw_18>	jump
T 1567540317 18<Akuw_18>	leap
T 1567540350 18<learning_2_learn18>	can you please past few lines from the file where so we don't guess what's in there.
T 1567540351 18<Akuw_18>	so first thing is convert time
T 1567540356 18<greycat18>	well, the first number you gave us was meaningless to us, and the second number APPEARS not to contain the hour, minute or second -- only the day, month and year.  Unless it's hidden somewhere after the first 8 characters.
T 1567540357 18<Akuw_18>	ok
T 1567540374 18<kurahaupo18>	Akuw_: leap year, leap second, or change-of-daylight-saving?
T 1567540409 18<Akuw_18>	i mean, if you have 01:00, 01:03, 01:07 tehn 03:02
T 1567540417 18<greycat18>	But you DO NOT HAVE those.
T 1567540424 18<greycat18>	Now show us what you DO have.
T 1567540429 18<kurahaupo18>	Akuw_: you quoted 5D291F0000000146 which I suggest is 5D291F00 timestamp and 00000146 unique sequence ID
T 1567540451 18<kurahaupo18>	# echo $((16#146))
T 1567540452 18<shbot18>	kurahaupo: 326
T 1567540510 18<kurahaupo18>	Akuw_: does 326 log entries seem a plausible number?
T 1567540533 18<fafab_4518>	hi
T 1567540536 18<greycat18>	do you actually think he understands that question?
T 1567540571 18<Akuw_18>	https://paste.debian.net/1098623/
T 1567540573 18<learning_2_learn18>	greycat: are you sys admin or programmer?
T 1567540588 18<Akuw_18>	check paste
T 1567540594 18<greycat18>	you only showed us one line?
T 1567540615 18<learning_2_learn18>	Akuw_: why only one line?
T 1567540632 18<fafab_4518>	I have a problem with my terminal. I suspect that it is linked to my bash profiles/configuration but I'm not sure. Is there anyone you can help me to try to understand the origin of my problem (lagging of my terminal for about 10 sec when Terminal is started for the first time)?
T 1567540640 18<greycat18>	I'd really like to see what comes after 00059, whether it's 00060 or 0005A
T 1567540661 18<Akuw_18>	https://paste.debian.net/1098624/
T 1567540671 18<kurahaupo18>	Akuw_: are you planning to reverse engineer the entire format, or just enough to report the timestamps?
T 1567540687 18<Akuw_18>	only 4th field
T 1567540691 18<rafasc18>	fafab_45: have you tried using bash with --noprofile --norc?
T 1567540700 18<greycat18>	00059 to 00239... so it's not a simple sequence number
T 1567540710 18<koala_man18>	fafab_45: is it slow if you just run 'bash' or 'bash --login'?
T 1567540730 18<kurahaupo18>	Akuw_: approximately how many lines are there in a whole day's log?
T 1567540740 18<learning_2_learn18>	rafasc: what happens when you do su - $USER does it still take 10 second?
T 1567540777 18<Akuw_18>	i will paste 4th row that i get using awk
T 1567540783 18<rafasc18>	learning_2_learn: what you said was was probably directed to fafab_45
T 1567540784 18<greycat18>	*sigh*
T 1567540801 18<Akuw_18>	https://paste.debian.net/1098626/
T 1567540810 18<kurahaupo18>	Akuw_: because if the answer is "millions", I would suspect that the second 4 bytes are microseconds or nanoseconds
T 1567540815 18<learning_2_learn18>	rafasc: yes
T 1567540817 18<pj18>	Akuw_: it might be helpful to know exactly what time those entries are appearing in the logs.
T 1567540865 18<kurahaupo18>	actually now I suspect milliseconds
T 1567540876 18<Akuw_18>	59.349
T 1567540883 18<fafab_4518>	thanks for your answers. rafasc, I have to write it in the gnome terminal preferences,
T 1567540884 18<fafab_4518>	?
T 1567540894 18<Akuw_18>	number of lines
T 1567540911 18<kurahaupo18>	echo hh:mm.ss.$((0x3c9))
T 1567540918 18<greycat18>	60k entries per day, so very roughly 1 per second
T 1567540918 18<kurahaupo18>	# echo hh:mm.ss.$((0x3c9))
T 1567540919 18<shbot18>	kurahaupo: hh:mm.ss.969
T 1567540953 18<greycat18>	it's *possible* that the timestamp is 8 chars for day, 8 chars for milliseconds since midnight, but you'd need to gather a LOT more data to prove it
T 1567540956 18<kurahaupo18>	so millisecond resolution is probably adequate to disambiguate entries
T 1567540985 18<Akuw_18>	humm i got
T 1567541008 18<kurahaupo18>	The second uint32 is rolling over every second and not getting higher that 999
T 1567541029 18<kurahaupo18>	at least, in those 30 lines
T 1567541037 18<pj18>	it's not ms
T 1567541059 18<kurahaupo18>	pj: what do reckon it is?
T 1567541061 18<pj18>	I can see two sequential entries where the first four bytes are the same and the last bytes go backwards.
T 1567541068 18<pj18>	so it would not make sense.
T 1567541087 18<greycat18>	there are entries from multiple days here
T 1567541092 18<Akuw_18>	more lines
T 1567541093 18<Akuw_18>	https://paste.debian.net/1098629/
T 1567541097 18<fafab_4518>	I come back
T 1567541100 18<greycat18>	oh god, a FOURTH one now
T 1567541112 18<pj18>	look at these two sequential entries...
T 1567541114 18<kurahaupo18>	pj: lines 5&6 ?
T 1567541115 18<pj18>	5D2A705D0000036C
T 1567541116 18<pj18>	5D2A705D000002C8
T 1567541124 18<pj18>	kurahaupo: yes
T 1567541146 18<pj18>	if the last bytes are ms it would stand to reason that those entries would not be in that order.
T 1567541164 18<kurahaupo18>	pj: that could just be down to parallel writing to a log with jitter
T 1567541173 18<pj18>	possibly
T 1567541194 18<pj18>	but I think the most reasonable thing to say is that the first four bytes are likely unixtime and just leave it at that.
T 1567541209 18<greycat18>	It could be a sequence number within each calendar day, and for whatever reason, *this* file only shows a small fraction of the sequence.
T 1567541232 18<kurahaupo18>	# echo $((0x3de))
T 1567541234 18<shbot18>	kurahaupo: 990
T 1567541236 18<greycat18>	Akuw_: So far there is NO evidence that the Hour, Minute or Second are present in this file.  Only the date.
T 1567541252 18<Akuw_18>	from this  5D29BA69000001DC  --> 5D29BA69 is date time
T 1567541258 18<greycat18>	It is the date only.
T 1567541261 18<Akuw_18>	in epoc
T 1567541280 18<Akuw_18>	then i have to convert epoc to Human readable
T 1567541281 18<fafab_4518>	Finally, I rename bashrc and start again. The problem is solved. Thanks
T 1567541291 18<greycat18>	# printf '%(%Y-%m-%d %H:%M:%S)T' $((16#5D29BA69))
T 1567541292 18<shbot18>	greycat: 2019-07-13 11:03:05
T 1567541295 18<greycat18>	Hmm.
T 1567541309 18<Akuw_18>	i converted here  https://www.epochconverter.com
T 1567541312 18<pj18>	# printf '%(%F,%T,%z)T\n' "$((16#)5D2A705D)"
T 1567541313 18<shbot18>	pj: bash: command substitution: line 1: syntax error near unexpected token `5D2A705D'
T 1567541313 18<shbot18>	pj: bash: command substitution: line 1: `(16#)5D2A705D'
T 1567541313 18<shbot18>	pj: 1970-01-01,00:00:00,+0000
T 1567541314 18<Akuw_18>	and got coincidence
T 1567541315 18<greycat18>	Well, that's very different from the SECOND example you gave us.
T 1567541323 18<pj18>	bleh
T 1567541330 18<pj18>	# printf '%(%F,%T,%z)T\n' "$(16#5D2A705D)"
T 1567541331 18<shbot18>	pj: bash: 16#5D2A705D: command not found
T 1567541331 18<shbot18>	pj: 1970-01-01,00:00:00,+0000
T 1567541334 18<Akuw_18>	i paste many lines
T 1567541339 18<kurahaupo18>	# printf '%(%F %T)T.%03u\n' $((0x5D2A6DA3)) $((0x00000313))
T 1567541341 18<shbot18>	kurahaupo: 2019-07-13 23:47:47.787
T 1567541343 18<pj18>	# printf '%(%F,%T,%z)T\n' "$((16#5D2A705D))"
T 1567541344 18<shbot18>	pj: 2019-07-13,23:59:25,+0000
T 1567541367 18<Akuw_18>	hummm
T 1567541370 18<Akuw_18>	let me check
T 1567541375 18<greycat18>	OK, maybe the hour/minute/second *are* in there after all, and your example #2 was just a weird outlier.
T 1567541396 18<pj18>	greycat: I would say so
T 1567541403 18<kurahaupo18>	Akuw_: if it does turn out to be seconds & milliseconds, you owe me a beer
T 1567541407 18<pj18>	he just happened to give an example that was actually at midnight for that one.
T 1567541452 18<kurahaupo18>	I suspect the log rolls over at midnight, so the first few entries will magically always be just after midnight
T 1567541463 18<pj18>	kurahaupo: that makes sense.
T 1567541487 18<pj18>	I just wouldn't go as far as to say what the final four bytes are without further evidence.
T 1567541498 18<greycat18>	I think we can ignore the last 4 bytes for this question.
T 1567541518 18<ncuxo18>	Hello everyone
T 1567541521 18<kurahaupo18>	Akuw_: how many processes are writing to the log concurrently?
T 1567541540 18<Akuw_18>	humm, dont have that information
T 1567541559 18<Akuw_18>	many things i have discovered have to discover by my self
T 1567541562 18<ncuxo18>	why when I enter :
T 1567541562 18<ncuxo18>	if [ -f ~/.bash_aliases ]; then
T 1567541562 18<ncuxo18>	    . ~/.bash_aliases
T 1567541562 18<ncuxo18>	fi
T 1567541562 18<ncuxo18>	I get that the file .bash_aliases does not exist?
T 1567541565 18<kurahaupo18>	it might not be milliseconds, but it does seem to be a number between 0 & 999
T 1567541588 18<pj18>	kurahaupo: your jitter theory does sound plausible, but I wouldn't want to say for sure what that is.
T 1567541603 18<greycat18>	Akuw_: take field 4, then take only the first 8 characters of it.  Use simple arithmetic expansion to convert it to base 10.  Subtract the previous value from the current value.  If the difference is over 3600 seconds, say something.  prev=$current, loop.
T 1567541604 18<learning_2_learn18>	ncuxo: do ls ~/.bash_aliases
T 1567541630 18<Akuw_18>	greycat: ok
T 1567541634 18<learning_2_learn18>	if there is a file it will tell you, else you will need to create a file.
T 1567541634 18<Akuw_18>	let me start
T 1567541649 18<ncuxo18>	learning_2_learn:  the file is there ls finds it
T 1567541667 18<geirha18>	what's the exact error message?
T 1567541672 18<kurahaupo18>	ncuxo: can you paste the exact error message?
T 1567541679 18<greycat18>	ncuxo: in that case, look for unprintable garbage characters in the file
T 1567541681 18<bashtux18>	ncuxo: possibly permissions ?
T 1567541693 18<kurahaupo18>	damnit geirha typing so fast!!!
T 1567541695 18<pj18>	ncuxo: use a pastebin, show exactly what you're typing and the resulting error
T 1567541700 18<greycat18>	Not in .bash_aliases ... in whatever file you pasted commands from.
T 1567541725 18<ncuxo18>	I've edit the bashrc file so I can enter my aliases on a separate file
T 1567541894 18<learning_2_learn18>	ncuxo: if you can show us what error you're getting we will be able to help else we will be guessing.
T 1567541923 18<ncuxo18>	https://pastebin.com/SN7hTdMQ
T 1567541924 18<pasteban18>	Paste is available without ads on http://pastebin.com/raw/SN7hTdMQ
T 1567541956 18<greycat18>	the leading . in ./home/local/.bash_aliases is most curious
T 1567541969 18<geirha18>	yeah, the error message suggests you wrote .~/.bash_aliases instead
T 1567541999 18<greycat18>	or ~/.^H.bash_aliases
T 1567542000 18<geirha18>	ah no, tilde won't expand there
T 1567542019 18<greycat18>	or... no, that's not quite it either
T 1567542020 18<Akuw_18>	i am using cat _201907013.tr | awk -F";" '{ printf '%(%F,%T,%z)T\n "$((16#$4))"'}'
T 1567542024 18<Akuw_18>	but got an error
T 1567542035 18<greycat18>	ncuxo: I'm back at "look for unprintable garbage or control characters in your .bashrc file"
T 1567542048 18<geirha18>	ncuxo: see how those lines look with   sed -n l ~/.bashrc
T 1567542052 18<greycat18>	Akuw_: the printf commands we were using are in BASH not in awk
T 1567542067 18<Akuw_18>	hummmm
T 1567542074 18<greycat18>	Akuw_: but you do NOT need to convert the timestamps to human-readable time.  Only convert them to base 10 so you can perform a subtraction.
T 1567542106 18<greycat18>	and you didn't extract the first 8 characters, either.  you need to do that.
T 1567542110 18<Akuw_18>	to convert to base 10 what i have to use?
T 1567542125 18<greycat18>	# echo $((16#5D2A705F))
T 1567542126 18<shbot18>	greycat: 1563062367
T 1567542138 18<greycat18>	# echo $((16#5D2A7070))
T 1567542139 18<shbot18>	greycat: 1563062384
T 1567542148 18<greycat18>	That's in bash, not in awk.
T 1567542155 18<greycat18>	If you want to do it in awk, ask #awk.
T 1567542343 18<Akuw_18>	but i need to conevrt that epoc to human ?
T 1567542396 18<djph18>	Akuw_: so use date
T 1567542426 18<greycat18>	Akuw_: *do* you?  I thought you only cared about whether there was a 3600 second difference between two lines.
T 1567542483 18<Akuw_18>	then if 1562976000 less another value  1562976003 for example
T 1567542488 18<Akuw_18>	?
T 1567542496 18<greycat18>	You tell us.  What are you trying to do?
T 1567542559 18<djph18>	!b9 > greycay
T 1567542559 18<greybot18>	greycay: All examples given by the questioner will be broken, misleading, wrong, incomplete, and/or not representative of the actual question.
T 1567542566 18<djph18>	...
T 1567542576 18<djph18>	^greycat, even
T 1567542580 18<djph18>	:(
T 1567542788 18<kurahaupo18>	djph: printf can do dates+times
T 1567542832 18<Akuw_18>	greycat: let me understand, i have 2 decimals a got -->  1563062397 and 1563062391, if i substract i got 6
T 1567542840 18<Akuw_18>	that means 6 what?
T 1567542846 18<Akuw_18>	seconds?
T 1567542852 18<greycat18>	yes
T 1567542856 18<Akuw_18>	hummmm
T 1567542998 18<djph18>	kurahaupo: oh? neat.
T 1567543228 18<kurahaupo18>	# printf 'djph %(%F %T)T.%03u\n' $((0x5D2A6DA3)) $((0x00000313))
T 1567543229 18<shbot18>	kurahaupo: djph 2019-07-13 23:47:47.787
T 1567543251 18<djph18>	fun times
T 1567543259 18<greycat18>	the .787 part is still speculation
T 1567543758 18<Akuw_18>	i am using  sed -n '20p;41q' _RP01p1201907013.tra | awk -F";" '{ line=$4}{print line}'
T 1567543807 18<Akuw_18>	but i want to use the value i got with awk to use $((16#5D2A707D))
T 1567543825 18<greycat18>	You need to pick one.  Awk or bash.
T 1567543859 18<greycat18>	Looks like we might have got a datestamp in the filename, finally.
T 1567543877 18<greycat18>	1201907013 might be 20190701 with two extra digits fore and aft
T 1567543879 18<Akuw_18>	sed -n '20p;41q' _201907013.tr | var=$(awk -F";" '{ linea=$4}')
T 1567543884 18<Akuw_18>	but doesnt work
T 1567543899 18<greycat18>	PICK one.  Awk or bash.
T 1567543906 18<Akuw_18>	ok
T 1567576502 20*	Disconnected (20)
T 1567576527 19*	Now talking on 22#bash
T 1567576527 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567576527 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567576527 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567576531 18<han-solo18>	bqq: if you use it frequent enough, you won't have to memorize nomore :)
T 1567576543 18*	kurahaupo is saddened that some people think "learning key sequences is too hard" and give up; they're cursing themselves to life in the slow lane using a mouse
T 1567576632 18<kurahaupo18>	annadane: The "suffix" is not a thing separate from the filename; it is *part of* the filename. When you think that way, it's completely obvious that you want filenames ending in "foo.png"
T 1567576713 18<bqq18>	no, you have to constantly switch from how to type in the correct key sequences and the real task you need to be done at the time.
T 1567576763 18<kurahaupo18>	bqq: not really; the fingers do the typing, the brain just sees what task is being worked on
T 1567576771 18<annadane18>	kurahaupo, yeah, i know. i just can't read or use my brain apparently
T 1567576796 18<kurahaupo18>	it's only seems like you have to keep switching for a relatively short time - a few months at most
T 1567576829 18<kurahaupo18>	Unless you're going to die next year, those few months will be a worthwhile investment
T 1567576853 18<kurahaupo18>	if you've only tried for a week before giving up, that's where the problem is
T 1567576945 18<bqq18>	generally it constantly interruptted my thought flow..unless you spent considerable time getting used to it subconsciously
T 1567576954 18<kurahaupo18>	annadane: it's a trap that lurks in the backs of minds that have been contaminated young by a certain operating system from Redmond WA.
T 1567577006 18<annadane18>	yeah, but the main issue here is i can't read and bash quite correctly won't copy anything if it doesn't end in foo but instead foo.png
T 1567577021 18<kurahaupo18>	bqq: "considerable" being a few hundred hours practice. In the context of spending tens of thousands of hours over a lifetime, that's obviously worthwhile. And it's cumulative; you get faster at learning keyboard shortcuts for other tools too
T 1567577158 18<kurahaupo18>	I was fortunate that the operating system I was first exposed to used "/" to separate the "filename" from the "suffix", so I was obligated to completely unlearn that. People who learn that "." separates a suffix, have more trouble later; they never completely unlearn it, just suppress it, and it comes up as "can't read properly"
T 1567577239 18<bqq18>	why suddenly my terminal freezes
T 1567577407 18<wedgie18>	bqq: did you press ctrl+s ?  if so press ctrl+q to unfreeze it.
T 1567577549 18<bqq18>	yes i was  trying to search..:)
T 1567577664 18<gbellinoz18>	bqq: searching and copying from scrollback history in gnu screen is really easy, and just a few keys. i use it constantly.
T 1567577664 18<gbellinoz18>	if you have trouble remembering keys and commands, make yourself a cheat sheet and keep it next to your monitor until you don't need it any more.
T 1567577664 18<gbellinoz18>	there's a reason all of us like commands and keystrokes - after the initial investment, it ends up being a lot more efficient than point-and-click.
T 1567584933 20*	Disconnected (20)
T 1567584956 19*	Now talking on 22#bash
T 1567584956 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567584956 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567584956 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567584989 18<Ingvix_18>	Hey, I tried to remove a prefix from a string and then leave only the first character from the leftover string. I tried like so: 'result=${input#*$prefix::1}' but they don't seem to work together at least like that. Can this be done in one brackets or need I do them separately?
T 1567585165 18<go|dfish18>	Ingvix_: separately
T 1567585190 18<Ingvix_18>	Alright, thanks
T 1567585585 18<izabera18>	./lib/sh/libsh.a(tmpfile.o): In function `sh_mktmpname':
T 1567585587 18<izabera18>	/home/izabera/bash-5.0-rc1/lib/sh/tmpfile.c:152: warning: warning: mktemp() possibly used unsafely, use mkstemp() or mkdtemp()
T 1567585594 18<izabera18>	just got this while compiling on a bsd
T 1567585607 18<izabera18>	like i know it's nabq
T 1567585615 18<izabera18>	but i thought this was something that glibc printed?
T 1567591556 18<_1black_jack_18>	hello
T 1567592060 18<benne18>	hi im trying to search for filetypes thats are stpoored in an array using a for loop but somethings wrong the script ionly searches for the first elemenrt plz h elp
T 1567592090 18<han-solo18>	benne: please paste the code in a sane pastebin
T 1567592098 18<han-solo18>	someone might help
T 1567592133 18<benne18>	https://pastebin.com/xXLRB9s7
T 1567592133 18<pasteban18>	Paste is available without ads on http://pastebin.com/raw/xXLRB9s7
T 1567592170 18<benne18>	imcondfues bout arrays in bash doint feel like they work same way in other langiuages
T 1567592216 18<Soliton18>	!doesntwork
T 1567592216 18<greybot18>	Saying something "doesn't work" helps neither you or us. Explain the result you *want* or *expect*, what you are *doing* and *how* it is failing. Copy/paste the commands you use and the errors they produce. Consider set -x to get more information on what is happening.
T 1567592229 18<osse18>	benne: that for loop doesn't iterate over the array
T 1567592243 18<osse18>	benne: i think what's confusing you is how "for" works, not arrays
T 1567592324 18<han-solo18>	benne: # arr=(mp4 mp3 m4v); for ext in "${array[@]}"; do printf '%s ' "$ext"; done
T 1567592336 18<Soliton18>	if you want to go through all extensions you need another outer loop.
T 1567592350 18<Soliton18>	!$[
T 1567592351 18<greybot18>	$[...] is an obsolete, deprecated syntax for math. Don't use it. Use $((...)) instead.
T 1567592413 18<han-solo18>	benne: you need *two* for loops, and that will be all
T 1567592797 18<han-solo18>	benne: http://ix.io/1Ueo # should work, i guess
T 1567592845 18<ksk18>	Do you have the "smart questions" factoid handy? (its not "*/~sgtatham/bugs.html")
T 1567592900 18<ksk18>	got it, thanks.
T 1567593278 18<Soliton18>	http://www.catb.org/~esr/faqs/smart-questions.html
T 1567594959 18<kurahaupo18>	# echo han-solo: like this...;  touch foo.mp3 foo.wav foo.ogg bar.wav ; for e in mp3 wav ogg ; do printf '%s\n' *."$e" ; done
T 1567594963 18<shbot18>	kurahaupo: han-solo: like this...
T 1567594963 18<shbot18>	kurahaupo: foo.mp3
T 1567594963 18<shbot18>	kurahaupo: etc... ( http://ix.io/1Uex )
T 1567595077 18<han-solo18>	kurahaupo: ?
T 1567595088 18<kurahaupo18>	han-solo: only one loop needed
T 1567595105 18<kurahaupo18>	(because of the way that printf handles extra args)
T 1567595119 18<han-solo18>	kurahaupo: ah, i see. :)
T 1567595132 18<han-solo18>	didn't think about that. Nice
T 1567595151 18<ychaouche18>	Hello #bash
T 1567595175 18<kurahaupo18>	ychaouche: Greetings, welcome to #bash. Ask your question
T 1567595256 18<ychaouche18>	I would like to paste a number of lines into a while or for loop to process, how can I do that ?
T 1567595263 18<ychaouche18>	with <<EOF maybe ?
T 1567595303 18<han-solo18>	sure
T 1567595319 18<ychaouche18>	https://gist.githubusercontent.com/ychaouche/1bb068cc2c40a2a16bc5eb63cf8f1fd2/raw/4646491f0ce799e0b20d6d0506a6b75bab132c3c/gistfile1.txt
T 1567595359 18<ychaouche18>	han-solo, can't figure that out ^^'
T 1567595406 18<kurahaupo18>	ychaouche: while read file ; do somecmd <&3 ; done 3<&1 <<EOF ... EOF
T 1567595438 18<kurahaupo18>	ychaouche: <<EOF provides input to a program; it doesn't arguments
T 1567595486 18<ychaouche18>	kurahaupo, maybe "while read line" is more appropriate variable name ?
T 1567595488 18<kurahaupo18>	ychaouche: to put that another way, "cat" reads its standard input, but "for" does not
T 1567595514 18<han-solo18>	kurahaupo: is that `do somecmd "$file"` ?
T 1567595537 18<kurahaupo18>	ychaouche: if the lines contain filenames, the I'd say "file". If they contain IP addresses, then I'd say "ipaddr"; If they contain english text, then "line".
T 1567595548 18<kurahaupo18>	han-solo: yeah probably
T 1567595551 18<ychaouche18>	kurahaupo, ah ok just wanted to make sure.
T 1567595574 18<han-solo18>	kurahaupo: Yeah, i was wondering
T 1567595612 18<ychaouche18>	kurahaupo, your solution seems to work
T 1567595636 18<han-solo18>	kurahaupo: and do one need the new fd ?
T 1567595671 18<kurahaupo18>	han-solo: mostly for the sake of avoiding the image-magick issue
T 1567595685 18<han-solo18>	kurahaupo: oh, Okay. Good to know
T 1567595690 18<ychaouche18>	so I'm using a third file descriptor in the input of the while command but I'm not explicitely affecting the part in <<EOF .. EOF as belonging to fd 3, will bash affect that by default ? (incremental fds...)
T 1567595704 18<kurahaupo18>	han-solo: just always tell people to pinhole their stdin, so the redirection doesn't break things when they use more complicated cases
T 1567595733 18<han-solo18>	Okay. Cool
T 1567595744 18<ychaouche18>	(it also works with a random fd number like 23)
T 1567595745 18<kurahaupo18>	However one could equally write: while read <&3 thingy ; do fumble "$thingy" ; done 3<<EOF ... EOF
T 1567595760 18<kurahaupo18>	and in hindsight, the latter is perhaps more obvious
T 1567596003 18<han-solo18>	Yeah
T 1567596160 18<kurahaupo18>	One important point about <<EndMarker in the shell, which differs from other languages that provide it: the heredoc starts on the beginning of the next line; the command parsing continues until the end of the current line. Which means you can stack multiple <<EoM on a single line; the second heredoc starts on the line following the closing EndMarker of the first <<, etc
T 1567596214 18<kurahaupo18>	(Perl does it this way too, but PHP does not)
T 1567600557 18<bqq18>	alias you='if test "$EUID" = 0 ; then /sbin/yast2 online_update ; else su - -c "/sbin/yast2 online_update" ; fi'
T 1567600575 18<bqq18>	where is this alisa coming from?
T 1567600598 18<Soliton18>	some file on your hard disk.
T 1567600654 18<Soliton18>	PS4='+($?) $BASH_SOURCE:$FUNCNAME:$LINENO:' bash -xlic : 2> >(grep alias)
T 1567600657 18<jtmusky_18>	try "grep -rF alias /location"
T 1567600678 18<Soliton18>	adjust bash options to what kind of shell you care about.
T 1567600730 18<bqq18>	i grepped /etc not found
T 1567600810 18<han-solo18>	bqq: which OS ?
T 1567600824 18<bqq18>	opensuse
T 1567600836 18<mingdao18>	clue was yast2
T 1567600842 18<han-solo18>	yum whatprovieds /sbin/yast2
T 1567600853 18<han-solo18>	and then look at the files, that package provides
T 1567600865 18<han-solo18>	s/whatprovieds/whatprovides/
T 1567600870 18<Soliton18>	or just look at the output of the command above.
T 1567600890 18<han-solo18>	yep :)
T 1567600891 18<Soliton18>	perhaps refine the grep.
T 1567601642 18<bqq18>	Soliton: wow, that is great diagnosis tool
T 1567601974 18<bqq18>	Soliton: why 2> is used instead of 1>?
T 1567602079 18<Soliton18>	!xtracefd
T 1567602080 18<greybot18>	In bash 4.x, the shell variable BASH_XTRACEFD allows you to specify a different file descriptor for xtrace (set -x) output. This can be useful when you want to redirect it elsewhere, without affecting the rest of stderr.
T 1567602104 18<Soliton18>	set -x outputs to stderr by default.
T 1567602375 18<rajendra18>	guys, whenever i enter the command from other folder: m2-cache-flush
T 1567602381 18<rajendra18>	the terminal is closed
T 1567602384 18<rajendra18>	https://pastebin.com/X2wA355y
T 1567602384 18<pasteban18>	Paste is available without ads on http://pastebin.com/raw/X2wA355y
T 1567602386 18<rajendra18>	is the script
T 1567602511 18<bqq18>	Soliton: interesting that : is a valid bash command
T 1567602527 18<osse18>	rajendra: the reason is the "exit 1"
T 1567602529 18<Soliton18>	!:
T 1567602529 18<greybot18>	: is a builtin identical to the true builtin; they do nothing and have an exit status of 0
T 1567602532 18<osse18>	you might want to just return there instead
T 1567602568 18<rajendra18>	I added exit 0 and return 1, still the same issue
T 1567602575 18<rafasc18>	osse: but then calling it assertM2Root doesn't make much sense.
T 1567602602 18<rajendra18>	that check makes sure you run that command only from M2Root which has those files
T 1567602609 18<osse18>	rajendra: not the way it's written now, no
T 1567602613 18<osse18>	that was for rafasc
T 1567602623 18<Soliton18>	!return
T 1567602623 18<greybot18>	Every Unix process returns an exit status code to its parent. This is an unsigned 8-bit integer, 0 to 255 inclusive, with 0 meaning "success" and 1-255 meaning "failure". A script returns the exit status of the last command executed, unless you call "exit" with an argument. Functions "return" an 8-bit status code also.
T 1567602637 18<osse18>	rajendra: you have to communicate the error in a different way then. exit won't work since it's a function and not a separate script
T 1567602645 18<Soliton18>	well, not quite what i hoped.
T 1567602670 18<Soliton18>	assertM2Root || return
T 1567602716 18<bqq18>	Soliton: what produced those extra ++ at the beginning?
T 1567602733 18<Soliton18>	you can probably even do return 2 but that's weird...
T 1567602787 18<Soliton18>	bqq: the first character of PS4 is repeated per level.
T 1567602816 18<bqq18>	ah great
T 1567603253 18<rajendra18>	@Soliton, so it should be assertM2Root && command ?
T 1567603383 18<rajendra18>	https://pastebin.com/JbyFTeQR -> like this?
T 1567603383 18<pasteban18>	Paste is available without ads on http://pastebin.com/raw/JbyFTeQR
T 1567603493 18<Soliton18>	well, you still exit so no.
T 1567603524 18<rajendra18>	assertM2Root -> how it should look like then
T 1567603533 18<Soliton18>	you may want to add a newline to your message, btw.
T 1567603533 18<osse18>	rajendra: return 1 instead of exit 1
T 1567608965 20*	Disconnected (20)
T 1567608990 19*	Now talking on 22#bash
T 1567608990 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567608990 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567608990 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567609097 18<jamie_118>	Soliton: im working on it, im still a bit new to bash. I'll wrap my head around it some day XD
T 1567609153 18<learning_2_learn18>	Soliton: What is best way to enumerate a file. I have file which one filepath one each line. I just wanna loop through it.
T 1567609176 18<Soliton18>	!faq 1
T 1567609176 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
T 1567609203 18<greycat18>	Acknowledging what bash *can't* do is important.  You can try to pass variables, including array variables, by reference, using declare -n, but be aware that this is dodgy as hell, and requires you to mangle EVERY local variable name in the function to avoid collisions.
T 1567670323 20*	Disconnected (20)
T 1567670346 19*	Now talking on 22#bash
T 1567670346 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567670346 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567670347 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567670358 18<b1tninja18>	any decent editors with some sort of syntax highlighting
T 1567670374 18<b1tninja18>	I am having trouble finding my syntax error, I know i'm missing a ; or \ or ' " ) somewhere
T 1567670384 18<b1tninja18>	but it complains at the end of the file because of a done token
T 1567670396 18<b1tninja18>	vim didn't make the problem jump out at me
T 1567670518 18<twb18>	b1tninja: apt install shellcheck
T 1567670813 18<b1tninja18>	man I tried to make a regex to lex some bash awhile back.... my god... think about getting the length of a variable in a string  inside an array inside a subshell and then add a comment to the end of the line
T 1567670839 18<b1tninja18>	ie something like $(echo lol "${#foo}") # bar
T 1567670860 18<b1tninja18>	do not envy whatever lalr/whatever
T 1567671188 18<twb18>	b1tninja: it
T 1567671193 18<twb18>	b1tninja: it's not regular, so a regexp cannot work
T 1567671506 18<b1tninja18>	lol
T 1567671657 18<Soliton18>	!cult
T 1567671657 18<greybot18>	The Cult Of The Regex. This eldritch brotherhood is dedicated to the dogma that Every Problem Must Be Solved By A Regular Expression, Preferably A PCRE. They will invent ludicrous problems whose only feasible solution is a regular expression, driving all men mad.
T 1567671872 18<twb18>	See also /msg fsbot jwz-fix2
T 1567675038 18<thican18>	Hello everyone, might I have some help please about the binary oprator "=~", as defined in Condtional Constructs? https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Conditional-Constructs As defined too on the wiki https://wiki.bash-hackers.org/syntax/ccmd/conditional_expression#regular_expression_matching
T 1567675084 18<Riviera18>	!ask
T 1567675085 18<greybot18>	If you have a question, please just ask it. Don't look for topic experts. Don't ask to ask. Don't PM! Don't ask if people are awake, or in the mood to help. Just ask the question straight out, and be patient waiting for an answer. http://mywiki.wooledge.org/NetEtiquette
T 1567675092 18<thican18>	Currently, on Bash version 4.4.23 implementation, the following test return falls : [[ "test/files/content.txt" =~ "^test" ]]; echo $?
T 1567675102 18<thican18>	Riviera: Thanks, I am not that fast ;-)
T 1567675119 18<Riviera18>	thican: quoted parts of the regex will be interpreted literally.
T 1567675140 18<Riviera18>	# [[ ^test =~ "^test" ]] && echo true
T 1567675141 18<shbot18>	Riviera: true
T 1567675149 18<Riviera18>	# [[ test =~ ^test ]] && echo true
T 1567675150 18<shbot18>	Riviera: true
T 1567675179 18<survietamine18>	falls? :D
T 1567675185 18<Riviera18>	# set -x; [[ $var =~ "^test" ]]
T 1567675186 18<shbot18>	Riviera: + [[ '' =~ \^test ]]
T 1567675202 18<thican18>	*False" ;-)
T 1567675232 18<thican18>	oh, ok, I shouldn't have quote the left part, ok, I see.
T 1567675245 18<survietamine18>	you said on 4.4.23, so, did you mean that it worked on previous version?
T 1567675262 18<survietamine18>	the left?
T 1567675304 18<survietamine18>	I believe you want to remove quotes on right part
T 1567675305 18<thican18>	No, still here
T 1567675317 18<Riviera18>	thican: There are issues with that with older variants of bash, the behaviour changed across versions (see the compat* shopt options if you are curious); a way o make it work across versions is to put the regex in a variable and use it unquoted in the [[ .. ]] command.
T 1567675331 18<thican18>	I just gave the version as it might help people
T 1567675397 18<Riviera18>	(could also be that the manpage does not address this, i never read it)
T 1567675411 18<Riviera18>	(the compat*-stuff i mean)
T 1567675473 18<thican18>	Well, thanks for the help.
T 1567675670 18<thican18>	Well, but I might have a stupid question: if I don't quote the left part, I might have more than 2 parameters
T 1567675698 18<thican18>	so I should escape the space caracter on the ERE part?
T 1567675708 18<thican18>	and then, not quoting it?
T 1567675718 18<thican18>	(let's try this)
T 1567675912 18<Soliton18>	doesn't matter if you quote the left part or not. that part is not a regex just a string.
T 1567676057 18<tuskkk____18>	how do we save all the commands ever invoked via the terminal?
T 1567676200 18<thican18>	Soliton: I was referencing to the "Number of Arguments Rules" of the classic test command (which [[ ]] is its modern variant). https://wiki.bash-hackers.org/commands/classictest#number_of_arguments_rules
T 1567676268 18<thican18>	But as the Wiki says this last, "Bash doesn't need to apply the normal commandline parsing rules"
T 1567676298 18<thican18>	*about this last
T 1567676375 18<Soliton18>	sure, you have to quote/escape as everywhere else to tell bash what belongs to one argument.
T 1567676435 18<Soliton18>	i.e. [[ foo bar =~ baz ]] is not going to work.
T 1567676524 18<thican18>	Then I don't understand how not quoting the ERE variable is not providing more arguments
T 1567676641 18<Soliton18>	because [[ is special. unquoted expansions are not wordsplit.
T 1567676665 18<Soliton18>	# type [[
T 1567676666 18<shbot18>	Soliton: [[ is a shell keyword
T 1567676749 18<AlecTaylor18>	hi
T 1567676792 18<AlecTaylor18>	I've got a large variable. How do I modify argmax so I can use it? - Or is there something other than envsubst and sed that I can use that will replace my variable with contents?
T 1567676820 18<Soliton18>	!argmax
T 1567676820 18<greybot18>	The kernel constant ARG_MAX defines the maximum number of bytes that can be passed to exec(3). On Linux since libc 2.8, this value is determined dynamically based upon the system, and is not hardcoded. # http://www.in-ulm.de/~mascheck/various/argmax/
T 1567676920 18<Soliton18>	perhaps you want to explain what you're trying to do.
T 1567677039 18<thican18>	Thanks all, have a nice day/night.
T 1567677084 18<AlecTaylor18>	Soliton: html="$(find -type d -name '.git' -exec bash -c 'GIT_DIR="$0" GIT_WORK_TREE="$0" git --no-pager log --date='iso-strict' --pretty=format:"<tr><th>%ad</th><th><p><i>${PWD##*/}</i>: %B</p></th></tr>"' {} 2>/dev/null \;)";
T 1567677089 18<AlecTaylor18>	sed "s/${TABLE}/$html/" git-log.html > index.html;
T 1567677089 18<AlecTaylor18>	envsubst < git-log.html > index.html
T 1567677105 18<AlecTaylor18>	As you can see, I'm trying to get a nice HTML table of my git logs
T 1567677123 18<AlecTaylor18>	(I've got more arguments around filtering by date and author, but you get the gist)
T 1567677220 18<Soliton18>	is it intentional that you redirect find's stderr to /dev/null in the middle of the command?
T 1567677242 18<Soliton18>	really weird placement.
T 1567677260 18<AlecTaylor18>	Yeah, I was getting "fatal: your current branch 'master' does not have any commits yet" errors
T 1567677288 18<Soliton18>	so you want to redirect stderr of git.
T 1567677301 18<Soliton18>	that's not what you're doing.
T 1567677318 18<AlecTaylor18>	Yeah. There's only three executions here, `find`, `bash`, and `git`
T 1567677323 18<Soliton18>	i mean it happens as well this way, of course.
T 1567677351 18<Soliton18>	anyway, i'd write the html to a file.
T 1567677359 18<AlecTaylor18>	Anyway, in terms of using this output and streaming it to a table in a bigger HTML document, what's the trick?
T 1567677397 18<Soliton18>	seems unlikely that crazy sed injection is going to work at all.
T 1567677400 18<AlecTaylor18>	Okay, so I pipe to a file, and then pipe the file into envsubst?
T 1567677436 18<Soliton18>	you already do that.
T 1567677442 18<AlecTaylor18>	Yeah but it fails
T 1567677452 18<Soliton18>	i doubt that.
T 1567677455 18<AlecTaylor18>	So I was thinking instead of storing in a bash variable I would pipe it
T 1567677462 18<AlecTaylor18>	Soliton: As in it reaches argmax
T 1567677467 18<Soliton18>	your sed call fails.
T 1567677482 18<AlecTaylor18>	Soliton: I tried sed because envsubst failed. Would prefer to just use envsubst
T 1567677504 18<Soliton18>	how did envsubst fail?
T 1567677568 18<AlecTaylor18>	-bash: /usr/bin/env: Argument list too long
T 1567677603 18<Soliton18>	are you also allowed to disclose how you invoked it?
T 1567677634 18<AlecTaylor18>	Sure, what do you need to know?
T 1567677646 18*	AlecTaylor is running Bash 5.0.11(1)-release
T 1567677801 18<Soliton18>	is it really that difficult to provide relevant info? if the argument list is too long obviously i need to see the argument list.
T 1567677828 18<Soliton18>	i cannot guess how in the world the argument list to envsubst would be too long.
T 1567677840 18<Soliton18>	that makes no sense.
T 1567677869 18<AlecTaylor18>	Just go to your repo directory and run this
T 1567677871 18<Soliton18>	if it's the same as the sed call you have a single variable.
T 1567677877 18<AlecTaylor18>	html="$(find -type d -name '.git' -exec bash -c 'GIT_DIR="$0" GIT_WORK_TREE="$0" git --no-pager log --date='iso-strict' --pretty=format:"<tr><th>%ad</th><th><p><i>${PWD##*/}</i>: %B</p></th></tr>"' {} \;)"; /usr/bin/env -i html="$html" PATH='/usr/local/bin' envsubst < git-log.html > index.html
T 1567677913 18<Soliton18>	ok, so the env is too big, right.
T 1567677948 18<Soliton18>	well, as i said put the html in a file instead.
T 1567677958 18<AlecTaylor18>	Will that overcome the argmax limit?
T 1567677977 18<Soliton18>	since the html will not be in the env, yes.
T 1567677991 18<Soliton18>	can't use envsubst then though.
T 1567678012 18<Soliton18>	what does git-log.html look like?
T 1567678120 18<AlecTaylor18>	It's larger, but something like: <!DOCTYPE HTML> <html lang="en"> 	<head> 		<meta charset="utf-8" /> </head><body> <table>${TABLE} </table></body>
T 1567678156 18<AlecTaylor18>	(it also has header stuff for the table, and a bunch of styling)
T 1567678637 18<Soliton18>	perhaps: awk -vf=htmlfile 'BEGIN {while (getline < f) html=html $0 "\n"} {sub("\$\{TABLE\}", html)} 1' git-log.html
T 1567684410 18<Riviera18>	Soliton: btw, the macOS /usr/bin/awk does not like -vf=.., it has to be -v f=..
T 1567684627 18<Soliton18>	ah, i was wondering a bit about that. it was mostly a typo but it did work for me.
T 1567685298 18<trrgrnd18>	hello guys
T 1567685797 18<mingdao18>	trrgrnd: http://www.nohello.com/
T 1567686280 18<trrgrnd_18>	exit
T 1567686933 18<fichtl18>	!cult
T 1567686933 18<greybot18>	The Cult Of The Regex. This eldritch brotherhood is dedicated to the dogma that Every Problem Must Be Solved By A Regular Expression, Preferably A PCRE. They will invent ludicrous problems whose only feasible solution is a regular expression, driving all men mad.
T 1567687297 18<trrgrnd18>	hello guys, i'm newbie in weechat. what are you disscussing here?
T 1567687652 18<djph18>	trrgrnd: bash.
T 1567687769 18<mingdao18>	trrgrnd: Whenever you join a channel on FreeNode, issue /topic to get the answer to that question.
T 1567688523 18<ice918>	"ls -ld .?* | awk '{print $9}'  | xargs -I {} du -hs  {}"  why this is not showing anything?
T 1567688551 18<greycat18>	!ls
T 1567688551 18<greybot18>	DO NOT USE ls' output for anything. ls is a tool for interactively looking at directory metadata. Any attempts at parsing ls' output with code are broken. Globs are much more simple AND correct: ''for file in *.txt''. Read http://mywiki.wooledge.org/ParsingLs
T 1567688562 18<greycat18>	What are you actually trying to do?
T 1567688592 18<ice918>	greycat, trying to list only hidden dirs and files and get this 'du'
T 1567688598 18<ice918>	their*
T 1567688652 18<survietamine18>	you don't need ls
T 1567688686 18<greycat18>	du -sh .[!.]*
T 1567688874 18<ice918>	thanks
T 1567689034 18<wwilliam18>	is shellcheck.net down?
T 1567689053 18<greycat18>	oh man, if only the internet had a web site where you could see if a site is down for everyone or just me
T 1567689181 18<survietamine18>	the most well-known doesn't always work as expected
T 1567689217 18<survietamine18>	example: https://downforeveryoneorjustme.com/postfix.org
T 1567689241 18<survietamine18>	It doesn't look working well for http only sites
T 1567689284 18<greycat18>	well, that example gives the "correct" result, or at least a result that matches my web browser's opinion, though I would need to try an outside DNS resolver to be sure
T 1567689333 18<survietamine18>	that site auto removes www. in "www.postfix.org" and then it fails on postfix.org
T 1567689357 18<greycat18>	your URL only had postfix.org without the www.
T 1567689361 18<survietamine18>	no
T 1567689367 18<survietamine18>	I typed www.postfix.org
T 1567689375 18<survietamine18>	the site removed it
T 1567689393 18<survietamine18>	but, I found another site that works well, ofc
T 1567689405 18<greycat18>	then you should have typed it in the example you gave in IRC, but ok, yeah, now that I know what you were actually trying to *say*, you are correcgt
T 1567689455 18*	greycat exits from the shell where he could resolve IP addresses without going through the fucking corporate DNS nameservers
T 1567689456 18<survietamine18>	yes, sorry, I didn't explain well.
T 1567689461 18<knstn18>	You can simply install shellcheck on your machine
T 1567689611 18<wwilliam18>	my shellcheck is not giving me any output
T 1567689620 18<greycat18>	yay?
T 1567689622 18<survietamine18>	jlol
T 1567689633 18<wwilliam18>	~$ shellcheck axaftpfnlpro7_dec
T 1567689634 18<wwilliam18>	afernandez@debian:~$
T 1567689646 18<wwilliam18>	and i know there are bad things in there.
T 1567689669 18<greycat18>	so you wanted to look for a newer version of it on the web, but your browser said "no way"?
T 1567689696 18<wwilliam18>	no I just use the web page never use the install one.
T 1567689713 18<wwilliam18>	so now i went to the installed one and dont work.
T 1567689714 18<greycat18>	then what the hell is 09:20  wwilliam> ~$ shellcheck axaftpfnlpro7_dec
T 1567689763 18<wwilliam18>	using shellcheck
T 1567690243 18<wwilliam18>	ok is working now i had to use ./ at the beggining of the "script"
T 1567690410 18<survietamine18>	I'm not sure about the others, but it's still vague to me.
T 1567690477 18<gl18>	5
T 1567690481 18<gl18>	sorry
T 1567692698 18<kaushal18>	Hi
T 1567692756 18<kaushal18>	I am facing this issue https://paste.centos.org/view/bb5a163d#hfekUj4mBQvUvUCxKvzecpImYJ2UIxkt
T 1567692800 18<lopid18>	you are facing a url?
T 1567692817 18<kaushal18>	lopid: url?
T 1567692843 18<kaushal18>	lopid: Sorry i did not understand
T 1567692849 18<lopid18>	it's not looking good
T 1567692853 18<kaushal18>	ok
T 1567692872 18<han-solo18>	url is fine, but is that ..
T 1567692890 18<kaushal18>	Invalid JSON payload received
T 1567692895 18<greycat18>	a URL is a Uniform Resource Locator, which is a string that tells a web user agent what information to retrieve, from what server, using what protocol
T 1567692963 18<han-solo18>	kaushal: actually, this looks like a JSON issue. You are passing invalid json. '{ "thread": {    "name": "spaces/AAAAChyUB4U/threads/ESj2RJru2as"  },"text": "*"":* "" " "Nagios notification: " }'
T 1567692997 18<kaushal18>	han-solo: ok
T 1567693050 18<kaushal18>	han-solo: Issue in GCHAT_MSG="{ \"thread\": {    \"name\": \"$ROOM_ID\"  },\"text\": \"*\"$2\":* \"$4\" \"$5 \"Nagios notification: $6\" }"
T 1567693085 18<greycat18>	kaushal: are you trying to create JSON and put it in a bash variable?
T 1567693093 18<greycat18>	!jqcreate
T 1567693093 18<greybot18>	To create JSON strings with variable assignments: jq -nc --arg bar "$bar" '{foo:$bar}' ;# compare with awk -v awkvar="$bashvar"
T 1567693109 18<kaushal18>	ok
T 1567694942 18<foobar5518>	!qefs
T 1567694942 18<greybot18>	"$Quote" "$Every" "$Fucking" "$Substitution"
T 1567695041 20*	Disconnected (20)
T 1567695240 19*	Now talking on 22#bash
T 1567695240 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567695240 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567695241 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567695436 18<_1H_A_C_K_E_R_18>	hi
T 1567695583 18<BenA18>	That's... a username.
T 1567695617 18<greycat18>	It won't be a username for long if it continues as it has been the last few days.
T 1567695767 18<_1H_A_C_K_E_R_18>	i am back
T 1567695781 18*	Patsie grabs some popcorn
T 1567695791 18<Patsie18>	sounds like entertainment to me
T 1567695940 18<_1H_A_C_K_E_R_18>	you need popcorn with cooldrink
T 1567695951 18<_1H_A_C_K_E_R_18>	lol
T 1567696037 18<_1H_A_C_K_E_R_18>	this is not a movie seene
T 1567696046 18<BenA18>	Oh.
T 1567696068 18<_1H_A_C_K_E_R_18>	i am real hacker
T 1567696105 18<greycat18>	If you don't have anything useful to say about bash, or any questions about bash, please go elsewhere.
T 1567696236 18<_1H_A_C_K_E_R_18>	139.137.128.43
T 1567696258 18<greycat18>	Yes, very impressive, you have mastered the /whois command.
T 1567696259 18<_1H_A_C_K_E_R_18>	New York City, NY, US
T 1567696272 18<_1H_A_C_K_E_R_18>	vpn
T 1567696275 18<greycat18>	We all tremble before your wizardry.
T 1567696411 18<_1H_A_C_K_E_R_18>	you use vpn
T 1567696418 18<_1H_A_C_K_E_R_18>	lol
T 1567696443 18<mooasaurus18>	why do you exist
T 1567696476 18<greycat18>	Lead poisoning, perhaps.
T 1567696487 18<jtmusky_18>	r/masterhacker
T 1567696576 18<mooasaurus18>	too much exposure to Flint water.. I'll buy it
T 1567696583 18<_1H_A_C_K_E_R_18>	don,t angry me
T 1567696639 18<hoylemd18>	that apostrophe needs to lose some weight.
T 1567696661 18<_1H_A_C_K_E_R_18>	i am vailent all silent
T 1567696741 18<_1H_A_C_K_E_R_18>	give me some info
T 1567696765 18<greycat18>	Last warning: keep discussion on topic, or be silent, or go away.
T 1567696837 18<_1H_A_C_K_E_R_18>	don,t angry me
T 1567696906 18<_1H_A_C_K_E_R_18>	give some info for access code
T 1567696909 18<BenA18>	I approve the imminent k-line.
T 1567696917 22*	26ChanServ gives channel operator status to 18greycat
T 1567696924 22*	26greycat sets ban on 18*!*@2401:1400:1:1201:0:1:8a71:4627
T 1567696926 22*	26greycat has kicked 18_1H_A_C_K_E_R_ from 22#bash (24_1H_A_C_K_E_R_)
T 1567696962 22*	26greycat removes channel operator status from 18greycat
T 1567697079 18<Patsie18>	it was short, but somewhat entertaining... still have some popcorn left though
T 1567697371 18<greycat18>	I'm vaguely curious where he got the notion that my IP is associated with New York, but I'm not about to ask him.
T 1567697405 18<Patsie18>	maybe the IRC server you're connected with
T 1567697417 18<mooasaurus18>	I got here late, figured he was talking about his but didn't care to check
T 1567697428 18<Patsie18>	"server   : livingstone.freenode.net [New York City, NY, US]"
T 1567697438 18<greycat18>	oh, that's amusing
T 1567697443 18<Patsie18>	yeah, not too bright
T 1567697463 22*	26ChanServ gives channel operator status to 18greycat
T 1567697465 18<Patsie18>	whois __01H_C_K5
T 1567697469 18<Patsie18>	:)
T 1567697471 22*	26greycat sets ban on 18*!*@2a04:9dc0:c1:7::5443:df98
T 1567697481 22*	26greycat has kicked 18__01H_C_K5 from 22#bash (24__01H_C_K5)
T 1567697541 18<mooasaurus18>	could have at least used a different not-so-obvious nick
T 1567697553 22*	26greycat removes channel operator status from 18greycat
T 1567697604 18<__011H_A_C_K_E_R18>	LOL
T 1567697612 22*	26ChanServ gives channel operator status to 18greycat
T 1567697621 22*	26greycat sets ban on 18*!~etrerter@*
T 1567697625 22*	26greycat has kicked 18__011H_A_C_K_E_R from 22#bash (24__011H_A_C_K_E_R)
T 1567697644 18<jtmusky_18>	This is going to get old fast
T 1567697660 18<phy172918>	+b *!~etrerter@*
T 1567697676 18<mooasaurus18>	it'll at least take him 15 minutes or so to figure out how to change his name
T 1567697712 18<greycat18>	he was using ~jack a few days ago
T 1567697745 18<mooasaurus18>	ah, so they've been over that hurdle
T 1567697803 18<phy172918>	could just be a different computer with a different username
T 1567697901 18<jtmusky_18>	https://www.reddit.com/r/masterhacker/comments/d02ehe/give_me_the_access_code_dont_anger_me_or_ill/
T 1567697913 22*	26greycat removes channel operator status from 18greycat
T 1567703679 20*	Disconnected (20)
T 1567703706 19*	Now talking on 22#bash
T 1567703706 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567703706 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567703706 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567712717 20*	Disconnected (20)
T 1567712744 19*	Now talking on 22#bash
T 1567712744 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567712744 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567712744 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567712848 18<markasoftware18>	jsyk my project anypaste.xyz is better than remembering curl syntax for ixio upload :)
T 1567713021 18<greycat18>	nobody remembers the syntax; they just make functions or aliases to do it
T 1567714499 18<disi18>	any idea why `trap "printf '%s' '$(tput setaf 7)'" DEBUG` makes my centos machines play an audible bell (and `printf 37m` in white)?
T 1567714530 18<greycat18>	why on earth are you using a command sub + printf, instead of just running tput in the trap
T 1567714530 18<llua18>	you not understanding how quoting works
T 1567714554 18<greycat18>	trap 'tput setaf 7' DEBUG
T 1567714557 18<disi18>	doh, those quotes are backwards (i've been experimenting)
T 1567714632 18<disi18>	also fwiw, it's actually TXT_WHITE_FG="$(tput setaf 7)" then the trap uses TXT_WHITE_FG
T 1567714641 18<disi18>	anyways, i'll try dropping the printf, thanks!
T 1567714678 18<disi18>	what's weird is this "works" on ubuntu/debian
T 1567714678 18<greycat18>	...
T 1567714785 18<disi18>	`trap 'tput setaf 7' DEBUG` has the same behavior (audible bell + 37m)
T 1567714860 18<disi18>	interesting... maybe it's interacting with a different trap... disabling that (there's only 2) removes the bell too
T 1567714871 18<disi18>	`trap 'tput setaf 7' DEBUG` causes a bunch of -bash: $'\E[37m': command not found
T 1567714928 18<disi18>	er... nvm. but it does bell (even as the only trap)
T 1567714948 18<Achylles18>	I am trying to delete all ".git" folders on a local folder with find. It works, but a few .git folders still remain. I am using this command -> find . -depth -maxdepth 14 -type d -name ".git" -exe c rm -rf {} \;
T 1567715059 18<Achylles18>	it seems that find does not reach those folders which are not so deep, but about level 8 or 9
T 1567750304 20*	Disconnected (20)
T 1567750330 19*	Now talking on 22#bash
T 1567750330 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567750330 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567750332 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567750847 18<geirha18>	cargo $* is wrong. Should be  cargo "$@"
T 1567750874 18<geirha18>	anyway, you can write a function to do it.    cargo() { command cargo "$@" | script; }
T 1567750914 18<geirha18>	oh, sie left
T 1567752495 18<osse18>	They're back!
T 1567752552 18<NerdyPepper18>	who is
T 1567752559 18<osse18>	you
T 1567752574 18<osse18>	cargo() { command cargo "$@" | script; }
T 1567752576 18<NerdyPepper18>	ah my bad
T 1567752636 18<NerdyPepper18>	ooo TIL `command`
T 1567752637 18<NerdyPepper18>	thanks osse
T 1567752690 18<han-solo18>	oh, people like `rust` more than `go` ?
T 1567752700 18<han-solo18>	or is it because, rust is community based
T 1567752738 18<osse18>	assume the answer to your first question is "no". what is then "it" referring to in the next one?
T 1567752745 18<NerdyPepper18>	i picked up rust without any prior reasoning tbh
T 1567752771 18<han-solo18>	it as in "people like `rust` because"
T 1567752812 18<han-solo18>	i wanted to learn on of those, ended up learning none :|
T 1567752959 18<han-solo18>	s/or//
T 1567753071 18<AlecTaylor18>	hi
T 1567753194 18<NerdyPepper18>	o/
T 1567753275 18<geirha18>	rust looks too much like c++ and go looks too much like java for my taste
T 1567753316 18<NerdyPepper18>	go looks `c` ish or atleast feels like it
T 1567753366 18<AlecTaylor18>	Soliton: that awk line from yesterday didn't work. To reiterate the question:
T 1567753394 18<AlecTaylor18>	How do I get over this error, without changing the argmax limit? - -bash: /usr/bin/env: Argument list too long
T 1567753405 18<AlecTaylor18>	What makes this error:
T 1567753405 18<AlecTaylor18>	html="$(find -type d -name '.git' -exec bash -c 'GIT_DIR="$0" GIT_WORK_TREE="$0" git --no-pager log --date='iso-strict' --pretty=format:"<tr><th>%ad</th><th><p><i>${PWD##*/}</i>: %B</p></th></tr>"' {} \;)"; /usr/bin/env -i html="$html" PATH='/usr/local/bin' envsubst < git-log.html > index.html
T 1567753413 18<NerdyPepper18>	ohno
T 1567753418 18<AlecTaylor18>	Where the HTML file is something like: <!DOCTYPE HTML> <html lang="en">  <head>   <meta charset="utf-8" /> </head><body> <table>${TABLE} </table></body>
T 1567753430 18<Soliton18>	!doesntwork
T 1567753430 18<greybot18>	Saying something "doesn't work" helps neither you or us. Explain the result you *want* or *expect*, what you are *doing* and *how* it is failing. Copy/paste the commands you use and the errors they produce. Consider set -x to get more information on what is happening.
T 1567753435 18<NerdyPepper18>	pastebin please
T 1567753455 18<AlecTaylor18>	That's the full example taken from many smaller snippets in this chat from yesterday
T 1567753587 18<han-solo18>	`go` is `c`ish for me, without the `;`s
T 1567753619 18<geirha18>	the html is probably too large to fit in env then
T 1567753638 18<han-solo18>	Very nice to read, imho
T 1567753652 18<geirha18>	why is it even added to env in the first place?
T 1567753710 18<geirha18>	ah, nevermind, I see.
T 1567753743 18<geirha18>	but you'll need to find a different way of doing the substitution, one that doesn't require the html to be included as environment variable or argument
T 1567753795 18<AlecTaylor18>	geirha: Because envsubst is nice?
T 1567753835 18<geirha18>	well ... not when your single env variable exceeds the argmax limit
T 1567753849 18<AlecTaylor18>	xDDD
T 1567754109 18<geirha18>	cat > index.html << EOF
T 1567754113 18<geirha18>	<html><body><table>
T 1567754115 18<geirha18>	$(find ...)
T 1567754122 18<geirha18>	</table></body></html>
T 1567754124 18<geirha18>	EOF
T 1567754155 18<geirha18>	or { print '<html>...\n'; find ...; printf '...</html>\n'; } > index-html
T 1567754235 18<snatcher18>	shbot
T 1567754237 18<geirha18>	if we ignore the typos ... *coffee*
T 1567754240 18<NerdyPepper18>	is this a static site generator kinda thing?
T 1567755754 18<snatcher18>	is it ok to use xargs as whitespace normalizer?
T 1567755778 18<survietamine18>	what's that?
T 1567755797 18<Riviera18>	snatcher: likely not.
T 1567755829 18<survietamine18>	you want to convert tabs to spaces?
T 1567755845 18<kurahaupo18>	snatcher: tr -s ' \t' ' '
T 1567755859 18<snatcher18>	trim trailing/repeating whitespaces
T 1567755860 18<earnestly18>	\\v
T 1567755890 18<snatcher18>	kurahaupo: it doesn't trim trailing
T 1567755908 18<kurahaupo18>	snatcher: I know, but you hadn't asked that when I gave that response
T 1567755909 18<earnestly18>	Well because those are two different operations
T 1567755929 18<snatcher18>	# printf '%s\n' '  s    s   s  ' | xargs
T 1567755930 18<shbot18>	snatcher: s s s
T 1567755952 18<kurahaupo18>	snatcher: sed 's/[[:space:]][[:space:]]*/ /g; s/^ //; s/ $//'
T 1567755986 18<kurahaupo18>	snatcher: so do you want to keep lines or wrap them? (And if so, with what rules for what not to wrap?)
T 1567756131 18<kurahaupo18>	snatcher: tr -s ' \t\r\n' ' ' # assuming you just want newlines converted to spaces as well; add any other white-space characters you want to the others in the 2nd parameter
T 1567756307 18<snatcher18>	kurahaupo: \t ?
T 1567756358 18<kurahaupo18>	snatcher: ASCII codepoint 9
T 1567756382 18<kurahaupo18>	snatcher: otherwise known as the "TAB character"
T 1567756500 18<kurahaupo18>	snatcher: just checking your understanding of the shell, that in this case the second parameter starts at the first single quote mark and ends at the second one - and that those quotes are stripped off before 'tr' gets the parameter; the first parameter is -s and the third parameter is a single space
T 1567756501 18<geirha18>	tr -s '[:space:]' '[ *]'
T 1567756535 18<kurahaupo18>	geirha: I'm pretty sure the [] in the 3rd arg are unnecessary/wrong
T 1567756566 18<kurahaupo18>	as is the *
T 1567756575 18<geirha18>	it's recommended by posix; for when set1 is longer than set2
T 1567756606 18<kurahaupo18>	That strikes me as fundamentally incompatible with traditional tr logic
T 1567756681 18<geirha18>	because sysv and bsd had different behavior when the sets had different lenghts
T 1567756715 18<kurahaupo18>	which one replicates the final character "as many as needed"?
T 1567756762 18<kurahaupo18>	And what should happen if I  write: tr '{_+}' '[ *]'
T 1567756802 18<geirha18>	it tells tr that all four characters translate to space, same as tr '{_+}' '    '
T 1567756810 18<kurahaupo18>	ewwww
T 1567756867 18<kurahaupo18>	so I just have to make sure I don't have the replacement param match /^\[.\*\]$/ ?
T 1567756898 18<geirha18>	you'll need to escape the [ then, yes
T 1567756932 18<kurahaupo18>	the obvious way would be to reorder the bytes: tr '-+{}' ' *[]'
T 1567756947 18<kurahaupo18>	oh wait, not - first
T 1567756957 18<kurahaupo18>	tr '+{}-' '*[] '
T 1567757023 18*	kurahaupo is saddened that one of the simplest, easiest-to-understand utilities, has grown ugly sharp complexity horns to gash the unwary
T 1567757093 18<kurahaupo18>	geirha: your answer suggests that BSD & SysV versions could have differing behaviour even when they're the same length
T 1567757143 18<geirha18>	yes
T 1567757164 18<geirha18>	so posix had to make some hard choices
T 1567757202 18<kurahaupo18>	:-(
T 1567757241 18<geirha18>	though BSD and GNU tr both use the BSD-behavior for the unspecified parts
T 1567757341 18<geirha18>	but then you have BSD tr that handles multibyte characters vs GNU tr that doesn't. Much fun
T 1567757426 18<geirha18>	$ tr å a <<< å # BSD
T 1567757428 18<geirha18>	a
T 1567757430 18<geirha18>	$ gtr å a <<< å # GNU
T 1567757432 18<geirha18>	aa
T 1567757497 18<kurahaupo18>	geirha: argh. I'm supposing you have LANG=*.UTF-8 ?
T 1567757520 18<Kartagis18>	hello
T 1567757526 18<geirha18>	# export LC_ALL=nb_NO.UTF-8; tr å a <<< å
T 1567757527 18<shbot18>	geirha: aa
T 1567757535 18<Kartagis18>	what am I doing wrong here? http://paste.debian.net/1099162/
T 1567757544 18<geirha18>	!check
T 1567757545 18<checkbot18>	Kartagis: Line 7: i appears unused. Verify use (or export if used externally). See https://shellcheck.net/?id=cb57544
T 1567757579 18<geirha18>	to iterate N times, use a C-style for-loop.  for (( i = 0; i < $1; ++i ))
T 1567757589 18<kurahaupo18>	Kartagis: you want «for i in "$@"» rather than «in $1»
T 1567757592 18<geirha18>	but make sure $1 consists only of digits first
T 1567757609 18<kurahaupo18>	Kartagis: (which is actually the default, so you can just write « for i do wget ... »
T 1567757643 18<Kartagis18>	geirha: oh sorry, I must have mispasted. there is a redirection i.e. > $i.jpg
T 1567757661 18<kurahaupo18>	geirha: sounds like your interpretation is more likely correct
T 1567757668 18<kurahaupo18>	s/interpretation/guesswork/
T 1567757679 18<Kartagis18>	kurahaupo: why do I want "$@"?
T 1567757705 18<osse18>	you don't in this case.
T 1567757726 18<kurahaupo18>	Kartagis: You probably don't, if you intend $1 to be a numeric value as a counter or limit
T 1567757733 18<osse18>	kurahaupo made a complete FOOL out of him and/or herself
T 1567757735 18<osse18>	:p
T 1567757741 18<geirha18>	if [[ $1 != +([0-9]) ]]; then printf >&2 'Bad number: %s\n' "$1"; exit 1; fi; for (( i = 0; i < 10#$i; ++i )); do curl "...$3.jpg" > "$i.jpg"; done
T 1567757744 18<osse18>	jk i<3u xoxo
T 1567757768 18<kurahaupo18>	osse: yeah I'm having a bad day. I blame it on the newly acquired flu
T 1567757784 18<Kartagis18>	when I do lorempixel.sh 5 1000 1000, it saves two files; one 1000 and one 5.jpg. this is my actual problem.
T 1567757798 18<kurahaupo18>	osse: (not *completely* stupid though, that line is obviously wrong, I just guessed the wrong "right" way)
T 1567757819 18<kurahaupo18>	Kartagis: did you fix the "for" as geirha said?
T 1567757829 18<geirha18>	Kartagis: with your current code, the for-loop would only iterate once
T 1567757935 18<Kartagis18>	kurahaupo: I just did. do I need "done" after that?
T 1567757981 18<geirha18>	... I did include the done
T 1567758013 18<kurahaupo18>	Kartagis: ok, if those parts of the syntax aren't obvious to you, maybe we need to step back a bit. Start by unwrapping the "for" loop onto 3 lines, for ... ; do, then wget, then done. THEN change just the first line to: for ((i=1 ; i<$1; ++i)) do
T 1567758014 18<geirha18>	but, I typoed $1 as $i in there
T 1567758023 18<geirha18>	if [[ $1 != +([0-9]) ]]; then printf >&2 'Bad number: %s\n' "$1"; exit 1; fi; for (( i = 0; i < 10#$1; ++i )); do curl "...$3.jpg" > "$i.jpg"; done
T 1567758072 18<geirha18>	(previous one had 10#$i which is obviously wrong)
T 1567758073 18<kurahaupo18>	Kartagis: use what geirha just wrote, but unwrap it onto separate lines; put linebreaks after "then" and "do", and replace semicolons by linebreaks, and then indent sanely
T 1567758132 18<kurahaupo18>	Kartagis: lastly, you should check that you get THREE arguments, not just one.
T 1567758174 18<kurahaupo18>	Kartagis: if (( $# != 3 )) ; then printf >&2 'Wrong number of args\n' ; exit 1 ; fi
T 1567758253 18<Kartagis18>	sweet
T 1567758254 18<geirha18>	and you may want to add some validation for the other two arguments as well
T 1567758310 18<Kartagis18>	this is a quick throw together, I will fix it later as per your suggestions. thanks a lot all
T 1567758375 18<Kartagis18>	hrm
T 1567758389 18<kurahaupo18>	for c in "$2" "$3" ; do if [[ $c = *(.) ]]; then printf >&2 'Bad arg "%s"\n' "$c" ; exit 1 ; fi done # not allowed to be empty, ., or .. (nor ..., which would be a silly name for a file)
T 1567758457 18*	kurahaupo wonders whether, for pedagogic, a semicolon should have been included between "fi" and "done"
T 1567758467 18<geirha18>	the +([0-9]) test is probably applicable to the two other args too
T 1567758489 18<geirha18>	they are presumably width and height in pixels
T 1567758565 18<kurahaupo18>	for c do [[ $c = +([[:digit:]]) ]] || die "Invalid parameter $c" ; done # but must define "die" first
T 1567758705 18<kurahaupo18>	geirha: Do you have an opinion on the non-looping method: [[ " $* " = @(*'  '*|*[! 0-9]*) ]] || die ...  # most people either love it or hate it
T 1567758727 18<kurahaupo18>	err, that should be &&
T 1567758869 18<geirha18>	it'll accept empty args
T 1567759085 18<Kartagis18>	there are perks to slo internet connection you know.
T 1567759099 18<Kartagis18>	I can see what I did wrong.
T 1567759131 18<kurahaupo18>	geirha: the non-loop verrsion won't; that's why it prohibits double-space.
T 1567759183 18<kurahaupo18>	(The worst flaw is that it permits spaces within an arg)
T 1567759200 18<Kartagis18>	with `or (( i=0;i<$1;i++ )); do wget "http://lorempixel.com/$2/$3" > "$i.jpg"; done`, it saves over 600 multiple times.
T 1567759202 18<kurahaupo18>	The second-worst flaw is that it's arcane
T 1567759208 18<Kartagis18>	doh!
T 1567759234 18<Kartagis18>	> vs -o
T 1567759237 18<Kartagis18>	damn!
T 1567759474 18<geirha18>	that's why mine used curl
T 1567761473 18<fkl18>	I want to 'ls' all files that doesn't have the '.mp4' extension.
T 1567761482 18<fkl18>	I tried the following:
T 1567761500 18<fkl18>	ls *.[^m][^p][^4]
T 1567761514 18<Soliton18>	!extglob
T 1567761514 18<greybot18>	"Extended globs" (shopt -s extglob) allow you to say things like "all files that do not end in .jpg". See http://mywiki.wooledge.org/glob#extglob
T 1567761717 18<fkl18>	Soliton: thanks.  I wil use extglob; but can you point out why my attempt is a non-solution?
T 1567761742 18<Soliton18>	because it excludes more than you want.
T 1567761753 18<Soliton18>	every file ending with 4 for example.
T 1567761981 18<geirha18>	and it will also exclude files ending with .mp3
T 1567762231 18<Patsie18>	and it will only list files with exactly 3 letter extensions
T 1567762261 18<Patsie18>	3 characters*
T 1567762306 18<fkl18>	ls !(*.mp4) exhibits one undesired behavior; and that is it it ls the contents of a subdirectory
T 1567762315 18<fkl18>	I want to suppress that behavior
T 1567762325 18<geirha18>	ls -d
T 1567762421 18<fkl18>	right; I've used that flag before.  Thanks!
T 1567767158 18<CaptainQuirk18>	Hi there ! I'm executing a small bash script that launches the urxvt terminal. The script itself is executed via a process launched in a small nodejs cli app
T 1567767186 18<CaptainQuirk18>	However, when executed from a urxvt terminal, instead of opening a new one, it uses the current one instead
T 1567767931 18<osse18>	CaptainQuirk: sounds like fancy logic inside urxvt itself.
T 1567767938 18<osse18>	maybe there's a urxvt --new-instance flag or whatever?
T 1567768064 18<CaptainQuirk18>	Apparently, the -hold flag is mandatory here
T 1567768098 18<CaptainQuirk18>	thanks anyhow ;-) !
T 1567768169 18<Kartagis18>	hello again
T 1567768185 18<Kartagis18>	how can I correctly do this? seq=$(seq 1 ${i})
T 1567768199 18<osse18>	!for((
T 1567768199 18<greybot18>	C-style for loop: for (( expr; expr; expr )); do COMMANDS; done # Each expr is done in a math context. Example: for ((i=1; i<=n; i++)); do echo "$i"; done. Use in place of the non-working: for i in {1..$number}
T 1567768370 18<CaptainQuirk18>	nay, it doesn't work actually ! It launches a new window but the command that I need to execute within is not executed
T 1567768454 18<Kartagis18>	osse: yes geirha told me about that, but this is my problem: I have ` for i in {1..${i}}; do wget "http://lorempixel.com/$2/$3" -o "$i.jpg"; done`  but when I do foo 5 900 600, it writes two files; {1..}.jpg and 600
T 1567768565 18<geirha18>	!pf ..$
T 1567768566 18<greybot18>	https://mywiki.wooledge.org/BashPitfalls#pf33 -- Don't do this! -- for i in {1..$n}
T 1567768579 18<Kartagis18>	whereas
T 1567768587 18<osse18>	Yes he told you about that. Now use it
T 1567768602 18<osse18>	Also, do you overwrite $i here?
T 1567768606 18<osse18>	or did you mean $1
T 1567768654 18<Kartagis18>	whereas `for (( i=0;i<$1;i++ )); do wget "http://lorempixel.com/$2/$3" -o "$i.jpg"; done`  writes the first 5 images, then 600.*
T 1567768724 18<osse18>	need to see the full code
T 1567768941 18<Kartagis18>	osse: it's currently http://paste.debian.net/1099192/
T 1567769456 18<osse18>	the loop itself forks just fine. you can do a rudimentary verification by just writing echo in front of wget
T 1567769464 18<osse18>	wget is doing something strange. i see it here too
T 1567769489 18<Kartagis18>	phew. I thought it was me.
T 1567769641 18<Kartagis18>	hrm, wget and curl are acting weird
T 1567769646 18<rafasc18>	not weird at all, it is doing what you asking
T 1567769655 18<rafasc18>	go check what -o does int he manpage.
T 1567769674 18<rafasc18>	you probably meant -O
T 1567769749 18<Kartagis18>	yay
T 1567769755 18<Kartagis18>	thanks a lot rafasc
T 1567769775 18<Kartagis18>	I don't know how -o got stuck in my head.
T 1567769799 18<rafasc18>	I know, curl.
T 1567770023 18<osse18>	Praise be
T 1567770025 18<ameliadolly18>	Hey
T 1567770032 18<osse18>	The rafasc must flow
T 1567770125 18<ameliadolly18>	Who want to dating with me and earn money join here http://kortlink.no/gYs
T 1567770208 18<rafasc18>	Kartagis: also, might be a good idea to store it under its <hash>.jpg and use something like --no-clobber, so you don't get duplicates
T 1567770400 18<ameliadolly18>	You can join in here for get money baby http://kortlink.no/gYs
T 1567770481 18<pj18>	!ops
T 1567770481 18<greybot18>	dreisner dualbus e36freak geirha greycat heiner izabera jipe koala_man lhunath maqr ormaaj osse pgas pragma- remote revdiablo Riviera Samus_Aran sunny sysfault TheBonsai twkm uniplex \amethyst
T 1567770649 18<peter2222218>	Hi folks! I try to push my time to my ssh server with ssh pi@172.16.10.19 "sudo date -s \"$(date)\""     but the doesnt seem to be valid... anybody an idea why it s not working?
T 1567770673 18<survietamine18>	!ssh
T 1567770673 18<greybot18>	Secure SHell (#openssh, http://mywiki.wooledge.org/CategorySsh). To run rm "$localVar" remotely, use: printf 'rm %q\n' "$localVar" | ssh user@host bash
T 1567770727 18<survietamine18>	why don't you just configure NTP and timezone properly?
T 1567770776 18<ameliadolly18>	Join and see the video naked I am here for free http://kortlink.no/gYs
T 1567770796 18<peter2222218>	the pis dont have internet access, so i wanted to frequently push the current date to them
T 1567770871 18<creme18>	hello #bash
T 1567770900 18<creme18>	i think i have a small issue on my bash script in line 55 [1]. anyone have a idea whats wrong here? thanks
T 1567770904 18<creme18>	[1] - https://git.envs.net/envs/ops/src/branch/master/bin/envs_user_updated.sh
T 1567770931 18<creme18>	this script generated a json file: https://envs.net/users_info.json
T 1567771052 18<pj18>	took long enough
T 1567771087 18<pj18>	!check
T 1567771088 18<checkbot18>	creme: Line 14: Parsing stopped here. Mismatched keywords or invalid parentheses?. Line 4: This { is literal. Check expression (missing ;/\n?) or quote it. Line 5: This { is literal. Check expression (missing ;/\n?) or quote it. See https://shellcheck.net/?id=cb71088
T 1567771111 18<pj18>	that might have tried to parse your json file
T 1567771127 18<pj18>	https://git.envs.net/envs/ops/src/branch/master/bin/envs_user_updated.sh
T 1567771130 18<pj18>	!check
T 1567771131 18<checkbot18>	pj: Unable to read that :/
T 1567771138 18<pj18>	heh, oookay
T 1567771144 18<creme18>	https://git.envs.net/envs/ops/raw/branch/master/bin/envs_user_updated.sh
T 1567771146 18<creme18>	!check
T 1567771147 18<checkbot18>	creme: Looks good to me
T 1567771204 18<creme18>	line 55 needs to exclude the "default string" - 'a short describtion or message'
T 1567771214 18<creme18>	but it dont work :/
T 1567771216 18<pj18>	creme: line 55?
T 1567771230 18<pj18>	perhaps because describtion is misspelled.
T 1567771375 18<creme18>	the output from: '/usr/local/bin/envs get desc' is: https://envs.sh/Qi.txt
T 1567771483 18<creme18>	then i try is diretly on my shell it works: https://envs.sh/Qw.txt
T 1567771498 18<pj18>	heh, so it's actually misspelled in the other program.
T 1567771614 18<pj18>	creme: well, for starters the first part of that if is redundant, and it ends up running envs twice on that line.
T 1567771649 18<pj18>	I would get rid of the [[ -n "$(/usr/local/bin/envs get desc)" ]] && part.  If that returns false then the second half will also return false and so the first test is not needed.
T 1567771663 18<pj18>	oh, sorry
T 1567771671 18<pj18>	not exactly true, the logic is wierd
T 1567771807 18<pj18>	you do realize that you're actually running that same command three times just to look at the output?  That's terribly inefficient, run it once and stash the result in a variable.
T 1567772376 18<AndrewPRS18>	hi there!!! I have a few files with    file1.txt file1.abc file1.cde .  How can I easily copy those files into file2.txt file2.abc and file2.cde respectively?
T 1567772395 18<AndrewPRS18>	I am looking at bash's grep capabilities or rename... but I cannot find an easy way
T 1567772401 18<AndrewPRS18>	I'm probably missing some bash feature
T 1567772819 18<creme18>	pj: i have "fix" some things. same issue :/
T 1567772821 18<creme18>	https://git.envs.net/envs/ops/src/branch/master/bin/envs_user_updated.sh
T 1567773509 18<Kumool18>	AndrewPRS: maybe if you have rename { rename s/file1\.(.+)/file2\.\1/g file1.* }
T 1567773520 18<Kumool18>	you can also use a for loop
T 1567773562 18<AndrewPRS18>	but that would only rename
T 1567773564 18<AndrewPRS18>	and not copy
T 1567773566 18<AndrewPRS18>	right?
T 1567773569 18<Kumool18>	ah
T 1567773571 18<Kumool18>	yes
T 1567773582 18<Kumool18>	for copying its gonna be trickier, you can use a for loop
T 1567773839 18<AndrewPRS18>	ugh
T 1567773839 18<AndrewPRS18>	:/
T 1567773851 18<AndrewPRS18>	bash syntax is so damn horrible :P
T 1567773923 18<geirha18>	yes. The trick is to just get used to it
T 1567773946 18<AndrewPRS18>	and in that case, in a for loop
T 1567773954 18<AndrewPRS18>	how can I grab the number and substitute it?
T 1567773981 18<AndrewPRS18>	for example:
T 1567774002 18<AndrewPRS18>	for file in file1.*; do cp "$file" _____ ; done
T 1567774017 18<AndrewPRS18>	how can I alter 1->2 in that spot
T 1567774017 18<geirha18>	in that case, you know the number is 1, so you can just replace with 2
T 1567774027 18<AndrewPRS18>	how?
T 1567774041 18<geirha18>	for file in file1.*; do echo cp "$file" "file2.${file#*.}"; done
T 1567774051 18<geirha18>	echo as a dry-run
T 1567774126 18<AndrewPRS18>	cp file1.* file2.*
T 1567774130 18<AndrewPRS18>	:/
T 1567774132 18<greycat18>	*sigh*
T 1567774167 18<greycat18>	for f in file1.*; do cp "$f" "file2.${f#file1.}"; done  # is what I *suspect* you want
T 1567774195 18<AndrewPRS18>	that doesnt work
T 1567774200 18<AndrewPRS18>	cp: cannot stat ‘file1.*’: No such file or directory
T 1567774200 18<greycat18>	Then what do you want?
T 1567774204 18<greycat18>	*sigh*
T 1567774207 18<AndrewPRS18>	looks like it is not expanding the *
T 1567774208 18<greycat18>	fucking SERIOUSLY?!
T 1567774222 18<Kumool18>	relax catman
T 1567774223 18<greycat18>	did you accidentally disable pathname expansion with set -f?
T 1567774224 18<f8e318>	how to start process with fixed ip to watch via ps in a external script?
T 1567774224 18<geirha18>	AndrewPRS: It means there are no matching files in the current directory
T 1567774231 18*	Kumool pets greycat
T 1567774240 18<greycat18>	If you didn't accidentally run set -f, then there are no matching files, as geirha said.
T 1567774243 18<greycat18>	And thus my reaction.
T 1567774269 18<AndrewPRS18>	oh it works
T 1567774269 18<AndrewPRS18>	:D
T 1567774287 18<AndrewPRS18>	yeah, i didn't have the files file1... etc
T 1567774290 18<AndrewPRS18>	it was density 1
T 1567774290 18<AndrewPRS18>	:P
T 1567774316 18<AndrewPRS18>	 in any case it is a weird way to report that
T 1567774317 18<Kumool18>	f8e3: what does that even mean?
T 1567774331 18<AndrewPRS18>	it looked like the glob wasnt working
T 1567774333 18<f8e318>	i try to do watchdog/supervision multiple server porcesses
T 1567774334 18<Kumool18>	you can use cp -v next time so you know it happened
T 1567774345 18<AndrewPRS18>	ok
T 1567774361 18<osse18>	AndrewPRS: if you think that is weird (I agree), you may want to shopt -s failgob. At least in interactive sessions
T 1567774370 18<osse18>	failglob
T 1567774380 18<greycat18>	failglob fail
T 1567774393 18<AndrewPRS18>	I read some document that was agains those kind of bash error reporting
T 1567774402 18<AndrewPRS18>	I read some in favor
T 1567774424 18<AndrewPRS18>	but.... apparently error reporting gets quite complex with pipes etc
T 1567774458 18<greycat18>	failglob means bash will complain about the missing files instead of whatever command (cp, ls, etc.) complaining about the missing files.  which could be good or bad.  the non-bash commands can give more focused error messages.
T 1567774509 18<AndrewPRS18>	even with failglob
T 1567774510 18<AndrewPRS18>	bash: no match: x1.*
T 1567774530 18<greycat18>	bash's error messages are generic, but consistent.
T 1567774557 18<AndrewPRS18>	by the way greycat, I think I was reading your guide
T 1567774563 18<AndrewPRS18>	https://mywiki.wooledge.org/BashGuide
T 1567774576 18<AndrewPRS18>	I found really nice tips there, thanks ;)
T 1567774588 18<AndrewPRS18>	although you can see I am a bit new :P
T 1567774596 18<greycat18>	most people here are new
T 1567774606 18<AndrewPRS18>	I try to avoid bash if I can .... I prefer python
T 1567774617 18<AndrewPRS18>	but whatever :P
T 1567774619 18*	rafasc grabs popcorn
T 1567774782 18<wwilliam18>	what could be wrong?  there are 2 sh names in that dir, please dont do !check I have added notes to the paste any suggestion is greatly appreciated i need those 2 sh in the shlist.  thank you.
T 1567774795 18<wwilliam18>	http://paste.debian.net/hidden/325f9190/
T 1567774890 18<greycat18>	You want to expand filenames into an array?  shlist=(*.sh)
T 1567774930 18<wwilliam18>	?
T 1567774939 18<greycat18>	.
T 1567775059 18<Riviera18>	!? > greycat
T 1567775059 18<greybot18>	greycat: A question mark indicates a sentence is a question. When you see a sentence directed at you terminated with this symbol, somebody has asked you a question and is waiting for you to answer it.
T 1567775062 18<Riviera18>	;D
T 1567775074 18<greycat18>	I answered it.
T 1567775085 18<Riviera18>	so you did :)
T 1567775086 18<wwilliam18>	Yes thank you
T 1567775089 18<wwilliam18>	greycat:
T 1567775102 18<wwilliam18>	as always im clueless testing.....
T 1567775156 18<geirha18>	It's an infinite loop. Why are you surprised that it never ends?
T 1567775198 18<wwilliam18>	ok let me remove the infinite loop
T 1567775209 18<wwilliam18>	what i need is that shlist populated.
T 1567775226 18<geirha18>	and add set -x inside the function
T 1567775235 18<greycat18>	Is shlist an array?  The name implies that it should be.  Do you want it populated with filenames that match a glob?  I told you precisely how to do that.
T 1567775265 18<wwilliam18>	printf '%s\n' *.sh
T 1567775290 18<greycat18>	you can use that to get an understanding of what would be used by the glob expansion
T 1567775313 18<wwilliam18>	OK
T 1567775317 18<wwilliam18>	Thanks.
T 1567775321 18<geirha18>	the loop you have >> "$1" on (where $1 is the shlist, which is a filename), never outputs anything
T 1567775330 18<greycat18>	oh, it's NOT an array?
T 1567775396 18<greycat18>	I could go on to ask something like "why are you writing the names of files into a file" but you will not answer, so why fucking bother.
T 1567775442 18<wwilliam18>	ok this is the task at hand:
T 1567775560 18<wwilliam18>	there are sh scripts in a dir, they show little by little as soon as one show i must execute it, once they have been executed, i must move them somewhere else so they dont get executed twice.
T 1567775567 18<wwilliam18>	example:
T 1567775580 18<rdz18>	hey all. how can i look up the reverse look up entry of a certain domain? i'm looking for something like the ping output, but i'd rather not parse the output of ping
T 1567775582 18<geirha18>	wcgw...
T 1567775613 18<rdz18>	for instance, i have 'google.com' and i want: zrh11s02-in-f4.1e100.net
T 1567775635 18<wwilliam18>	script a.sh
T 1567775636 18<greycat18>	rdz: your OS may provide tools like dig, host, dnsqr, getent, nslookup, etc.  Pick one.
T 1567775644 18<greycat18>	wwilliam: *plonk*
T 1567775644 18<wwilliam18>	scripta.sh
T 1567775652 18<wwilliam18>	scriptb.sh
T 1567775656 18<wwilliam18>	and so on.
T 1567775660 18<greycat18>	That goal is fucking ludicrous.  I will not even listen to it.
T 1567775668 18<wwilliam18>	well that is what they told me to do
T 1567775672 18<geirha18>	wwilliam: that really sounds like a terrible idea, but the problem with your code is that it never writes to this shlist file, so it will never contain any data
T 1567775674 18<mooasaurus18>	rdz: dig -x google.com
T 1567775677 18<wwilliam18>	and whats more stupid
T 1567775679 18<knstn18>	wwilliam: if you read the "arrays" sections in bashguide on wooledge, you can do it
T 1567775687 18<wwilliam18>	is that every one of those sh's
T 1567775697 18<wwilliam18>	is only one line with sh into it.
T 1567775720 18<rdz18>	mooasaurus, thanks, but that doesn't return what i requested.. or does it for you?
T 1567775772 18<rdz18>	greycat, thanks i know those tools, but wasn't able to achieve what i want with them easily
T 1567775797 18<greycat18>	you could start by explaining how you got the result "zrh11s02-in-f4.1e100.net" by hand, because it's not clear to me at all
T 1567775816 18<rdz18>	greycat, "ping google.com"
T 1567775827 18<greycat18>	wooledg:~$ ping google.com
T 1567775827 18<greycat18>	PING google.com (172.217.8.174) 56(84) bytes of data.
T 1567775827 18<greycat18>	64 bytes from ord37s08-in-f14.1e100.net (172.217.8.174): icmp_seq=1 ttl=51 time=8.59 ms
T 1567775830 18<greycat18>	64 bytes from ord37s08-in-f14.1e100.net (172.217.8.174): icmp_seq=2 ttl=51 time=8.19 ms
T 1567775838 18<rdz18>	returns: "64 bytes from zrh11s03-in-f14.1e100.net (172.217.168.14): icmp_seq=1 ttl=50 time=2.57 ms"
T 1567775874 18<rdz18>	greycat, obviously google.com resolves to different IPs, depending on country, i guess
T 1567775895 18<rdz18>	however, i'm interested in having the domain that ping is showing
T 1567775897 18<greycat18>	so you want the PTR record from whichever IPv4 address you happen to get at a particular moment?
T 1567775921 18<rdz18>	greycat, that's probably a more proper description of what i want.. yes
T 1567776006 18<greycat18>	well, you'd use whatever tools your OS provides, so your OS channel or #dns would be the best starting points
T 1567776025 18<rdz18>	greycat, thanks...i'll keep trying
T 1567776048 18<wwilliam18>	will this do?
T 1567776050 18<wwilliam18>	for x in ./*sh;do if [[ -f "$x" ]]; then sh "$x";fi;done && if [[ -f "$x" ]]; then mv "$x" shdone/ ;fi
T 1567776055 18<greycat18>	wooledg:~$ getent hosts google.com
T 1567776056 18<greycat18>	2607:f8b0:4009:803::200e google.com
T 1567776056 18<greycat18>	wooledg:~$ dig +short google.com
T 1567776056 18<greycat18>	wooledg:~$
T 1567776061 18<greycat18>	it's a fucking nightmare
T 1567776067 18<wwilliam18>	ah ok
T 1567776074 18<wwilliam18>	thanks will keep trying.
T 1567776171 18<rdz18>	this has the output I want, but are still many extra words: host -t PTR $(dig x +short google.com)
T 1567776215 18<Riviera18>	host and dig? :D
T 1567776248 18<greycat18>	wooledg:~$ dig @ebase-fla +short -x "$(dig @ebase-fla +short google.com)"
T 1567776248 18<greycat18>	ord37s09-in-f14.1e100.net.
T 1567776260 18<greycat18>	so, ONE of my resolvers gives me answers, and the other does not...
T 1567776296 18<Riviera18>	weird setup :)
T 1567776310 18<rdz18>	greycat, thanks.. that's much nicer than what i have
T 1567776322 18<greycat18>	the one that gives answers is running dnscache from djbdns
T 1567776331 18<greycat18>	the one that does not is running bind9 from debian 10
T 1567776367 18<mooasaurus18>	both masters?
T 1567776375 18<Riviera18>	for google.com? :D
T 1567776381 18<greycat18>	dnscache is a recursive resolver only, never a master
T 1567776454 18<greycat18>	Sep 06 09:27:15 svr5 named[3615]: broken trust chain resolving 'google.com/A/IN': 10.144.127.217#53
T 1567776463 18<greycat18>	well... this is very offtopic here.
T 1567776486 18<mooasaurus18>	dnssec maybe
T 1567776624 18<mooasaurus18>	might be able to test that theory by fiddling with the +dnssec flag
T 1567780936 20*	Disconnected (20)
T 1567780960 19*	Now talking on 22#bash
T 1567780960 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567780960 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567780961 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567781307 18<wwilliam18>	how can i avoid this to create an empty line at the end of shlist? printf '%s\n' ./*.sh
T 1567781308 18<wwilliam18>	http://paste.debian.net/hidden/7a200224/
T 1567781369 18<wwilliam18>	+ mv -v -- '' shdone/
T 1567781370 18<wwilliam18>	mv: cannot stat '': No such file or directory
T 1567781372 18<wwilliam18>	+ read -r s
T 1567781401 18<wwilliam18>	!check
T 1567781402 18<checkbot18>	wwilliam: Looks good to me
T 1567781443 18<kerframil18>	why are using printf at all? it should just be: for f in ./*.sh
T 1567781587 18<wwilliam18>	ok will change kerframil thank you.
T 1567781588 18<osse18>	wwilliam: the while read loop reads the whole output of the printf, including the newline. after the loop, echo adds another one
T 1567781598 18<osse18>	using -d '' seems wrong in this case
T 1567781621 18<wwilliam18>	ok thank you will adjust.
T 1567781642 18<greycat18>	but he has to put a list of filenames in a file, so he can transfer the file to another system, where he can use the filenames from that file to look up other filenames, and write those in a file, and move that second file to a third system...
T 1567781650 18<greycat18>	and you won't ever learn WHY
T 1567781694 18<wwilliam18>	in this case i have to execute the list of sh on shlist
T 1567781720 18<wwilliam18>	but i have to remove that empty line from shlist
T 1567781737 18<osse18>	I'll quote the song in the intro to the seconds season of The Leftovers: "I think I'll just let the mystery be"
T 1567781743 18<osse18>	*second
T 1567781798 18<osse18>	wwilliam: printf %s "$f" instead of echo "$f" then
T 1567781834 18<wwilliam18>	OK thank you.
T 1567781872 18<osse18>	but I would suggest you rewrite to use a for loop like kerframil suggested. Can move the "mv" inside
T 1567781878 18<kerframil18>	why is it being discussed in terms of "lines" at all?
T 1567781889 18<greycat18>	oh, poor kerframil
T 1567781895 18<wwilliam18>	OK
T 1567781904 18<kerframil18>	greycat: what am I getting myself into?
T 1567781923 18<osse18>	kerframil: millenia of secret society dealings
T 1567781939 18<kerframil18>	osse: that's certainly more than I bargained for.
T 1567847128 20*	Disconnected (20)
T 1567847150 19*	Now talking on 22#bash
T 1567847150 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567847150 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567847151 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567847336 18<kurahaupo18>	Because usually I want only *xxx* or *XXX*, not *xXx*, and likely that's what other people want too. There's enough guidance that they could write '*[Xx][Xx][Xx]*' instead if they really mean that.
T 1567848850 18<mangKANOR18>	How to remove additional text when my terminal starts so it starts in a clean state?
T 1567848863 18<mangKANOR18>	My terminal shows extra messages please refer to this image https://i.imgur.com/bv9tH69.png
T 1567849919 18<earnestly18>	Don't run `w' as part of your shell rc
T 1567851099 18<mangKANOR18>	earnestly thanks
T 1567856419 18<Razva18>	I would like to make a script that uses a file that I specify when executing the script. example: ./script.sh myfile.zip
T 1567856721 18<osse18>	Razva: inside the script you can refer to the file as "$1"
T 1567856773 18<Razva18>	if I already have a script that has `example="myfile.zip"` can I use `example="$2"` so I don't need to rewrite the entire script?
T 1567857025 18<osse18>	Razva: not entirely sure what you mean, but you can give several arguments and refer to them inside the script as "$1", "$2", ....
T 1567857029 18<osse18>	Or "$@" for all of them
T 1567857032 18<osse18>	!faq arg
T 1567857032 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/029 -- How can I display the target of a symbolic link?
T 1567857035 18<osse18>	oh
T 1567857038 18<osse18>	never mind that
T 1567862501 18<g0zzy18>	I'm having a great deal of difficulty removing 'punctuation' characters from files.  My latest effort involves rename "s/[^\w-_.]//g" but it has weird side effects. Before we get into that, is there are known way of doing this?
T 1567862722 18<{xmb}18>	what all punctation chars u wanna remove, are there many ?
T 1567862774 18<g0zzy18>	Could be anything. Latest nasties include backticks, circumflex
T 1567862807 18<{xmb}18>	maybe make a whitelist like a-z
T 1567862825 18<{xmb}18>	or find fitting charmaps on google and parse them etc
T 1567862827 18<g0zzy18>	If i use an inclusive pattern it causes all sorts of quoting problem
T 1567862848 18<{xmb}18>	thats syntax usage err
T 1567862887 18<{xmb}18>	btw rename ".." u pasted, inside " instead of ' u need \\w instead or \w whatever w is
T 1567862899 18<g0zzy18>	Yes, of course. The exclusive one above should probably do it, but i get a (probably Perl) error
T 1567863044 18<g0zzy18>	fwiw, here's the error: False [] range "\w-" in regex; marked by <-- HERE in m/[^\w- <-- HERE _.]/ at (eval 8) line 1.
T 1567863077 18<{xmb}18>	i can only offer s/[^a-zA-Z0-9 ]+//g and similiar
T 1567863152 18<{xmb}18>	maybe use :alnum: .. and other stuff id not know so much
T 1567863205 18<g0zzy18>	Thanks, i might get rid of \w. Think it doesn't like that
T 1567863221 18<{xmb}18>	=)
T 1567863521 18<{xmb}18>	try your \w thing inside single instead of double quotes
T 1567864717 18<g0zzy18>	Actually single quotes still produce the error
T 1567865050 18<mknod18>	  <g0zzy> Could be anything. Latest nasties include backticks, circumflex
T 1567865074 18<mknod18>	That's much more than just punctuation. Good luck with that.
T 1567865209 18<{xmb}18>	alnum space somehow
T 1567865216 18<mknod18>	Some versions of iconv may help to strip out the diacritics, among other tools needed here. But you best bet is using another language imho.
T 1567865632 18<g0zzy18>	Actually the 'longhand' version of \w is working OK for now
T 1567869072 20*	Disconnected (20)
T 1567869094 19*	Now talking on 22#bash
T 1567869094 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1567869094 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1567869106 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1567871100 18<chowbok18>	I'm writing a script that needs to issue this command:
T 1567871102 18<chowbok18>	mpc search '(GENRE == "instrumental")'
T 1568013689 20*	Disconnected (20)
T 1568013711 19*	Now talking on 22#bash
T 1568013711 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568013711 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568013711 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568013969 18<rafasc18>	ls3dev33: what about sed -n '/^1234|/p' /scripts/epg/Schedule.txt ?
T 1568014013 18<ls3dev3318>	will try sed
T 1568014020 18<ls3dev3318>	how about with multiple items
T 1568014030 18<ls3dev3318>	like search this,this,this,this,this within file
T 1568014109 18<lopid18>	##sed
T 1568015102 18<rafasc18>	ls3dev33: Never had grep gobble that much memory, maybe splitting the file into multiple pieces, would help to determine what input is causing that...
T 1568019120 18<pigeon12318>	Dump > $((  % 10 )).tar         dash exit after this.    bash carries on.
T 1568019224 18<Soliton18>	why does dash exit?
T 1568019251 18<pigeon12318>	arithmetic expression: expecting primary "  % 10"
T 1568019267 18<Soliton18>	and what does bash say?
T 1568019267 18<pigeon12318>	I'm surprised
T 1568019281 18<pigeon12318>	bash: operand expected
T 1568019287 18<Soliton18>	what did you expect?
T 1568019304 18<pigeon12318>	I expected bash to carry on. I was surprised by dash
T 1568019662 18<earnestly18>	What do you mean by "carry on"?
T 1568019669 18<pigeon12318>	Next line
T 1568019737 18<earnestly18>	It's as if dash has set -e set
T 1568019753 18<pigeon12318>	I know about that. It doesn't
T 1568019764 18<earnestly18>	Hm
T 1568019796 18<earnestly18>	I can reproduce it in bash
T 1568019806 18<geirha18>	# bash -c $'echo $(( % 10 ))\necho $? still here'
T 1568019808 18<shbot18>	geirha: bash: % 10 : syntax error: operand expected (error token is "% 10 ")
T 1568019808 18<shbot18>	geirha: 1 still here
T 1568019811 18<geirha18>	# dash -c $'echo $(( % 10 ))\necho $? still here'
T 1568019812 18<shbot18>	geirha: dash: 1: arithmetic expression: expecting primary: " % 10 "
T 1568019815 18<geirha18>	yup
T 1568019842 18<geirha18>	# bash -o posix -c $'echo $(( % 10 ))\necho $? still here'
T 1568019843 18<shbot18>	geirha: bash: % 10 : syntax error: operand expected (error token is "% 10 ")
T 1568019851 18<pigeon12318>	Oh
T 1568019854 18<geirha18>	and in posix mode it behaves the same as dash
T 1568019869 18<earnestly18>	geirha: bash -c 'echo foo > $(( % 10)).tar; echo hello' # this doesn't print hello, but if I changed echo foo to `ls' or some other command, it does
T 1568019956 18<geirha18>	Hm. I get the same behavior with builtins and external commands
T 1568019981 18<geirha18>	# bash -c $'echo > $(( % 10 ))\necho $? still here'
T 1568019982 18<shbot18>	geirha: bash: % 10 : syntax error: operand expected (error token is "% 10 ")
T 1568019982 18<shbot18>	geirha: 1 still here
T 1568019986 18<geirha18>	# bash -c $'ls > $(( % 10 ))\necho $? still here'
T 1568019987 18<shbot18>	geirha: bash: % 10 : syntax error: operand expected (error token is "% 10 ")
T 1568019987 18<shbot18>	geirha: 1 still here
T 1568020029 18<geirha18>	ah, but you used ; instead of newline, maybe that's the determining factor
T 1568020069 18<geirha18>	indeed. When using a builtin, it throws away the whole line
T 1568022241 18<nvz18>	how to move and merge say a .config/ with ~/.config/
T 1568022249 18<nvz18>	or move an quash/overwrite
T 1568022343 18<nvz18>	I'd improperly rsync'd a homedir and done mv user/* . and mv user/.* . which seems to have fixed all but three dotdirs that exist
T 1568022423 18<nvz18>	the goal was migrating the user's data from an old machine to a new fresh install
T 1568022619 18<nvz18>	I've just rm -rf the dirs and then moved the old ones but I was trying to get the right proceedure into my head :P
T 1568026141 18<ricks_18>	Hi, is it normal to set an incrementing variable in a for loop to -1 so the first variable is included? ex
T 1568026143 18<ricks_18>	AZ=( {a..z} ); X=($(echo "1 2 3")); Y=${#X[@]}; for ((i=-1; i<$Y; i++)); do    echo "${AZ[i+1]},${X[i+1]}"; done
T 1568026207 18<ricks_18>	or should i just be using [i] instead of [i+1]
T 1568026305 18<falconindy18>	just use i.
T 1568026309 18<falconindy18>	initialize to 0
T 1568026318 18<kerframil18>	no, I would not describe that as normal. if your subscripts are always +1, what's the point? also, -1 has a special meaning as a subscript so it could be dangerous.
T 1568026348 18<kerframil18>	# arr=(1 2 3); echo "${arr[-1]}"
T 1568026349 18<shbot18>	kerframil: 3
T 1568026375 18<kerframil18>	i+1, I meant.
T 1568026392 18<ricks_18>	oh, didn't know about that last bit, thanks
T 1568026465 18<kerframil18>	also: for i in "${!X[@]}"; do ...
T 1568026491 18<ricks_18>	ha, much simpler
T 1568026495 18<kerframil18>	will iterate over the actual indices. even with a sparse array.
T 1568027200 18<Abdullah18>	How can I print 0 to screen if there are no files in some directory?
T 1568027296 18<kerframil18>	do you need to do anything with the files that were counted afterwards?
T 1568027442 18<Abdullah18>	kerframil: yeah.
T 1568027470 18<kerframil18>	using an array is a good fit then.
T 1568027533 18<kerframil18>	# shopt -s nullglob; mkdir empty; files=(empty/*); if (( ${#files[@]} == 0 )); then echo 0; else declare -p files; fi
T 1568027534 18<shbot18>	kerframil: 0
T 1568027558 18<kerframil18>	# shopt -s nullglob; mkdir nonempty; touch nonempty/{foo,bar,baz}; files=(nonempty/*); if (( ${#files[@]} == 0 )); then echo 0; else declare -p files; fi
T 1568027559 18<shbot18>	kerframil: declare -a files=([0]="nonempty/bar" [1]="nonempty/baz" [2]="nonempty/foo")
T 1568027561 18<Abdullah18>	kerframil: what I wanna achieve is LIKE if there are some files in maildir, I should get an output like 0 mails or 10 mails
T 1568027579 18<kerframil18>	so you don't actually need to do anything with the files after counting them.
T 1568027594 18<kerframil18>	well, you can still use an array anyway, among other methods.
T 1568027601 18<Abdullah18>	yeah, I just want an output for another program
T 1568028025 18<kerframil18>	Abdullah: if you just want a regular file count, maybe this will be easier for you to understand (as long as your find supports the -printf option): find /path/to/dir -type f -printf . | wc -c
T 1568028053 18<kerframil18>	ergo, print a dot for each file and count the characters.
T 1568028105 18<kerframil18>	there's a lot more detail here:
T 1568028107 18<kerframil18>	!faq 4
T 1568028107 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/004 -- How can I check whether a directory is empty or not?  How do I check for any *.mpg files, or count how many there are?
T 1568028153 18<Abdullah18>	kerframil: lemme check but I'm sure the other C program isn't gonna accept the `|`
T 1568028188 18<kerframil18>	but this is bash, right?
T 1568028205 18<Abdullah18>	I'm redirecting the output to C program.
T 1568028213 18<kerframil18>	what is its expected input?
T 1568028260 18<Abdullah18>	https://git.suckless.org/slstatus/file/components/run_command.c.html
T 1568028276 18<Abdullah18>	lemme try it
T 1568028288 18<falconindy18>	lolz popen
T 1568028305 18<falconindy18>	popen invokes a shell, so you can cram whatever nonsense you want in there.
T 1568028417 18<kerframil18>	so it will tolerate '|'
T 1568028605 18<Abdullah18>	accepted. Can't I append `mails` to output?
T 1568028979 18<kerframil18>	echo "$(find ... | wc -l) mails"
T 1568028982 18<kerframil18>	er, wc -c
T 1568030333 18<oskie18>	is there a command that would sleep until some wall clock time, that isn't a daemon like crontab/at?
T 1568030352 18<{xmb}18>	you'd maybe script it yourself
T 1568030434 18<oskie18>	yeah, i'm currently calculating the difference in seconds and sleeping, but if there is some change in server clock, time synch or other thing, it may be off
T 1568030450 18<{xmb}18>	bash-5.0$ echo sleep $(( $( date -d 'Mon, Sep  9, 2019  4:59:46 PM' +%s ) - $( date +%s ) ))
T 1568030451 18<{xmb}18>	sleep 10745
T 1568030464 18<{xmb}18>	before it was 1:59 for 4:59 changed to see
T 1568030497 18<oskie18>	sleep --until='tomorrow 07:00' <- that'd be nice
T 1568030512 18<{xmb}18>	yea but no utilities support such
T 1568030515 18<{xmb}18>	they are out of date
T 1568030554 18<{xmb}18>	bash-5.0$ echo sleep $(( $( date -d 'tomorrow 7 am' +%s ) - $( date +%s ) ))
T 1568030554 18<{xmb}18>	sleep 61053
T 1568030595 18<knstn18>	That video yesterday gave me ideas: So if i have a file, can i import all the strings inside it, in a indexed array, do my manipulations/patter matching on the array, and "flush" back the elements of the array?
T 1568030611 18<geirha18>	while sleep 10; do printf -v now '%(%Y-%m-%d %H:%M:%S)T' -1; [[ $now < '2019-09-09 16:59:46' ]] || break; done
T 1568030628 18<{xmb}18>	no understood yer non code knstn
T 1568030707 18<knstn18>	question 1: i have a text file with 3 strings. can i insert those strings into an array with 3 elements?
T 1568030714 18<{xmb}18>	yes
T 1568030716 18<kerframil18>	knstn: mapfile
T 1568030718 18<{xmb}18>	whats the data looking like
T 1568030746 18<knstn18>	question 2: if i have an array with 3 elements, can i "flush" them into a text file?
T 1568030761 18<geirha18>	mapfile -t lines < file; ....; printf '%s\n' "${lines[@]}" > newfile
T 1568030764 18<kerframil18>	printf '%s\n' "${array[@]}" > file
T 1568030767 18<{xmb}18>	kerf, do u know in mapfile -C what var to use for the data read ? or is it just array_name
T 1568030793 18<knstn18>	okay, that's all i wanted to know
T 1568030800 18<geirha18>	-C is for callbacks. I don't see why that would be needed or wanted here
T 1568030823 18<{xmb}18>	mapfille -c 1 -C 'arr["$this_one_element"]=work' ..
T 1568030845 18<{xmb}18>	i tried serialize code, but im stuck at 'dont know which var - or is it only array_name specified as last arg to mapfile'
T 1568030872 18<geirha18>	{xmb}: it passes arguments to the callback, so you'll want to use a function
T 1568030886 18<{xmb}18>	err arguments nice i gotta test
T 1568030895 18<kerframil18>	but you can still define the array name
T 1568030917 18<{xmb}18>	works perfectly
T 1568030927 18<{xmb}18>	thxx big time
T 1568031006 18<{xmb}18>	# declare -gA arr; mapfile -t -c 1 -C 'arr["$1"]=' <<<$'one\ntwo'; [[ -v arr['two'] ]]; printf -- %d\\n "$?"
T 1568031009 18<shbot18>	{xmb}: bash: `arr["$1"]': not a valid identifier
T 1568031010 18<shbot18>	{xmb}: bash: 0: command not found
T 1568031010 18<shbot18>	{xmb}: etc... ( http://ix.io/1UF5 )
T 1568031013 18<{xmb}18>	sorries
T 1568031039 18<geirha18>	$1 only makes sense if you put it in a function
T 1568031071 18<{xmb}18>	echo "$# - $@" worked fine in my tests
T 1568031120 18<{xmb}18>	actually there is side effect, '++i arg' is its output
T 1568031131 18<geirha18>	# _callback() { arr[$2]=; }; declare -A arr=(); mapfile -c1 -C _callback -t <<< $'foo bar\nbaz'; declare -p arr
T 1568031132 18<shbot18>	geirha: declare -A arr=(["foo bar"]="" [baz]="" )
T 1568031251 18<{xmb}18>	ah i get it, the data gets appeneded to the callback code
T 1568031275 18<{xmb}18>	then its <callback> <number of times ran or similiar> <current data args>
T 1568031302 18<geirha18>	_callback index arg
T 1568031319 18<{xmb}18>	yes, or arg[s]
T 1568031323 18<{xmb}18>	er
T 1568031326 18<geirha18>	just one arg
T 1568031335 18<{xmb}18>	thanks big time, fast help ++ilike
T 1568031365 18<{xmb}18>	with the need of function spawning it seems not so efficient
T 1568031370 18<{xmb}18>	ill benchmark somewhen
T 1568031393 18<geirha18>	might as well just loop the array after it's done reading
T 1568031410 18<geirha18>	because the indexed array will be populated regardless
T 1568031419 18<kerframil18>	or use while/read in the first place
T 1568031423 18<{xmb}18>	maybe yes, ill benchmark when i feel better
T 1568032518 18<ELFrederich18>	Hi, I'd like to read the documentation on the bash builtin "read", but "man read" is giving me the manpage for the C function.  I tried running "man -k read"  but it seems there is only read (2)?
T 1568032545 18<Soliton18>	!man
T 1568032545 18<greybot18>	bash builtins and keywords do not have separate man-pages, read bash's manual instead or use the help builtin. Rule of thumb: If ''type foo'' says foo is a builtin or keyword, run ''help foo'' or ''man bash'', otherwise try man and/or info.
T 1568032572 18<ELFrederich18>	help read... got it, thanks
T 1568032683 18<ELFrederich18>	hmm... I can't get read -i to work or I'm not understanding what it's supposed to do
T 1568032732 18<Soliton18>	are you using -e as well?
T 1568032755 18<ELFrederich18>	Soliton: no... I'll try now
T 1568032793 18<ELFrederich18>	Soliton: what is the benefit of using -e (other than to get -i to work as well)?
T 1568032826 18<Soliton18>	you get readline features.
T 1568032858 18<geirha18>	e.g. history with up-down arrow, and basic tab completion
T 1568032860 18<ELFrederich18>	Soliton: oh, like pressing the arrow keys
T 1568032862 18<ELFrederich18>	cool, got it
T 1568034488 18<ELFrederich18>	is there a way to have commented interleaved with multi-line commands?
T 1568034511 18<ELFrederich18>	For instance, I have some notes where I want to "apt install" a bunch of packages, but I'd like some little one line notes about why each one is required.
T 1568034513 18<greycat18>	you mean *inside* a multi-line command?  not really, unless that command happens to be an array assignment.
T 1568034541 18<greycat18>	ok, for this specific case, you could put all the package names in an array assignment, and have comments in the array assignment.
T 1568034555 18<greycat18>	then after that, apt-get install "${pkgs[@]}"
T 1568034572 18*	ELFrederich googles bash array assignment
T 1568034730 18<KekSi18>	it's declare -a myArray=( # and now you can have as many lines with comments behind the package names as you want followed by the closing bracket at some point )
T 1568034766 18<greycat18>	pkgs=(
T 1568034769 18<greycat18>	  foo1.2
T 1568034771 18<greycat18>	  bar-dev
T 1568034781 18<greycat18>	  # we don't want bar2-dev because blah blah blah
T 1568034781 18<greycat18>	)
T 1568034792 18<KekSi18>	quick reminder tho: that array can get too long to be executed in a single apt install call
T 1568034831 18<KekSi18>	check ${myarray[#]} to see how long it is
T 1568034883 18<kerframil18>	that's not a valid expansion.
T 1568034892 18<greycat18>	you mean "${#pkgs[@]}"
T 1568034894 18<greycat18>	!faq 5
T 1568034895 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/005 -- How can I use array variables?
T 1568034929 18<KekSi18>	err yes, that's where the hash goes, sorry
T 1568034955 18<Soliton18>	the array size will not tell you if the expanded array is too much for ARG_MAX anyway.
T 1568035014 18<KekSi18>	no, but you could for example decide on using 10 things at a time for example
T 1568035028 18<greycat18>	you can make that decision if it actually becomes an issue
T 1568035057 18<greycat18>	it should also be pointed out that if you're trying to duplicate a package set from one Debian system to another Debian system, you should ask #debian how to use --get-selections
T 1568038823 18<julius_18>	hi
T 1568038830 18<A_buh18>	hello
T 1568038837 18<julius_18>	how can i check if the  word "root" appears two times in here:  output="$(ls -alh /boot/ | awk 'BEGIN { FS=" " }; {print $4}')" ?
T 1568038848 18<also_uplime18>	!ls > julius_
T 1568038849 18<greybot18>	julius_: DO NOT USE ls' output for anything. ls is a tool for interactively looking at directory metadata. Any attempts at parsing ls' output with code are broken. Globs are much more simple AND correct: ''for file in *.txt''. Read http://mywiki.wooledge.org/ParsingLs
T 1568038850 18<julius_18>	or at least  two times
T 1568038857 18<greycat18>	what are you actually trying to do?
T 1568038875 18<also_uplime18>	also, that BEGIN { FS=" " } can just be shortened to awk -F " "
T 1568038879 18<julius_18>	parsind the output from nova list
T 1568038885 18<greycat18>	count the number of files in /boot owned by group "root"?
T 1568038889 18<mnemonic18>	exist some issue on declare a local var and setup the value at same time running a command? like:  local myvar=$(external_command)  can have some problem with it? or is better i setup: local myvar; myvar=$(external_command) ?
T 1568038892 18<also_uplime18>	although awk automatically splits on whitespace anyways
T 1568038897 18<julius_18>	the example was a try to dump it down
T 1568038905 18<julius_18>	i know, its just  an example
T 1568038917 18<also_uplime18>	mnemonic: if you don't care about the exit status then local foo=$(bar) is fine
T 1568038922 18<julius_18>	my cuzrrent output is "ACTIVE ACTIVE" and i need to count the  number of actives in there
T 1568038927 18<also_uplime18>	if you do care about the exit status, then you'll want to split it u
T 1568038929 18<also_uplime18>	up
T 1568038965 18<mnemonic18>	also_uplime: indeed, thank you
T 1568039031 18<also_uplime18>	sure
T 1568039033 18<osse18>	julius_: grep -c maybe
T 1568039035 18<julius_18>	 test="$( nova list | awk 'BEGIN { FS = "|" } ; {print $4}')"         <- that returns "ACTIVE ACTIVE"   - how do you cound the ACTIVES and get a integer in return=?
T 1568039096 18<osse18>	test="$( nova list | awk 'BEGIN { FS = "|" } $4 == "ACTIVE" { actives++ } END { print actives })"
T 1568039100 18<greycat18>	without knowing what "nova list" is, or what the output of "nova list" looks like, or how it *could* look, and all the possible caveats, how do you expect anyone to answer this?
T 1568039136 18<julius_18>	but i told you what is in $test   .... "ACTIVE ACTIVE" isnt that enough?
T 1568039233 18<julius_18>	theres a example for nova list at the top:  https://stackoverflow.com/questions/39055651/how-to-get-only-id-name-and-networks-fields-from-openstack-nova-list
T 1568039288 18<greycat18>	OK, first question, and this is hugely important: is there ANY WAY to get that output in a different format that doesn't have ASCII art line drawing around it?
T 1568039338 18<greycat18>	could be "csv format" output, or "json format" output, or simply some option like --no-boxes ...
T 1568039407 18<julius_18>	sorry timeout...
T 1568039412 18<julius_18>	i got it:   {print $4}' | grep -c ACTIVE
T 1568039483 18<greycat18>	OK, first question, and this is hugely important: is there ANY WAY to get that output in a different format that doesn't have ASCII art line drawing around it?
T 1568039487 18<greycat18>	could be "csv format" output, or "json format" output, or simply some option like --no-boxes ...
T 1568039592 18<A_buh18>	ahem
T 1568039644 18<A_buh18>	can anyone tell me where i can unset the HISTFILE (i'll even settle for HISTSIZE) variable in bash?
T 1568039654 18<A_buh18>	i'm trying to get a very specific kind of behavior for my workflow
T 1568039677 18<mingdao18>	$HOME/.bashrc
T 1568039686 18<greycat18>	scrolling down that stackoverflow page, it says "the -f allows you to pick output format csv, html, json, table, value, yaml."
T 1568039712 18<A_buh18>	i'm glad you mentioned that mingdao. HISTFILE isn't stored there.
T 1568039722 18<A_buh18>	when i look in the file i mean
T 1568039732 18<also_uplime18>	it can be stored anywhere. you can still unset it there
T 1568039805 18<mingdao18>	A_buh: man bash has some good explanations
T 1568039825 18<greycat18>	HISTFILE is set automatically, so you're just *un*setting it
T 1568039960 18<A_buh18>	yeah... according to the manpage greycat is right... it is set automatically. in my particular scenario, i need to actually find out *where* that happens...
T 1568039973 18<greycat18>	it happens inside bash
T 1568039992 18<Soliton18>	julius_: awk can count.
T 1568040089 18<A_buh18>	inside bash? like before any scripts are loaded?
T 1568040130 18<greycat18>	wooledg:~$ bash --norc --noprofile
T 1568040131 18<greycat18>	bash-5.0$ echo "$HISTFILE"
T 1568040131 18<greycat18>	/home/wooledg/.bash_history
T 1568040143 18<A_buh18>	oh
T 1568040154 18<A_buh18>	that is so annoying
T 1568040167 18<greycat18>	if you want to unset it in .bashrc, just go ahead and do that
T 1568040266 18<A_buh18>	i'm trying to get my terminal to ask me if i want to set it or unset it every time i load it up
T 1568040312 18<greycat18>	that sounds horribly annoying
T 1568040316 18<greycat18>	why would you do that to yourself
T 1568040318 18<A_buh18>	but more importantly, i would like it not to be so annoying
T 1568040373 18<also_uplime18>	A_buh: just unset it if you dont want it. it doesn't really matter where its set
T 1568040395 18<A_buh18>	what i *really* want is to run some kind of terminal invocation command that would set the variable depending on the profile that i run the terminal in
T 1568040423 18<greycat18>	what's a "profile" in this context, and how can bash know the value of this "profile"?
T 1568040574 18<A_buh18>	bash is a silly monster that gets woken up by gnome-terminal
T 1568040613 18<greycat18>	GNOME is in the picture.  Oh joy.
T 1568040632 18<greycat18>	are you talking about an XDG_* session thingy or some kind?
T 1568040637 18<greycat18>	of*
T 1568040656 18<A_buh18>	i don't think so
T 1568040687 18<A_buh18>	in my case, bash is invoked by gnome-terminal with the command ' sh -c "unset HISTFILE; bash" '
T 1568040699 18<greycat18>	that won't work.
T 1568040702 18<A_buh18>	exactly
T 1568040714 18<greycat18>	bash does not CARE what HISTFILE variable was or was not in the environment of its parent
T 1568040722 18<Soliton18>	so set some other variable and use it in .bashrc.
T 1568040880 18<Soo_Slow18>	sometimes names of files/folders contain '" symbols (and basically everything else, allowed by ext4/linux). Is it possible to unbreak their paths? (e.g make script work correctly even is something like that appears on its way)
T 1568040912 18<Soliton18>	there is a bug in your script if such filenames break it.
T 1568040912 18<greycat18>	Quote correctly, never use xargs without -0, and use -- where needed in case of files that begin with - and you should be OK in most cases.
T 1568040945 18<Soliton18>	if quotes break it that sounds like some kind of injection.
T 1568040960 18<greycat18>	Could be, yes.
T 1568040970 18<greycat18>	eval, ssh, scp, rsync
T 1568041076 18<A_buh18>	Soliton: some other variable? as in create another variable and set HISTFILE to whatever it is?
T 1568041108 18<Soliton18>	sure, why not.
T 1568041160 18<Soliton18>	an env variable of course.
T 1568041176 18<greycat18>	I'm still very unclear on what the goal is.
T 1568041178 18<A_buh18>	right, because export wouldn't work
T 1568041178 18<Soliton18>	you also may want to use exec to avoid that sh process.
T 1568041198 18<Soliton18>	why would export not work?
T 1568041211 18<A_buh18>	because HISTFILE is not an env variable
T 1568041215 18<greycat18>	"because I only tested in on HISTFILE which bash of course overrides"
T 1568041380 18<A_buh18>	yeah greycat bash does not respect export
T 1568041410 18<A_buh18>	at least not when it comes to variables that are not env variables
T 1568041423 18<Soliton18>	what does that even mean.
T 1568041440 18<A_buh18>	it makes sense. i'll show it
T 1568041443 18<greycat18>	It means he only tested it on HISTFILE and it didn't work so he assumed it applies to other things.
T 1568041445 18<Soliton18>	env variable work just fine bash or not.
T 1568041481 18<A_buh18>	no, export only works on variables in env
T 1568041486 18<also_uplime18>	wut
T 1568041486 18<Soliton18>	obviously if you choose the name of a special bash variable then it will do however that variable works.
T 1568041504 18<A_buh18>	$ env | grep -i hist
T 1568041505 18<A_buh18>	HISTSIZE=1000
T 1568041513 18<greycat18>	...
T 1568041514 18<Soliton18>	export is what you use to make a variable an env variable.
T 1568041522 18<greycat18>	What are you trying to do?
T 1568041531 18<Soliton18>	!env
T 1568041531 18<greybot18>	Bash has two types of variables. Shell Variables (foo=bar) live in the running shell and are copied to subshells. Environment Variables (export foo=bar) are special variables that live in a PROCESS and are copied to each new process it creates. They are used the same way but CREATED differently. Env vars are NOT system-wide or "shared" in any way. http://mywiki.wooledge.org/Environment
T 1568041545 18<A_buh18>	$ set | grep -i histfile
T 1568041546 18<A_buh18>	HISTFILESIZE=2000
T 1568041548 18<A_buh18>	_=HISTFILE
T 1568041636 18<Soliton18>	sh -c 'MYHISTFILE=foo exec bash'  and in .bashrc:  HISTFILE=$MYHISTFILE  perhaps that does what you want.
T 1568041693 18<greycat18>	Or, perhaps he could *explain* what he's doing, what a "profile" is, how .bashrc could identity which "profile" is in play, and go from there.
T 1568041703 18<Soliton18>	or make a special rc file for each project you have or whatever it is you're doing.
T 1568041907 18<A_buh18>	greycat: i'm on gnome. what i mean by profile is literally the thing that says "Profile Preferences" in the terminal GUI (gnome-terminal in my case)
T 1568041910 18<saint_18>	I'm using this to generate passwords in bash: openssl rand -base64 10 , is there any other way to make sure I can get 10 chars, with restrictions (uppercases, lowercases, special char, and digits) from bash ? or do i need to use perl or python ?
T 1568041933 18<greycat18>	So you can't or won't explain how gnome works to people you *know* don't use gnome, so we can't help you much.
T 1568041950 18<A_buh18>	greycat: the idea is that my terminal handles the shortcuts to launch a profile and it would be nice to have the behavior of bash launch with a different theme depending on whether history is being logged or not
T 1568041984 18<greycat18>	So you have something called a "shortcut", which is... a thing you click with the mouse?  And it does... what?  Is there a *.desktop file involved?
T 1568042036 18<greycat18>	How do you configure this "shortcut", and what powers are available to you?
T 1568042080 18<greycat18>	saint_: run it in an infinite loop and keep rejecting ones that you don't like
T 1568042094 18<greycat18>	break out of out the loop when you're happy
T 1568042098 18<saint_18>	greycat nothing easier ..?!
T 1568042104 18<greycat18>	!pwgen
T 1568042106 18<saint_18>	greycat like a one command line ?
T 1568042107 18<greybot18>	pwgen <http://sourceforge.net/projects/pwgen/> generates passwords. Use that instead of whatever Rube Goldberg contraption you were trying to make.
T 1568042114 18<A_buh18>	yeah. for example, ctrl-shift-t
T 1568042120 18<saint_18>	greycat i ll check it out, thanks
T 1568042151 18<greycat18>	A_buh: you press Ctrl-Shift-T with the mouse focused on ... whatever ... and it reads ... what?  A *.desktop file?  Some variable stored in dbus?
T 1568042156 18<A_buh18>	it's nothing complicated. i can literally just use alt-tab and ctrl-shift-t/n
T 1568042186 18<A_buh18>	greycat: that's... actually a very good point. i have no idea how gnome-terminal launches this
T 1568042266 18<greycat18>	googling leads me to https://help.gnome.org/users/gnome-terminal/stable/adv-keyboard-shortcuts.html.en which seems to point to Shift-Ctrl-T being a special sequence only inside "Terminal" which I'm assuming is their internal name for gnome-terminal
T 1568042300 18<greycat18>	so if you're *ALREADY INSIDE* a gnome-terminal, and you press Ctrl-Shift-T then it does this "new tab" thing, and that's what you are talking about?
T 1568042314 18<greycat18>	not launching a brand new instance of gnome-terminal from the root window?
T 1568042387 18<A_buh18>	yes
T 1568042416 18<A_buh18>	i mean, it would be great to have the second one as well, but it's not done so often that i would absolutely *need* it
T 1568042439 18<A_buh18>	just picture green terminals and red terminals
T 1568042464 18<greycat18>	how do you tell it whether the new tab should be green or red?
T 1568042471 18<A_buh18>	if i launch ctrl-shift-n or whatever, the terminal i launched from becomes the same color
T 1568042507 18<A_buh18>	it should just be the same as the one you launched it from
T 1568042516 18*	greycat REOPENS the fucking gnome terminal documentation page ...
T 1568042529 18<A_buh18>	if i launch from a green one, i get a green one... and i can alt tab to a red one to launch a red one
T 1568042533 18<greycat18>	so... Shift-Ctrl-N is "new window", which I am guessing means "send a message to dbus and request a new gnome-terminal"
T 1568042573 18<greycat18>	this sounds like a line of questioning for #gnome
T 1568042632 18<greycat18>	"How can I configure GNOME to have two different 'colors' of gnome-terminal windows, such that if I press Ctrl-Shift-N from a 'red' window I get a new 'red' window, or from a 'green' window I get a new 'green' window?"
T 1568042644 18<A_buh18>	well, that part is already handled
T 1568042651 18<greycat18>	...
T 1568042658 18<greycat18>	HOW IS IT HANDLED
T 1568042665 18<A_buh18>	i have two profiles
T 1568042672 18<greycat18>	WHAT IS A FUCKING PROFILE
T 1568042706 18<greycat18>	HOW DOES IT WORK?  HOW DOES THE SHELL KNOW WHICH PROFILE YOU'RE IN?
T 1568042720 18<greycat18>	IS THERE SOME ENVIRONMENT VARIABLE THAT GETS SET?
T 1568042744 18<A_buh18>	dammit. it happens higher, above bash
T 1568042757 18<greycat18>	That's FINE.  How does it WORK?  What is the VISIBLE DIFFERENCE?
T 1568042760 18<A_buh18>	the profile is the thing that invokes bash
T 1568042774 18<greycat18>	Is there DOCUMENTATION?
T 1568042793 18*	greycat tries google, since this A_buh search engine is rubbish
T 1568043102 18<A_buh18>	greycat: a profile is just an abstraction for invoking bash. the behavior i'm trying to achieve is that some environment variable get set
T 1568043139 18<greycat18>	Well, google is telling me that "gnome-terminal profiles" are a clicktastic piece of shit inherited from the mindset of a Windows user who has never seen a text file, and you configure it by clicking shit, but they don't tell you what all the choices and powers are in the docs...
T 1568043155 18<greycat18>	... and it's actually stored in gconf, except wait, they changed it to dconf now.
T 1568043173 18<rafasc18>	greycat: they're just a collection of settings. You can specify things like run htop instead of bash. Etc.
T 1568043174 18<greycat18>	So, go ask #gnome.
T 1568043181 18<rafasc18>	Anyways, this has nothing to do with bash itself.
T 1568043198 18<greycat18>	rafasc: can you tell it "set an environment variable to tell my shell which profile is in effect in this tab/window"?
T 1568043210 18<A_buh18>	oh, crap. this is useful info. thanks.
T 1568043223 18<A_buh18>	do you mind me asking what windowing system you are using?
T 1568043228 18<greycat18>	I use fvwm.
T 1568043241 18<greycat18>	although "windowing system" I guess is X11.
T 1568043275 18<A_buh18>	just searched for fvwm. that thing looks awesome.
T 1568043292 18<greycat18>	you configure it by editing a text file with a text editor
T 1568043316 18<heyitsrama18>	is there a text editor you would recommend? :p
T 1568043329 18<greycat18>	whichever one you like
T 1568043351 18<heyitsrama18>	(
T 1568043517 18<greycat18>	wikipedia says "When GNOME Terminal starts, it can be configured to launch the user's default shell or run a custom command."  So apparently using a custom command is one of the things you can do in a "profile".  Too bad the FUCKING GNOME DOCUMENTATION doesn't bother saying that.
T 1568043540 18<greycat18>	Can your custom command simply be "env MYPROFILE=red bash"?
T 1568043570 18<greycat18>	That would stick an environment variable into bash's environment, and then you can refer to that in .bashrc to control the HIST* variables or whatever else you want.
T 1568043598 18<rafasc18>	greycat: it has some concept of "current profile", so if you launch another thing, it will inherit the "active" profile. But I don't think it is exported as a variable or anything like that.
T 1568043608 18<rafasc18>	a quick google points to some hacks: https://unix.stackexchange.com/a/336259
T 1568043613 18<A_buh18>	greycat: god dammit we both came to the same idea
T 1568043634 18<rafasc18>	I don't use this, xterm is good enough for me.
T 1568045049 18*	knstn grumpy mondays
T 1568047863 18<Jonta18>	Is there a list of what the different error tokens mean? "syntax error: operand expected (error token is "%")" here. Websearches pull up StackExchange-hits with different tokens, resulting from people's example scripts. And there are specific solutions, but not general ones
T 1568047893 18<also_uplime18>	probably help to show your code
T 1568047906 18<greycat18>	The % is where the parser was, in your input. when it got confused.
T 1568047928 18<koala_man18>	it's not the equivalent of an error code
T 1568047935 18<greycat18>	# echo $(( 10 - % ))
T 1568047936 18<shbot18>	greycat: bash: 10 - % : syntax error: operand expected (error token is "% ")
T 1568047936 18<Soliton18>	probably some math context with a variable that is not a number.
T 1568047963 18<greycat18>	yeah, also happens if you try to do $((10 - 5%))
T 1568048039 18<sabo11_18>	I have about 1000 servers each with a unique password and various usernames.  I have an excel spreadsheet with 3 columns servername, username, password.  I need to ssh into each server and run a script.
T 1568048061 18<greycat18>	Security.  You should learn what it is.
T 1568048065 18<sabo11_18>	One method I was thinking about implementing is putting each column into an array and then iterating through the arrays.
T 1568048070 18<Jonta18>	Damn. Got it: Was sure one of the inputs was an int, but instead, it was a string. Ending in "%". Thank you
T 1568048082 18<Soliton18>	!faq valid
T 1568048083 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/054 -- How can I tell whether a variable contains a valid number?
T 1568048088 18<also_uplime18>	technically almost everything in bash is a string
T 1568048121 18<Soliton18>	you need to validate stuff you put into math context or bad things may happen.
T 1568048220 18<Jonta18>	Thanks for the link. shellcheck didn't complain, but it's good to know what the error token actually *is*. Searched for that as well
T 1568048242 18<also_uplime18>	its saying it ran into an error when parsing the token "%"
T 1568048257 18<also_uplime18>	its not some special error code labeled as %
T 1568048289 18<Jonta18>	Got it
T 1568048335 18<koala_man18>	if you are doing math on values from variables, shellcheck has a hard time detecting whether or not the variable contains a valid number
T 1568048412 18<Jonta18>	rafasc: It seems m4 suits my needs, btw. Thanks for the suggestion. :)
T 1568048547 18<sabo11_18>	https://pastebin.com/TpwbU27e
T 1568048548 18<pasteban18>	Paste is available without ads on http://pastebin.com/raw/TpwbU27e
T 1568048553 18<sabo11_18>	maybe like this?
T 1568048583 18<Soliton18>	!check
T 1568048583 18<checkbot18>	sabo11_: Line 8: Couldn't find 'done' for this 'do'. Line 8: Scripts are case sensitive. Use 'do', not 'Do'. Line 12: Expected 'done' matching previously mentioned 'do'. See https://shellcheck.net/?id=cb48583 for all 5 issues.
T 1568048587 18<also_uplime18>	no, not like that
T 1568048591 18<also_uplime18>	not in bash anyways
T 1568048623 18<sabo11_18>	expect?
T 1568048631 18<sabo11_18>	can expect handle arrays?
T 1568048645 18<greycat18>	expect is an entirely different programming language
T 1568048649 18<greycat18>	!expect
T 1568048649 18<greybot18>	expect (http://expect.sf.net/) is a tool for scripting terminal applications in tcl, join #tcl for help. Alternative tools exist in most languages, for a shell version see http://empty.sf.net
T 1568048666 18<also_uplime18>	you should really be using ssh keys though
T 1568048703 18<sabo11_18>	I am setting up ansible with ssh keys but I first need to login to run the key installation script'
T 1568048704 18<greycat18>	His botnet isn't that advanced.  His brute force password cracker just produces a spreadsheet.
T 1568048794 18<sabo11_18>	I also have a playbook to install the ssh keys but I need to get past the first login with the old U/N and pass
T 1568048838 18<rafasc18>	Jonta: good luck. That thing is very powerful and kind of ugly. But it gets the job done if you know how to use it.
T 1568048862 18<sabo11_18>	thanks for the tip about empty.  I have not heard of that
T 1568049919 18<wwilliam18>	is int this suppose to print?
T 1568049922 18<wwilliam18>	# Check if we can go into appdir. If not, output an error and exit the script.
T 1568049923 18<shbot18>	wwilliam: bash: Check: command not found
T 1568049923 18<wwilliam18>	cd "$appdir" || { echo "Please create the appdir and try again" >&2; exit 1; }
T 1568049941 18<wwilliam18>	if $appdir dows not exist?
T 1568049965 18<kerframil18>	yes.
T 1568049980 18<kerframil18>	or if unable to enter the directory for some other reason.
T 1568049986 18<vishal18>	# appdir=/foo; cd "$appdir" || { echo "Please create the appdir and try again" >&2; exit 1; }
T 1568049990 18<shbot18>	vishal: bash: cd: /foo: No such file or directory
T 1568049990 18<shbot18>	vishal: Please create the appdir and try again
T 1568049990 18<shbot18>	vishal: etc... ( http://ix.io/1UGj )
T 1568050004 18<wwilliam18>	root@debian:~#cd "$appdir" || { echo "Please create the appdir and try again" >&2; exit 1; }
T 1568050005 18<wwilliam18>	root@debian:~#
T 1568050016 18<also_uplime18>	looks like it succeeeded then
T 1568050024 18<also_uplime18>	or you're using some weird shell
T 1568050024 18<kerframil18>	appdir isn't set, most probably
T 1568050052 18<also_uplime18>	oh interesting, cd "" is the same as cd .
T 1568050068 18<wwilliam18>	I understand the command like this if cd dont work echo blah blah no?
T 1568050083 18<kerframil18>	it did work though. the problem is, just not in the way you expect.
T 1568050084 18<vishal18>	the command is fine, your variable is empty
T 1568050095 18<kerframil18>	you could protect against this pitfall with cd "${appdir:?}"
T 1568050106 18<kerframil18>	it will then complain loudly if appdir is empty or unset.
T 1568050113 18<wwilliam18>	ok thank you all
T 1568050133 18<wwilliam18>	that is what i thought that even if the var was not set it will echo.
T 1568050163 18<kerframil18>	however, if you do use the above method, the shell will just exit immediately. you'll never see your decorative error.
T 1568050165 18<vishal18>	it doesn't because 'cd' doesn't fail for an empty argument (for the better or the worse..)
T 1568050182 18<kerframil18>	so, in fact, you may just prefer to have an explicit check that appdir is non-empty prior - if it matters.
T 1568050185 18<kerframil18>	dealer's choice.
T 1568050218 18<wwilliam18>	cd "${appdir:?}" || { echo "Please create the appdir and try again" >&2; exit 1; }
T 1568050220 18<wwilliam18>	-su: appdir: parameter null or not set
T 1568050228 18<also_uplime18>	if [[ ! -d $appdir ]]; then err; else cd "$appdir"; fi
T 1568050241 18<greycat18>	you *still* have to check whether the cd succeeds
T 1568050262 18<also_uplime18>	true
T 1568050313 18<vishal18>	a directory with +r but -x ? :)
T 1568050332 18<greycat18>	or owned by root, 700, and you are not root, or any number of other scenarios
T 1568050339 18<also_uplime18>	if [[ ! -d $appdir ]]; then err "please make directory"; elif ! cd "$appdir"; then err; fi
T 1568050358 18<wwilliam18>	for an idiot like me the following should be:  Set a var name appdir with a dir that do not exist then:
T 1568050359 18<wwilliam18>	# Check if we can go into appdir. If not, output an error and exit the script.
T 1568050361 18<shbot18>	wwilliam: bash: Check: command not found
T 1568050361 18<wwilliam18>	cd "$appdir" || { echo "Please create the appdir and try again" >&2; exit 1; }
T 1568050399 18<also_uplime18>	wwilliam: that is what it is. your cd command succeeded, which means appdir exists and you can cd to it, or its not set
T 1568050455 18<wwilliam18>	for purposes of info there shoulb be a note with what you mentioned.. also_uplime
T 1568050493 18<wwilliam18>	the problem with guys like you that know it all is that you assume stupid noobs people also know what you know....
T 1568050506 18<wwilliam18>	so this statement i dont think is accurate:
T 1568050529 18<kerframil18>	I don't think anyone would dispute that it's a good idea to comment code that may not be easily understood by the reader at a later time.
T 1568050541 18<also_uplime18>	are you expecting cd to tell you if the variable is unset?
T 1568050543 18<wwilliam18>	This guide is targeted at beginning users. It assumes no advanced knowledge -- just
T 1568050544 18<wwilliam18>	the ability to login to a Unix-like system and open a command-line (terminal)
T 1568050546 18<wwilliam18>	interface.
T 1568050629 18<wwilliam18>	no also_uplime I am expecting whoever wrote that particular piece in the guide that the var must be set with an unexisting dir for the sample to work idiot wise , like me
T 1568050636 18<greycat18>	If the variable being empty should be treated as an error condition, then it should be explicitly checked.
T 1568050646 18<wwilliam18>	and I am pretty sure I am not the only idiot.
T 1568050648 18<greycat18>	[[ $appdir ]] || die "appdir is not set, please edit the config"
T 1568050656 18<greycat18>	cd "$appdir" || die "couldn't cd to the appdir"
T 1568050968 18<gordonfish18>	'<also_uplime> oh interesting, cd "" is the same as cd .' ;  cd "" results in '-bash: cd: : No such file or directory' for me
T 1568050978 18<greycat18>	which version?
T 1568051006 18<greycat18>	I can't reproduce it in bash 2.05b
T 1568051009 18<also_uplime18>	# cd ""; pwd
T 1568051010 18<shbot18>	also_uplime: /root
T 1568051014 18<gordonfish18>	bash 4.4.12, on a debian server I happened to be working on
T 1568051014 18<Sven_vB18>	http://mywiki.wooledge.org/BashFAQ/117 should show how to make a helper function that prints its pid, then execs the feeder, and another that reads one line (the feeder pid), exports it and execs the filter.
T 1568051024 18<gordonfish18>	2.05b??
T 1568051057 18<greycat18>	one of the oldest ones I can easily check
T 1568051091 18<gordonfish18>	I have that on my home system (for historical/testing purposes)
T 1568051092 18<greycat18>	root@megview4:~# echo "$BASH_VERSION"
T 1568051092 18<greycat18>	4.4.12(1)-release
T 1568051092 18<greycat18>	root@megview4:~# cd ""
T 1568051092 18<greycat18>	root@megview4:~#
T 1568051148 18<gordonfish18>	bash2-2.05b# cd "" ---> bash2: cd: : No such file or directory
T 1568051171 18<greycat18>	there's something nonstandard in your setup that's causing this... maybe a CDPATH variable
T 1568051197 18<gordonfish18>	I have no such variable defined
T 1568051266 18<also_uplime18>	what does `bash --norc --noprofile -c "cd /tmp; cd ''; pwd" say
T 1568051273 18<also_uplime18>	erm
T 1568051281 18<scx18>	Anyone knows autotools here?
T 1568051285 18<Jonta18>	Yes
T 1568051286 18<greycat18>	##workingset
T 1568051295 18<also_uplime18>	pretending i didnt forge the closing `
T 1568051471 18<Jonta18>	Best way of POSIXly appending characters to a string? I'm building a progress bar. I have the while-loop, but += is undefined in POSIX
T 1568051487 18<greycat18>	x="${x}foo"
T 1568051923 18<gordonfish18>	also_uplime: that command gives me '/tmp' for both bash 2, 3, 4, and 5. (bash 1 Gives '--: bad option')
T 1568052072 18<Soliton18>	so something in your interactive shell breaks cd.
T 1568052090 18<greycat18>	you can try --norc and --noprofile individually to work out which one's doing it, possibly
T 1568052127 18<greycat18>	but with "bash" (or "bash3.2" or whatever), it should be a non-login shell, so it shouldn't be reading profile anyway
T 1568052144 18<gordonfish18>	Ah, found it. alias cd='cd -P'
T 1568052151 18<gordonfish18>	\cd "" works fine
T 1568052160 18<greycat18>	amusing
T 1568052170 18<gordonfish18>	\cd -P "" is what yields -bash: cd: : No such file or directory
T 1568052186 18<greycat18>	cd -L "" works but cd -P "" complains
T 1568052201 18<greycat18>	might be worth a bug report
T 1568052209 18<gordonfish18>	That is a very old alias that I've had in my bashrcs since perhaps 2001
T 1568053442 18<Jonta18>	x="${x}foo" worked. Thank you
T 1568054367 18<iowenovcw18>	hi, i'm a novice at scripting and am having a problem debugging a simple script to rip cds (w/cdparanoia) ; convert them to .flac -8 ; remove the .wav tracks ; then launch picard & (in the bg)
T 1568054378 18<iowenovcw18>	should i put the script on pastebin?
T 1568054407 18<greycat18>	maybe you should use one of the existing tools, like abcde, instead of writing your own
T 1568054425 18<iowenovcw18>	yes, well give a man a fish and he eats for a day.
T 1568054438 18<iowenovcw18>	https://pastebin.com/9whY749h
T 1568054438 18<pasteban18>	Paste is available without ads on http://pastebin.com/raw/9whY749h
T 1568054439 18<checkbot18>	iowenovcw: I think the problem is on line 19. Bash doesn't support variables in brace range expansions. See 6 issues on https://shellcheck.net/?id=cb54438
T 1568054622 18*	knstn AI is taking over
T 1568054642 18<iowenovcw18>	ok, so if that is the case, i.e., that i cannot put variables in the brace range expression, how do i work around the for i in {01...$tracks} ?
T 1568054674 18<greycat18>	!faq zero
T 1568054674 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/018 -- How can I use numbers with leading zeros in a loop, e.g. 01, 02?
T 1568054692 18<iowenovcw18>	no, that isn't the problem
T 1568054697 18<greycat18>	Yes.  Yes, it is.
T 1568054701 18<greycat18>	That is PRECISELY the problem.
T 1568054732 18<greycat18>	if you had written {1..$tracks} then I would have given an entirely different answer.
T 1568054768 18<greycat18>	But you wrote {01..$tracks} no wait, you wrote {01...$tracks} with three dots, so you have one extra dot, but you ALSO wanted leading zeroes, so the simple answer wouldn't suffice.  Thus the FAQ.
T 1568054799 18<iowenovcw18>	sorry, it doesn't have 3 dots in the actual script, it was an irc typo
T 1568054815 18<greycat18>	The leading zero is what makes it no longer a simple question to answer, so the FAQ is appropriate.
T 1568055088 18<iowenovcw18>	what is %03d ?
T 1568055123 18<greycat18>	printf format specifier.  d is decimal, 3 is three character width, 0 is zero-padded.
T 1568055141 18<greycat18>	# printf %03d 42
T 1568055142 18<shbot18>	greycat: 042
T 1568055150 18<iowenovcw18>	got it.
T 1568055177 18<Jonta18>	# printf %03d 1234
T 1568055178 18<shbot18>	Jonta: 1234
T 1568055192 18<iowenovcw18>	#printf %-8d df
T 1568055195 18<iowenovcw18>	#printf %-8d 12
T 1568055201 18<greycat18>	the bot needs a space after the #
T 1568055206 18<iowenovcw18>	# printf %-8d 12
T 1568055207 18<shbot18>	iowenovcw: 12
T 1568055219 18<iowenovcw18>	why didn't it pad with '-'s?
T 1568055228 18<greycat18>	because printf doesn't do that
T 1568055232 18<iowenovcw18>	i see
T 1568055251 18<iowenovcw18>	so it looks like what i'm missing here is this eval step?
T 1568055259 18<greycat18>	# printf -v tmp %8d 12; echo "${tmp// /-}"
T 1568055260 18<shbot18>	greycat: ------12
T 1568055509 18<ash_worksi18>	sometimes you can do IFS='|' .... like in a `while read`; but not most of the time. I was under the impression this set the IFS for the following command; is that right? when is it applicable?
T 1568055552 18<greycat18>	X=y foo       places the variable X with value y in the temporay environment of command foo
T 1568055592 18<greycat18>	IFS='|' read -r a b      places IFS with value | in the temp env of command read.  read happens to use IFS, so that works.
T 1568055609 18<greycat18>	if you place IFS in the environment of some command that does NOT use IFS, then nothing special happens
T 1568055696 18<ash_worksi18>	okay, so why doesn `IFS='|' echo "${arr[*]}", echo the contents of arr joined by '|' ?
T 1568055701 18<ash_worksi18>	doesn't*
T 1568055723 18<greycat18>	because echo doesn't use IFS, and it wouldn't have anything to apply it to anyway, because you only gave echo one argument
T 1568055742 18<greycat18>	the "${arr[*]}" expansion is done by the shell, not by echo
T 1568055744 18<ash_worksi18>	but add a semicolon, and it DOES join
T 1568055750 18<ash_worksi18>	oh
T 1568055756 18<greycat18>	yes, because now you've set IFS for the whole shell
T 1568055760 18<ash_worksi18>	I see
T 1568055922 18<iowenovcw18>	eval for i in '{01..$tracks}'; does not seem to be doing the trick and i don't see another answer in the faq.
T 1568055924 18<iowenovcw18>	what am i missing?
T 1568055940 18<greycat18>	You can't eval a for loop that easily.
T 1568055952 18<ash_worksi18>	so, IFS='|' read -r foo bar <<<"$*" will not expand $* using % because the shell doesn't know about the IFS since it's local to `read` ?
T 1568055957 18<greycat18>	you'd have to put the WHOOOOOOLE loop in an argument and eval that WHOLE thing
T 1568055971 18<greycat18>	ash_worksi: correct
T 1568055986 18<iowenovcw18>	i assume that I won't want to put the WHOOOOOOLE loop into the eval?
T 1568055992 18<greycat18>	I sure as hell wouldn't.
T 1568056027 18<greycat18>	slightly less insane would be to put the loop body in a function and then use   eval 'for i in {01..$tracks}; do myfunc "$i"; done'
T 1568056044 18<greycat18>	I still wouldn't do that, either.  I'd use printf.
T 1568056047 18<{xmb}18>	greycat on eval =))
T 1568056054 18<armin18>	=)
T 1568056067 18<iowenovcw18>	?  for i in $(seq 1 $END); do echo $i; done
T 1568056080 18<greycat18>	if you want it to work only on Linux, seq is an option
T 1568056095 18<greycat18>	you forgot the zero-padding option, whatever it is
T 1568056112 18<iowenovcw18>	i'm just looking at a stackoverflow example
T 1568056114 18<armin18>	-w
T 1568056133 18<greycat18>	oh, I screwed up the quoting in the eval, too.  Because as I said, it's only SLIGHLY less insane.
T 1568056153 18<Soliton18>	!seq
T 1568056154 18<greybot18>	seq(1) is nonstandard, inefficient and useless. For bash2.04+/zsh/ksh93, use for ((i = 1; i <= 10; i++)); do ..., bash3.0+, use for i in {1..10}, for POSIX and other shells, see !counting
T 1568056159 18<greycat18>	slightly less insane would be to put the loop body in a function and then use   eval 'for i in {01..'"$tracks"'}; do myfunc "$i"; done'
T 1568056213 18<iowenovcw18>	anything that is POSIX standard will work in bash?
T 1568056237 18<greycat18>	yes, but for some of the *truly* esoteric posix features, you may have to turn on strict posix mode
T 1568056246 18<iowenovcw18>	!counting
T 1568056246 18<greybot18>	Basic loops: Bash/Zsh/ksh93: «for ((i = 0; i < 10; i++)); do ...; done», For small constants: «for i in {0..9}; do ...; done» ksh: «i=0; while ((i++ < 10)); do ...; done», POSIX: «i=0; while [ "$i" -lt 10 ]; do ...; i=$((i + 1)); done» http://mywiki.wooledge.org/BashGuide/TestsAndConditionals#Conditional_Loops
T 1568056282 18<ash_worksi18>	since when did greybot start french-quoting things
T 1568056283 18<ash_worksi18>	?
T 1568056303 18<greycat18>	it just repeats what it's told
T 1568056312 18<iowenovcw18>	ok, so for POSIX standard I forgo the while loop and add a counter variable and increment it myself.
T 1568056334 18<ash_worksi18>	since when did greycat start telling greybot things using french-quotes? *
T 1568056336 18<greycat18>	why the FUCK would you try to write this CD-ripping-and-encoding-and-playing script in posix sh
T 1568056373 18<iowenovcw18>	i don't know, i wasn't planning to, i'm trying to understand why it said, "for POSIX and other shells, see !counting"
T 1568056439 18<ash_worksi18>	thanks greycat
T 1568056443 18<ash_worksi18>	o/
T 1568056728 18<{xmb}18>	# e=2 b=0; i="$b"; while (( ++i <= e )); do printf -- %02d "$i"; done
T 1568056729 18<shbot18>	{xmb}: 0102
T 1568057222 18<iowenovcw18>	ok, so if printf is the solution.... where am i going wrong with?  for i in {01..'printf %02d $tracks'};
T 1568057240 18<iowenovcw18>	or do i need to abandon the for loop in favor of a while loop?
T 1568057293 18<{xmb}18>	erm, {..} expansion doesnt work with vars or specials, only literals
T 1568057311 18<emg18>	!cfor > iowenovcw
T 1568057311 18<greybot18>	iowenovcw: C-style for loop: for (( expr; expr; expr )); do COMMANDS; done # Each expr is done in a math context. Example: for ((i=1; i<=n; i++)); do echo "$i"; done. Use in place of the non-working: for i in {1..$number}
T 1568057344 18<emg18>	# tracks=3; for ((i = 1; i <= tracks; i++)); do printf %02d\\n "$i"; done
T 1568057345 18<shbot18>	emg: 01
T 1568057345 18<shbot18>	emg: 02
T 1568057345 18<shbot18>	emg: 03
T 1568057351 18<emg18>	iowenovcw: ^^
T 1568057364 18<greycat18>	for ((i=1; i<=tracks; i++)); do printf -v trackno %02d "$i"; whatever "$trackno"; done
T 1568057422 18<greycat18>	if the zero-padding were not required, then my ORIGINAL answer to the ORIGINAL question would have been simply   for ((i=1; i<=tracks; i++)); do whatever "$i"; done
T 1568057446 18<{xmb}18>	you can pad it in the loop whats the problem
T 1568057449 18<greycat18>	but you can see how much complexity the zero-padding added to the question
T 1568057488 18<{xmb}18>	# e=10 b=8; i="$b"; while (( ++i <= e )); do printf -- %02d "$i"; done
T 1568057489 18<shbot18>	{xmb}: 0910
T 1568057510 18<greycat18>	I'm not a fan of that while ((++i <= e)) construction
T 1568057552 18<{xmb}18>	you can aswell write it in your for loop, just pad via printf in the looped code, no need for fancy eval {..$var}
T 1568057681 18<iowenovcw18>	how do i look up the C-style for loop?
T 1568057686 18<greycat18>	!cfor
T 1568057686 18<greybot18>	C-style for loop: for (( expr; expr; expr )); do COMMANDS; done # Each expr is done in a math context. Example: for ((i=1; i<=n; i++)); do echo "$i"; done. Use in place of the non-working: for i in {1..$number}
T 1568057696 18<iowenovcw18>	because i don't understand ^^
T 1568057759 18<iowenovcw18>	is i++ another way of writing i+1?
T 1568057765 18<greycat18>	# for ((i=2; i<=10; i+=2)); do printf '%s ' "$i"; done
T 1568057766 18<shbot18>	greycat: 2 4 6 8 10
T 1568057779 18<greycat18>	i++ is another way of writing i+=1 which is another way of writing i=i+1
T 1568057794 18<{xmb}18>	i++ and ++i
T 1568057797 18<greycat18>	at least in cases where you're not using the value of the expression
T 1568058080 18<iowenovcw18>	# tracks = 16 for ((i=1; i<=$tracks; i++)); do flac -8 track'printf '%02d' "$i"; done
T 1568058081 18<shbot18>	iowenovcw: bash: syntax error near unexpected token `('
T 1568058088 18<greycat18>	!guide > iowenovcw
T 1568058088 18<greybot18>	iowenovcw: http://mywiki.wooledge.org/BashGuide or in PDF: http://s.ntnu.no/bashguide.pdf
T 1568058125 18<{xmb}18>	track01 is then the desired 'there' ?
T 1568058143 18<greycat18>	I'm skeptical of many things, above and beyond the many obvious syntax errors there.
T 1568058160 18<greycat18>	you've already ripped the files by the time you call flac, right?  so why not just iterate over the filenames?
T 1568058186 18<{xmb}18>	tracks=16 b=0; while (( ++b <= tracks )); do flac -8 track"$( printf -- %02d "$b" )"; done
T 1568058188 18<iowenovcw18>	ok, i don't understand how to make printf %02d work inside of flac -8 track##.cdda.wav -o name##.flac
T 1568058236 18<{xmb}18>	in the loop you printf -v var %02d "$num", then u use "$var" where in filenames or data
T 1568058238 18<greycat18>	oh, because you also want to CHANGE the output filenames from whatever the ripper produced.
T 1568058244 18<greycat18>	that... almost makes sense
T 1568058269 18<iowenovcw18>	in the particular example, i ripped "come dance with the kinks"
T 1568058274 18<greycat18>	15:29  greycat> for ((i=1; i<=tracks; i++)); do printf -v trackno %02d "$i"; whatever "$trackno"; done
T 1568058344 18<iowenovcw18>	so it has 16 tracks...  cdparanoia -B puts out the tracks as track##.cdda.wav  and then yes, they'll be ripped by the time flac -8 sees them.  i'm changing them from track to $name just to make it easier in picard.  $name will be one alpha word.
T 1568058398 18<{xmb}18>	you can use any existing ripping software solution already exisiting
T 1568058407 18<greycat18>	I also said this. ;-)
T 1568058418 18<iowenovcw18>	yes, i understand that.,
T 1568058421 18<iowenovcw18>	that isn't the point.
T 1568058422 18<{xmb}18>	so where u get the names of the tracks from
T 1568058445 18<{xmb}18>	is -8 quality to flac ? u wanna encode then wav to flac and the filename like track01 - foo bar title.flac
T 1568058452 18<iowenovcw18>	cdparanoia puts them out as track01.cdda.wav .. track16.cdda.wav
T 1568058467 18<iowenovcw18>	-8 is quality in flac.
T 1568058482 18<{xmb}18>	so what u wanna do with those files then, as i said encode to flac with filename containing title or just trackn
T 1568058487 18<mnemonic18>	what the diff between [[ "$var" ]] and [[ -n "$var" ]] ?
T 1568058497 18<koala_man18>	mnemonic: nothing
T 1568058513 18<mnemonic18>	koala_man: oh, ok, thanks
T 1568058553 18<andecy18>	Hello
T 1568058558 18<{xmb}18>	hi
T 1568058643 18<iowenovcw18>	if all i wanted to do was to get this done, i would just keep using what I had been doing which was running the commands together on the command line:
T 1568058643 18<iowenovcw18>	cdparanoia -B ; eject ; for i in {01..16}; do flac -8 track$i.cdda.wav -o kinks$i.flac && rm track$i.cdda.wav ; done ; picard &
T 1568058657 18<iowenovcw18>	i would like to learn how to make a script that is useful to me.
T 1568058680 18<andecy18>	I have a question, I want to have the option of using the last command stdout without executing the command again. how can this be done?
T 1568058680 18<{xmb}18>	# >'track03.cdda.wav'; for f in *wav; do printf -- %s "${f//@(track|.cdda*)}"; done
T 1568058681 18<shbot18>	{xmb}: 03
T 1568058701 18<Soliton18>	!$( > andecy
T 1568058701 18<greybot18>	andecy: Command Substitution: "$(cmd "foo bar")" causes the command 'cmd' to be executed with the argument 'foo bar' and "$(..)" will be replaced by the *output*. See http://mywiki.wooledge.org/BashFAQ/002 and http://mywiki.wooledge.org/CommandSubstitution
T 1568058710 18<twkm18>	save it to a file, perhaps with tee.
T 1568058741 18<{xmb}18>	andecy '!!' is the last command, if hist expansion is on or something
T 1568058743 18<greycat18>	andecy: if you ALREADY ran the command, if it's TOO LATE to run a different command, then just grab and paste it with the mouse.
T 1568058760 18<andecy18>	Can I write a "hook" and source it to run automatically every time a command is run?
T 1568058771 18<{xmb}18>	what u trying to do
T 1568058781 18<greycat18>	there is no magical command that can retroactively go back in time and figure out which characters on your terminal came from a command and which were printed by a shell as a prompt, etc.
T 1568058806 18<mnemonic18>	to test if an array isn´t empty i can do (( ${#arr[@]} != 0 )) or (( ${#arr[@]} > 0 ))  both ways are ok right?
T 1568058819 18<greycat18>	YOU can figure that out because you're an intelligent being.  So use your magical powers and your mouse (or terminal-based keystrokes) to grab the chars YOU believe are the correct ones.
T 1568058842 18<andecy18>	I want that every time I execute a command, it's output will be saved into a file and i could access this output via another command
T 1568058847 18<greycat18>	mnemonic: yes, or simply  ((${#arr[@]}))
T 1568058868 18<greycat18>	andecy: that is not possible.
T 1568058870 18<andecy18>	just the last command
T 1568058877 18<mnemonic18>	greycat: thanks
T 1568058887 18<greycat18>	andecy: not without seriously hacking the shell at the C level, anyway
T 1568059038 18<{xmb}18>	there is duplicate command output
T 1568059063 18<{xmb}18>	maybe bash has a 'dont exe this command cause DEBUG trap code said so' option
T 1568059136 18<{xmb}18>	# trap 'eval "$BASH_COMMAND &>"$BASH_COMMAND.$((++r))"' DEBUG; exec >/dev/null 2>&1; ls; cat ls.1
T 1568059137 18<shbot18>	{xmb}: bash: debug trap: line 1: unexpected EOF while looking for matching `"'
T 1568059137 18<shbot18>	{xmb}: bash: debug trap: line 2: syntax error: unexpected end of file
T 1568059140 18<greycat18>	If we hypothesize some magical construct that intercepts your command, and runs it with output piped through tee, this will *still* change the behavior of the commands that you typed.  Many, many commands act differently when their stdout is a pipe instead of a terminal.
T 1568059238 18<andecy18>	That good thinking right there
T 1568059242 18<andecy18>	thats*
T 1568059386 18<{xmb}18>	# trap 'eval "$BASH_COMMAND" &>"$BASH_COMMAND.$EPOCHREALTIME"' DEBUG; ls -A; cat ls*
T 1568059390 18<shbot18>	{xmb}:  .bashrc   .mkshrc  'ls -A.1568059387.249785'
T 1568059391 18<shbot18>	{xmb}: .bashrc
T 1568059391 18<shbot18>	{xmb}: etc... ( http://ix.io/1UGX )
T 1568059413 18<twkm18>	now try an absolute path.
T 1568059419 18<{xmb}18>	?
T 1568059432 18<{xmb}18>	oh yes / sub
T 1568059434 18<twkm18>	...; /usr/bin/ls -A; ...
T 1568059455 18<{xmb}18>	there is the ${foo//\//^} solution, ^ instead of /
T 1568059463 18<{xmb}18>	but i dunno the project so no work
T 1568059503 18<{xmb}18>	ill try something..
T 1568059611 18<twkm18>	andecy: e.g., plenty of folks expect color when they use ls but not if they pipe it so ls generally wouldn't try to colorize if stdout isn't to the terminal which the magic you want would be, not a terminal, though tee's stdout would be ls can't determine that.
T 1568059645 18<{xmb}18>	twkm, can i disable cmd exe like set -n and then reenable it again ?
T 1568059658 18<andecy18>	I'm thinking on something along the line of using logger
T 1568059683 18<twkm18>	if you ls colorizes you can try it yourself: ls ; ls |& tee tempfile
T 1568059726 18<twkm18>	same issue.  plus what used to come out immediately via stderr would then be buffered along with stdout.
T 1568059727 18<greycat18>	andecy: there is a compile time option to log each *command* that bash executes through syslog... but not the output
T 1568059766 18<simbioz18>	Hi, I am trying to delete all lines that end with a number within the [1-50000] range with sed, but it's not working. How can I do that? thx
T 1568059775 18<twkm18>	##sed
T 1568059791 18<twkm18>	{xmb}: this being #bash i've no idea how cmd.exe works.
T 1568059791 18<greycat18>	this really doesn't sound like a job for sed.
T 1568059792 18<emg18>	simbioz: why? what are you really trying to do? also if you want to edit a file, don't use sed, use ed
T 1568059806 18<simbioz18>	I am learning sed
T 1568059807 18<greycat18>	sounds like a job for awk ... > newfile
T 1568059810 18<emg18>	simbioz: and what's the format of the lines?
T 1568059816 18<simbioz18>	just practicing
T 1568059817 18<twkm18>	so ask ##sed about your homework.
T 1568059821 18<emg18>	ah, homework
T 1568059824 18<simbioz18>	nope
T 1568059826 18<simbioz18>	look
T 1568059828 18<{xmb}18>	err where i said cmd.exe
T 1568059832 18<greycat18>	self-assigned homework is still homework
T 1568059838 18<greycat18>	stupid-ass self-imposed restrictions
T 1568059849 18<twkm18>	simbioz: really, there's a channel for it.
T 1568059853 18<greycat18>	using the wrong tool for the job
T 1568059855 18<simbioz18>	ok
T 1568059924 18<greycat18>	emg: they won't reveal the format of the lines because then you would solve the problem using the correct tool for the input they showed, but they want some sort of MAGICAL META SCRIPT that they can apply to EVERY problem
T 1568059952 18<greycat18>	see also
T 1568059953 18<greycat18>	!cult
T 1568059953 18<greybot18>	The Cult Of The Regex. This eldritch brotherhood is dedicated to the dogma that Every Problem Must Be Solved By A Regular Expression, Preferably A PCRE. They will invent ludicrous problems whose only feasible solution is a regular expression, driving all men mad.
T 1568059974 18<andecy18>	Thanks guys!
T 1568059977 18<emg18>	MAGICAL META SCRIPT is my new favorite term for software engineer
T 1568059977 18<greycat18>	In this case, it's a Sed Cultist.  If you solve the problem without sed, they will change or mutate the input until you give them a sed solution.
T 1568059996 18<twkm18>	{xmb}: that doesn't seem to be a complete sentence.  but you didn't mean cmd.exe, you want bash to not do things yet still invoke the debug trap?  i don't think that's possible.
T 1568060001 18<{xmb}18>	which was the noexec option as in bash -n
T 1568060023 18<{xmb}18>	er yes kinda, im got it nearly working
T 1568060245 18<simbioz18>	lol no, I am preparing for the LFCS and found a site that say you can "use a pattern as a beginning and end of a range"  (http://evc-cit.info/cit052/sed_tutorial.html) So I thought: hey, maybe I can delete all lines ending with a numeric range. That's all
T 1568060247 18<iowenovcw18>	thank you for your help.
T 1568060277 18<iowenovcw18>	i understand now that you cannot use a variable in a {} in a for loop and i must therefore use a c-style bash for loop or, alternately, a while loop
T 1568060349 18<greycat18>	xmb: set -n is ignored by interactive shells, and if you use it in a script, it disables the rest of the script, so nothing else happens after that.  Not even set +n.
T 1568060363 18<Riviera18>	simbioz: actually, good thinking. And by that you found out something that sed and regexes are bad at.
T 1568060373 18<Riviera18>	simbioz: perhaps try solving it with awk instead.
T 1568060386 18<simbioz18>	Will do
T 1568060389 18<{xmb}18>	i saw greycat thx, it hung one of my termianls to >x<close
T 1568060519 18<iowenovcw18>	I have another question...  the other task that I am doing is splitting album flacs into constituent tracks with a .cue.  The syntax is shnsplit -P face -o flac -t "%p -- %n - %t" -f filename.cue filename.flac .  I made this script:  https://pastebin.com/VA7RiA9K
T 1568060519 18<pasteban18>	Paste is available without ads on http://pastebin.com/raw/VA7RiA9K
T 1568060597 18<iowenovcw18>	i'm curious to know if there is a way to expand file names within a script the way you can on the command line.  the way i'm using it now is to execute ls (so i know the file names of the .cue and .flac) and then typing ~/bin/flacsplit firstlettersofcue[tab].cue firstlettersofflac[tab].flac [CR]
T 1568060627 18<emg18>	!ls
T 1568060627 18<greybot18>	DO NOT USE ls' output for anything. ls is a tool for interactively looking at directory metadata. Any attempts at parsing ls' output with code are broken. Globs are much more simple AND correct: ''for file in *.txt''. Read http://mywiki.wooledge.org/ParsingLs
T 1568060636 18<emg18>	iowenovcw: yes, globs work in scripts
T 1568060639 18<iowenovcw18>	no no...
T 1568060653 18<greycat18>	yes yes
T 1568060656 18<iowenovcw18>	i'm using ls to display the files in the directory.
T 1568060665 18<emg18>	use a glob
T 1568060667 18<Riviera18>	iowenovcw: it's pretty annoying when you have the patterns in variables, but trivial when they are not:
T 1568060668 18<emg18>	instead of <tab> put *
T 1568060680 18<iowenovcw18>	so my eyes see them and then my brain knows them.
T 1568060704 18<Riviera18>	iowenovcw: shopt -s nullglob; array=(file*.cue); printf 'First found file: %s\n' "${array[0]}"
T 1568060766 18<iowenovcw18>	ok...  so what you're saying is to input the file names by prompting for them and then entering firstletters*.cue firstletters*.flac ?
T 1568060767 18<Riviera18>	(in a script you'd test if there really were matching files; e.g. by checking the amount of elements in the array ${#array[@]}. See the FAQ fore more.)
T 1568060777 18<kerframil18>	wait. * isn't necessarily going to have the correct result, because it is not equivalent to using tab interactively to deterministically match one file of what may be a set. it will only be equivalent if there is only one possible match for each glob.
T 1568060780 18<iowenovcw18>	ok, i'll look it over, thanks for the starting point.
T 1568060783 18<greycat18>	iowenovcw: why are you *prompting* the user?
T 1568060788 18<Riviera18>	iowenovcw: i did not realise prompting for patterns was on the table :)
T 1568060804 18<greycat18>	if you're writing an *interactive* script, that changes many things
T 1568060818 18<iowenovcw18>	ok, then i'll stick to what i have.
T 1568060832 18<Riviera18>	kerframil: of course you are right, but i would say that iowenovcw can also use their brain for evaluating our answers. :)
T 1568060878 18<iowenovcw18>	i was hoping to get away from putting the file names in at the command line as $1 and $2 to force the user (me) to put both of them in as the script is being executed to make sure both are there.
T 1568060889 18<kerframil18>	Riviera: yeah. it's just that I don't understand the original question yet.
T 1568060909 18<Riviera18>	kerframil: the prompting complicates it, yes :|
T 1568060955 18<iowenovcw18>	i'll look over the wiki to see what that gives me...but i think the answer is no, you can't use [TAB] to expand the file names at an interactive script prompt?
T 1568060983 18<greycat18>	you can turn on readline in your read commands (-e option) if you want to use tab completion after being prompted by a bash script
T 1568061006 18<iowenovcw18>	thanks, i'll give that a whirl.
T 1568061009 18<kerframil18>	that's the same readline that provides the functionality you are referring to.
T 1568061013 18<greycat18>	but this *design* is questionable
T 1568061017 18<kerframil18>	yes, it is.
T 1568061024 18<emg18>	iowenovcw: making a script interactive sucks. instead take what you need as arguments, then the user will provide the files and be able to hit tab etc.
T 1568061087 18<{xmb}18>	andecy greycat twkm buggy: http://ix.io/1UH8
T 1568061106 18<iowenovcw18>	what is the irc command to send a private message?
T 1568061108 18<iowenovcw18>	i forget
T 1568061113 18<{xmb}18>	 /msg or /query
T 1568061124 18<Riviera18>	iowenovcw: /msg greycat hi!
T 1568061139 18<greycat18>	hiss
T 1568061140 18<iowenovcw18>	that's what i thought...
T 1568061148 18<Riviera18>	:D
T 1568061254 18<iowenovcw18>	ok, it's just the way that quassel does/does not display /msg i guess.  I used to use irc like 25 years ago...it was a different interface then.
T 1568061407 18<andecy18>	xmb thanks!
T 1568061423 18<greycat18>	I'm terrified now.
T 1568061451 18<{xmb}18>	its at least code that logs instead of non-code
T 1568061471 18<greycat18>	last thing I heard was that it was buggy
T 1568061489 18<andecy18>	xmb poor penguins
T 1568061492 18<{xmb}18>	yea it was, i halfway fixed it, http://ix.io/1UH9 ..
T 1568061535 18<Mooglefrooglian18>	Hi there - I'm looking for a way to pass a lambda function/subshell to a script to run. You can pass a string to run as a command pretty easily then run eval or similar on it, but that is more annoying than I'd like. Is there an easy way to do something like that?
T 1568061538 18<{xmb}18>	andecy if u're interested in it i can make some more work on it
T 1568061568 18<Mooglefrooglian18>	The context is that I'd like to dynamically create an SSH tunnel, export the port, and run a subcommand which accesses the port for use with its own stuff.
T 1568061597 18<Mooglefrooglian18>	It'd be nice if I could write something like with-ssh-tunnel <some config file> ( command-i-want-to-run --port $SSH_TUNNEL_PORT )
T 1568061598 18<greycat18>	you have to *select* the port yourself, so you already know the value
T 1568061619 18<Mooglefrooglian18>	The destination port has to be selected, but the local forwarded port is dynamic greycat
T 1568061634 18<greycat18>	what the hell option is that
T 1568061660 18<Mooglefrooglian18>	Multiple scripts will want to use the same forwarded thing, but I want to automatically end the session after the script ends. It's convenient if the local port is randomized so they don't accidentally use a port another script is using.
T 1568061683 18<{xmb}18>	maybe you want to just capture the output of the remote 'echo $port'
T 1568061720 18<Mooglefrooglian18>	I want an SSH tunnel to persist for the duration of another bash command, and I want the local port forwarded through the tunnel to be dynamic. I don't have a strong preference on the exact implementation.
T 1568061725 18<greycat18>	oh, -R has some crap about "dynamically allocated", so this is a freakin' *REVERSE* tunnel!?
T 1568061725 18<andecy18>	xmb I'm will probably work on this code myself, youve helped a lot! thanks!
T 1568061736 18<{xmb}18>	easy, peace
T 1568061753 18<Mooglefrooglian18>	I want my local port N to point to a url like blahblahblah:80 inside a VPN. I am tunneling through a bastion instance.
T 1568061767 18<andecy18>	xmb but if you ever finish it i will be happy to have it
T 1568061775 18<Mooglefrooglian18>	I can manually create a tunnel like that with something like ssh -L 23456:app-cache-c-prod-2.ht9t82.ng.0001.use1.cache.amazonaws.com:6379 app-bastion
T 1568061793 18<Mooglefrooglian18>	And while that runs I can locally direct traffic to localhost:23456 to access this remote VPN'd location.
T 1568061794 18<greycat18>	so it's a -L tunnel.  NOT a reverse tunnel.  There IS NO crap about "dynamically allocated" in the -L option in my man page.
T 1568061797 18<{xmb}18>	ill see to work some on it, 50/50 chance
T 1568061832 18<Mooglefrooglian18>	greycat, the port above (23456) is what I want to be random. That part is easy. I can generate random ports trivially.
T 1568061844 18<iowenovcw18>	thanks all...
T 1568061847 18<greycat18>	So you're randomizing it yourself.  Fine.  What are you asking *us* for, then?
T 1568061853 18<Mooglefrooglian18>	I want to pass a subshell to another script.
T 1568061859 18<greycat18>	you what
T 1568061861 18<Mooglefrooglian18>	Let me give you an example of the current setup and why I hate it.
T 1568061888 18<andecy18>	xmb twkm greycat thanks for the help
T 1568061888 18<{xmb}18>	you read off a file in a bash daemon and exec / eval the commands ?
T 1568061910 18<{xmb}18>	peace andecy
T 1568061938 18<Mooglefrooglian18>	with-ssh-tunnel prod-cache-ro "source variables_using_$SSH_TUNNEL_PORT && ~/query_session_uuids.py --filters '{\"something\"%3A[\"something\"]}'"
T 1568061946 18<twobitsprite18>	Mooglefrooglian: you export functions with "export -f"
T 1568061983 18<Mooglefrooglian18>	You'll see above in this script that I pass a string "source variables..." to the with-ssh-tunnel script I wrote. It then evals it.
T 1568061988 18<Mooglefrooglian18>	It's disgusting, I have to string-encode everything I put in there.
T 1568062001 18<twobitsprite18>	Mooglefrooglian: if that's not what you're looking for, I don't know what you mean by "pass a subshell"
T 1568062010 18<greycat18>	# command='echo "$hi"'; printf '%q\n' "$command"
T 1568062011 18<shbot18>	greycat: echo\ \"\$hi\"
T 1568062034 18<Mooglefrooglian18>	What I want is something like: with-ssh-tunnel prod-cache-ro ( source variables_using_$SSH_TUNNEL_PORT && ~/query_session_uuids.py --filters '{"something"%3A["something"]}'
T 1568062050 18<Mooglefrooglian18>	Where the second argument is a subshell to run or a lambda function or similar.
T 1568062050 18<greycat18>	your syntax doesn't even make sense.  you can't have random ( in the middle of a command.
T 1568062055 18<Mooglefrooglian18>	String-encoding the command is awful and unergonomic.
T 1568062055 18<{xmb}18>	i didnt understand either
T 1568062064 18<Mooglefrooglian18>	You're right, you can't have a random ( in the middle of a command. That's the problem.
T 1568062072 18<Mooglefrooglian18>	I am looking for a better solution than passing in the function I want to run as a string.
T 1568062078 18<greycat18>	you've failed to explain what you think the ( does
T 1568062084 18<twobitsprite18>	Mooglefrooglian: put your code in a function, export -f it, then pass the function name to your script
T 1568062089 18<{xmb}18>	i understood none of what u wanna do dood with tunnel
T 1568062117 18<Mooglefrooglian18>	twobitsprite, thank you for the recommendation. That will be more pleasant to use. I'll try that. It's still a little unergonomic - it's not possible to do better? In eg. zsh you can run a command like time ( echo "hi" ; sleep 5 ), but time is a builtin.
T 1568062123 18<greycat18>	Me either.  I thought "oh, he wants to run these commands on a remote system", but then where does the *tunnel* come in
T 1568062142 18<{xmb}18>	and this weird syntax
T 1568062143 18<twobitsprite18>	Mooglefrooglian: bash isn't a functional programming language.
T 1568062152 18<Mooglefrooglian18>	I just want an ssh tunnel so I can do HTTP calls etc. from my local computer to a remote computer in a VPN, all code runs locally and tunnels through it to the remote system. Sorry for any confusion.
T 1568062172 18<{xmb}18>	what are 'http calls'
T 1568062179 18<{xmb}18>	you want a pure tunnel nothing else ?
T 1568062183 18<Mooglefrooglian18>	twobitsprite, Understood. Thank you. I thought it would be useful to ask. Your solution seems like the best I'll get for now, then. I'm very weak on bash so I was unaware if there was anything better.
T 1568062190 18<{xmb}18>	a squid proxy style or transparent proxy
T 1568062212 18<greycat18>	if he just wanted an ssh socks proxy for a browser, that would be ssh -D
T 1568062217 18<{xmb}18>	you can configure static forwarding with dynamic 1port to static destination system
T 1568062218 18<greycat18>	but I don't think that's what he wants
T 1568062218 18<Mooglefrooglian18>	Sure, something like that xmb. I am using an SSH tunnel to perform that because to get into the VPN I can pass all traffic through a bastion instance open to the public internet.
T 1568062221 18<{xmb}18>	then firewall your ip out
T 1568062222 18<Mooglefrooglian18>	SSH also handles authentication etc.
T 1568062248 18<{xmb}18>	but you want many different http requests no? not just to one or two hosts
T 1568062253 18<Mooglefrooglian18>	I want to run these scripts from any random computer that can get in to the bastion via ssh. SSH is how we're authenticating and allowing external access to the VPN.
T 1568062263 18<{xmb}18>	then you'd have to run a transparent proxy, u connect to that and enter the url and it requests it
T 1568062270 18<greycat18>	... maybe he *does* want an ssh -D ?!
T 1568062276 18<greycat18>	I can't figure this shit out at all.
T 1568062281 18<Mooglefrooglian18>	Our company has a variety of servers running in the VPN and it's ideal if my script is generic enough to access any of them trivially without a ton of per-user setup. Ideally other users at my company would use these scripts.
T 1568062302 18<{xmb}18>	so u want only a couple of forwards ?
T 1568062315 18<Mooglefrooglian18>	The set of forwards will be static and known in advance.
T 1568062322 18<Mooglefrooglian18>	It'd be like 5-10.
T 1568062323 18<{xmb}18>	we can, code a script that has dynamical local port but static forwarded addr:port
T 1568062326 18<{xmb}18>	and that a couple of times
T 1568062346 18<{xmb}18>	so u want then tunnels to 5 - 10 times
T 1568062363 18<{xmb}18>	plaintext tunnels made via ssh tunneling ? or more ssh encrypted ones
T 1568062364 18<greycat18>	when you say "in the VPN" do you really mean "in a DMZ" or something?
T 1568062372 18<{xmb}18>	maybe u wanna run something else like socat
T 1568062384 18<{xmb}18>	'in my fantasy - all works'
T 1568062406 18<{xmb}18>	you can make ssh forward port this to that, not sure tho
T 1568062422 18<Mooglefrooglian18>	greycat, I mean that all servers are in a private network not open to the public. However, there is a single server in that private network open to public traffic that you can access via SSH. From there, once you've SSHed into that instance ("bastion" is what we call it), you can SSH to any other internal server.
T 1568062424 18<{xmb}18>	i'd socat some script with or without random local ports, to the destinations
T 1568062458 18<{xmb}18>	i can prolly code reverse shells running there
T 1568062472 18<{xmb}18>	you wanna just type 'server3 command..' and it execs that command there yes ?
T 1568062474 18<greycat18>	Mooglefrooglian: I'm not seeing where bash comes into this question at all.  You just want to configure your ssh client to open 5-10 tunnels when you ssh to this bastion host?  Sure, do that.
T 1568062477 18<Mooglefrooglian18>	It's convenient for our architecture that all internal servers can talk via plain HTTP without authentication. This setup means it's impossible for eg. anyone in the public to ping or send HTTP requests to the servers. But of course as a dev I want access to them locally. So, SSH tunnel.
T 1568062495 18<Mooglefrooglian18>	Bash comes into this because I want to run scripts that eg. access a database hosted in the VPN.
T 1568062510 18<Mooglefrooglian18>	So to do that I want to tunnel to it via SSH. My scripts to read the database are in BASH.
T 1568062515 18<{xmb}18>	you should explain more simply
T 1568062536 18<{xmb}18>	..db.. mysql.. file db.. ..
T 1568062547 18<greycat18>	Go talk to #openssh.
T 1568062557 18<{xmb}18>	it needs scripting
T 1568062569 18<Mooglefrooglian18>	This is all context and unnecessary to get into, really. I'm sorry for the confusion again. My question, at its core, is what the most convenient way to pass a command into another script was, and as per twobitsprite, there's no real great way to do it beyond exporting a function (which I find far better than passing a string).
T 1568062580 18<Mooglefrooglian18>	So I'll try doing that.
T 1568062603 18<{xmb}18>	you can socat forward port 222 to 0.0.1.1:333 easiestly
T 1568062621 18<{xmb}18>	either local non inet port 222 or some more specific, ..
T 1568062624 18<Mooglefrooglian18>	The question really has nothing to do with SSH; the tunnel is a solved problem. I know how to do it. I have scripts working with it. The problem that exists is just making nice elegant scripts.
T 1568062626 18<{xmb}18>	in case 333 has the http
T 1568062637 18<Mooglefrooglian18>	And my question really is answered, so thank you all for taking the time to answer things. have a good day.
T 1568062642 18<{xmb}18>	peace
T 1568062647 18<greycat18>	Moving goalposts.  He wants a tunnel so he can talk to services on DMZ hosts... no!  Now he wants to execute commands on them!  But it has to be fancy!  Some sort of remote procedure call API that he's building from scratcH!
T 1568062665 18<greycat18>	Ask #openssh how to do whatever the REAL goal is.
T 1568062671 18<{xmb}18>	'it has to be fancy' has the word
T 1568062793 18<{xmb}18>	:/ greycat
T 1568063273 18<murder18>	is it wrong to do if (( varY > varX )) ? should I always use if [ varY -gt varX ] ?
T 1568063302 18<twkm18>	the former seems much better than the latter.
T 1568063343 18<{xmb}18>	how to reset exec 1>>"$file" to stdout or fd/1, http://ix.io/1UHg is invalid there
T 1568063536 18<twkm18>	save it first.
T 1568063556 18<emg18>	murder: in bash use (( for arithmetic contexts, in POSIX sh (( doesn't exist so you would use [ but also would need to expand e.g. if [ "$varY" -gt "$varX" ];
T 1568063564 18<murder18>	twkm using shellcheck it claims SC2205
T 1568063579 18<murder18>	emg yeah
T 1568063583 18<murder18>	so I'm using bashim
T 1568063589 18<murder18>	I was afraid it was wrong ffs.
T 1568063591 18<twkm18>	duh.
T 1568063591 18<murder18>	koala_man :(
T 1568063596 18<{xmb}18>	twkm ?
T 1568063596 18<emg18>	if shellcheck says SC2205 then you used ( instead of ((
T 1568063602 18<murder18>	I used ((
T 1568063614 18<twkm18>	this is #bash, why wouldn't you use bash syntax.  /me shrugs
T 1568063624 18<emg18>	then the SC2205 page in the shellcheck docs needs to be updated
T 1568063632 18<{xmb}18>	maybe you have #!/bin/sh
T 1568063667 18<{xmb}18>	( instead of (( seems nonsense, parsing error or something
T 1568063671 18<also_uplime18>	can you make a testcase?
T 1568063688 18<twkm18>	not (.  [.
T 1568063697 18<{xmb}18>	ah well, maybe its sh mode
T 1568063701 18<twkm18>	perhaps you need a different font.
T 1568063722 18<{xmb}18>	i need more friends
T 1568063792 18<{xmb}18>	what about save it first twkm, .. ?
T 1568063817 18<{xmb}18>	you mean v1=/proc/self/fd/1
T 1568063830 18<geirha18>	# exec 3>&1 1>file; echo hello; exec 1>&3-; ls -l
T 1568063831 18<shbot18>	geirha: total 4
T 1568063832 18<shbot18>	geirha: -rw-r--r-- 1 root root 6 Sep  9 21:17 file
T 1568063833 18<kerframil18>	dup it to another file descriptor so that you can dup it back again.
T 1568063840 18<{xmb}18>	oic thxx
T 1568063857 18<twkm18>	a'la, exec 3>&1 1>>file
T 1568063872 18<{xmb}18>	thxx
T 1568063967 18<mknod18>	# touch foo bar; mv -n foo bar; echo "$?"; ls
T 1568063968 18<shbot18>	mknod: 0
T 1568063968 18<shbot18>	mknod: bar  foo
T 1568063986 18<mknod18>	Does anyone know why mv sucks so bad?
T 1568063999 18<twkm18>	in what way?
T 1568064022 18<mknod18>	errors are poorly reported, when they are
T 1568064042 18<{xmb}18>	with 1>&3 it works with 1>&3- it closes the shell, thxx anyway
T 1568064046 18<mknod18>	be it with the exit status or the error message
T 1568064048 18<geirha18>	murder: shellcheck does give sc2205 if you use -gt instead of > inside (( ))
T 1568064052 18<twkm18>	-n isn't standard.  doesn't it say not to give errors?
T 1568064068 18<{xmb}18>	mknod, i claim many tools are incompletly written
T 1568064071 18<mknod18>	twkm, prevent mv from overwriting an existing file
T 1568064076 18<{xmb}18>	like, pro coders would code better
T 1568064102 18<knstn18>	It seems that the "Unix philosophy" is a hoax. There were building small programms that did one thing, and then pipe each other, simply because that era's hardware couldn't handle large programms.
T 1568064105 18<twkm18>	then indeed, you are using a shit mv.  otoh it is non-standard so that was likely anyway.
T 1568064143 18<twkm18>	knstn: yet could run the multiple small tools at the same time?  surprising.
T 1568064202 18<{xmb}18>	andecy, this is the final version: only backdraw is when in use the chars appear like few delayed, .. http://ix.io/1UHq
T 1568064229 18<mknod18>	twkm, both GNU mv and BSD mv have the same shitty behavior, so there may be a reason. I never found a way to perform BOTH file system operations AND proper error handling because of this
T 1568064260 18<also_uplime18>	aliases are off by default in scripts
T 1568064262 18<{xmb}18>	it just redirects all output to "$db" log file, with stamp in DEBUG trap, and read that file to terminal, and on kill -USR1 it returns to old behavior
T 1568064279 18<twkm18>	xmb likes using them, so enables them.
T 1568064281 18<also_uplime18>	oh nmd, missed the shopt
T 1568064283 18<{xmb}18>	also_uplime me ? i have shopt -s expand_aliases
T 1568064293 18<also_uplime18>	it should be a function anyways
T 1568064307 18<{xmb}18>	i dont like functions cause of speed slowdown / overheat
T 1568064307 18<also_uplime18>	does tail natively expand ~?
T 1568064312 18<also_uplime18>	wut
T 1568064322 18<twkm18>	at least sie didn't write most of it in awk.
T 1568064332 18<{xmb}18>	it was a bash question
T 1568064340 18<twkm18>	hasn't stopped you before.
T 1568064344 18<{xmb}18>	i dont think tail does but i think the shell does at assignment
T 1568064357 18<{xmb}18>	# foo=~/bar; printf -- %s "$foo"
T 1568064358 18<shbot18>	{xmb}: /root/bar
T 1568064362 18<knstn18>	twkm: i'm on a spree of "recent" youtube videos with BK and in one of them he implies that exact thing
T 1568064373 18<{xmb}18>	inside ${foo:=~/doesnt/expand}
T 1568064421 18<also_uplime18>	ah, that must be what I was thinking off
T 1568064425 18<twkm18>	knstn: the machines were certainly tiny by today's standards, even back then they weren't given beefy machines merely what was available.  so tiny, yes.
T 1568064439 18<andecy18>	xmb thanks for all the help
T 1568064443 18<{xmb}18>	easy
T 1568064457 18<{xmb}18>	im happy to code from time to time different stuffs
T 1568064472 18<twkm18>	but everything should be able to do everything has its own issues.
T 1568064492 18<{xmb}18>	there wont be this
T 1568064508 18<{xmb}18>	there would be 'interactive functional complete programming language' like 'natural language'
T 1568064524 18<{xmb}18>	and then mv is like 'move file with optional by user supplied word-/args'
T 1568064561 18<twkm18>	consider compression.  ed needs to be revised to handle compress'd files, then again to handle gzip'd files, then again to handle bzip'd files, then again to handled bzip2
T 1568064561 18<{xmb}18>	im about such, isnt so hard to code, to code the all-different-words is the where im stuck
T 1568064565 18<twkm18>	...
T 1568064584 18<{xmb}18>	thats 'completnes'
T 1568064596 18<andecy18>	I dont always find myself in a situation which a quick google search doesnt solve my problem, it was refreshing.. Guess I need to lift those bash weights more often
T 1568064597 18<{xmb}18>	:/
T 1568064613 18<{xmb}18>	i havent found ONE google result in years
T 1568064632 18<{xmb}18>	and if i look at bash or sh scriptings on the net, all invalid bullcrapp
T 1568064651 18<{xmb}18>	they like learned one thing, then they blog about it, even if its not valid
T 1568064669 18<{xmb}18>	in ugly-ness, instead of elegant passthru, like newspapers
T 1568064673 18<{xmb}18>	0% what i want / need
T 1568064689 18<{xmb}18>	im about coding args as words, no -dash-option
T 1568064695 18<{xmb}18>	which is very simple then
T 1568064706 18<andecy18>	you have any recommendation for interesting reading material?
T 1568064715 18<{xmb}18>	define word be action and define subwords be actions, optionally recursivley coded
T 1568064721 18<{xmb}18>	0 dood
T 1568064729 18<{xmb}18>	!coproc
T 1568064729 18<greybot18>	http://wiki.bash-hackers.org/syntax/keywords/coproc
T 1568064769 18<{xmb}18>	man bash and gawk
T 1568064777 18<{xmb}18>	and these chats here
T 1568064784 18<{xmb}18>	the chats teached me bash and gawk
T 1568064794 18<knstn18>	forgot wooledge
T 1568064796 18<{xmb}18>	interactive help when needed as needed [sometimes so perfect]
T 1568064879 18<andecy18>	xmb nice, then i guess i will stick around hehe
T 1568064934 18<andecy18>	xmb that bash-hackers wiki looks awesome
T 1568064993 18<{xmb}18>	i dunno i just know that page, that halfway teached me to use coproc
T 1568064998 18<{xmb}18>	there is also wooledge by greycat
T 1568065004 18<{xmb}18>	i guess u can take a look
T 1568065006 18<{xmb}18>	!wooledge
T 1568065009 18<{xmb}18>	!guide
T 1568065010 18<greybot18>	http://mywiki.wooledge.org/BashGuide or in PDF: http://s.ntnu.no/bashguide.pdf
T 1568065206 18<andecy18>	ooh i know that one
T 1568065230 18<{xmb}18>	my inet will go off in 20 mins, peace
T 1568065287 18<andecy18>	kk
T 1568065304 18<{xmb}18>	had fun
T 1568065403 18<andecy18>	cya
T 1568072784 18<TrentonAdams18>	I'm confused about this.  mountpoint -q /media/backup || echo "missing mount /media/backup/" && exit 99 # exits with 99 when mountpoint is successful.  Does echo not have a return code?
T 1568072919 18<rafasc18>	TrentonAdams: it has, but you have an explicit exit 99;
T 1568072931 18<larryv18>	!pf 22 > TrentonAdams
T 1568072931 18<greybot18>	TrentonAdams: https://mywiki.wooledge.org/BashPitfalls#pf22 -- Don't do this! -- cmd1 && cmd2 || cmd3
T 1568073216 18<TrentonAdams18>	larryv, Right, I made a note of that awhile back, and forgot to do this -> mountpoint -q /media/backup || ! echo "missing mount /media/backup/" || exit 99
T 1568073286 18<TrentonAdams18>	cause if echo is hit, I want it to be 1 so that exit is ran.
T 1568073301 18<rafasc18>	if ! mountpoint -q; then echo missing; exit 99; fi
T 1568073329 18<rafasc18>	whit not this?
T 1568073332 18<rafasc18>	why*
T 1568073374 18<TrentonAdams18>	rafasc, I suppose that's not terrible either.
T 1568073379 18<TrentonAdams18>	Probably less confusing
T 1568073385 18<larryv18>	or mountpoint -q /media/backup || { echo "oops"; exit 99; } if you really want the pipeline
T 1568073402 18<larryv18>	er, compound statement. w/e
T 1568073436 18<TrentonAdams18>	larryv, Oh, I did not know of that syntax.  So that doesn't run inside a shell?
T 1568073464 18<larryv18>	no, { …; } is just grouping. ( … ) does a subshell
T 1568073475 18<TrentonAdams18>	larryv, Yeah, I knew () did. :D
T 1568073514 18<rafasc18>	not terrible? for the cause you're showing is much more readable than the mental gymnastics you have to do to figure out when the pipeline will exit.
T 1568073822 18<kerframil18>	well, that's novel.
T 1568073969 18<TrentonAdams18>	rafasc, Yep, that's what I meant when I said "Probably less confusing".  But it's more effort at the time of writing too.  i.e. Don't miss a ;, don't miss a then, or a fi.  Those are the two I miss most often.
T 1568074444 18<sudomann_18>	whats the website that gives suggestions to improve my bash script again
T 1568074452 18<sudomann_18>	Its frequently referenced in here
T 1568074455 18<larryv18>	shellcheck
T 1568074458 18<sudomann_18>	thanks
T 1568074692 18<sudomann_18>	can someone please explain to me how CRLF vs LF plays into my scripts often failing to run when I write them within windows?
T 1568074725 18<sudomann_18>	I recently learned that the fix was to switch from CRLF to LF using a toggle in VSCode
T 1568074735 18<sudomann_18>	But I dont understand why this is neccesary
T 1568074760 18<kerframil18>	it interferes with shebangs, for a start.
T 1568074790 18<kerframil18>	ergo, are you really trying to run $'bash\r'?
T 1568074818 18<sudomann_18>	aahh
T 1568074823 18<sudomann_18>	so thats what that means :)
T 1568074835 18<kerframil18>	if you get that, you'll probably begin to understand how it can interfere with other commands
T 1568074846 18<sudomann_18>	Yup, suddenly get it now.
T 1568074878 18<sudomann_18>	Used to happen all the time, and i would just give up and fire up a whole linux vm and write the script in there, than struggle with window's bash
T 1568074881 18<sudomann_18>	Thakn you
T 1568074921 18<kerframil18>	there are plenty of decent editors; Notepad2-mod, Notepad++ and so forth.
T 1568074959 18<kerframil18>	As they handle line-endings intelligently, I would just default those to use the LF format.
T 1568077636 18<pj18>	sudomann_: there are also easy to use dos2unix and similar utilities for when that happens.  There is rarely ever any need to completely rewrite something.
T 1568078012 18<rendysurvage18>	do people write in assembly any more?
T 1568078030 18<rendysurvage18>	besides steve gibson
T 1568078866 18<scx18>	I am looking for something like AC_ARG_ENABLE or AC_ARG_WITH, but with support for an argument.
T 1568078915 18<scx18>	e.g. --with-featurename=3
T 1568079054 18<kerframil18>	autoconf isn't covered here. try ##workingset.
T 1568081883 18<scx18>	How to say this in sh?
T 1568081883 18<scx18>	https://pastebin.com/raw/uXp30cjV
T 1568081986 18<scx18>	[ -gt ] or something else?
T 1568082033 18<larryv18>	!wayttd
T 1568082033 18<greybot18>	What Are You Trying To Do?
T 1568082075 18<larryv18>	just test whether LEVEL is greater than 1?
T 1568082250 18<pj18>	larryv: (( LEVEL > 1 ))
T 1568082387 18<pj18>	you probably want this...
T 1568082400 18<pj18>	# level=2; echo "$(( level > 1 ? level : 1 ))"
T 1568082401 18<shbot18>	pj: 2
T 1568082418 18<pj18>	!$(( > larryv
T 1568082419 18<greybot18>	larryv: $((...)) is an arithmetic substitution. After doing the arithmetic, the whole thing is replaced by the value of the expression. See <http://mywiki.wooledge.org/ArithmeticExpression>.
T 1568082437 18<scx18>	larryv: get maximum of two values
T 1568082441 18<pj18>	also ...
T 1568082445 18<pj18>	!caps > larryv
T 1568082445 18<greybot18>	larryv: By convention, environment variables (PATH, EDITOR, SHELL, ...) and internal shell variables (BASH_VERSION, RANDOM, ...) are fully capitalized. All other variable names should be lowercase. Since variable names are case-sensitive, this convention avoids accidentally overriding environmental and internal variables.
T 1568082484 18<scx18>	or: get $level if $level > 0, else: get 1
T 1568082505 18<larryv18>	pj: thanks! but it's scx that's asking :)
T 1568082511 18<pj18>	oops, sorry
T 1568082515 18<scx18>	in POSIX, because I need to use this in configure.ac
T 1568082527 18<pj18>	scx: see everything I just directed to larryv (by accident)
T 1568082675 18<scx18>	pj: a few minutes ago I've already paste this:
T 1568082676 18<scx18>	((LEVEL>1 ? LEVEL : 1))
T 1568082708 18<scx18>	but this is undefined in POSIX:
T 1568082714 18<scx18>	In POSIX sh, standalone ((..)) is undefined.
T 1568082723 18<scx18>	https://www.shellcheck.net/
T 1568083403 18<larryv18>	scx: <pj>	# level=2; echo "$(( level > 1 ? level : 1 ))"
T 1568083457 18<larryv18>	which is actually probably what you want, unless you really do want to return that max as an exit status, which i doubt
T 1568084342 18<pj18>	heh, the sh(1P) man page seems to say more about vi vs emacs than actual sh language.
T 1568084353 18<scx18>	larryv: but (( ...) is a bash feature, like [[ ... ]]
T 1568084362 18<scx18>	they are undefined in POSIX
T 1568084388 18<larryv18>	scx: $(( )) and (( )) are two different things
T 1568084410 18<pj18>	sh# level=2; echo "$(( level > 1 ? level : 1 ))"
T 1568084411 18<shbot18>	pj: 2
T 1568102508 18<gidna18>	Hello
T 1568102515 18<gidna18>	How can I use bash to perform floating point calculation like 6/7 ?
T 1568102541 18<Soliton18>	not at all.
T 1568102560 18<Soliton18>	!float
T 1568102560 18<greybot18>	http://mywiki.wooledge.org/BashFAQ/022 -- How can I calculate with floating point numbers instead of just integers?
T 1568103680 20*	Disconnected (20)
T 1568103704 19*	Now talking on 22#bash
T 1568103704 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568103704 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568103704 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568103993 18<osse18>	julius_: does it have a #!/bin/bash or similar at the top?
T 1568104005 18<geirha18>	why is there -c in that error message?
T 1568104077 18<julius_18>	https://ideone.com/9HriYr
T 1568104086 18<armin18>	why is there ` in line 0?
T 1568104096 18<julius_18>	no, let me add the shebang
T 1568104099 18<geirha18>	julius_: % is special in crontab
T 1568104121 18<geirha18>	and lose the pointless echo and `` while you're at it
T 1568104157 18<geirha18>	ah no, you concat it with $foo
T 1568104187 18<geirha18>	printf '%s %s\n' "$(date +\%T)" "$foo" >> ~/somefile
T 1568104217 18<julius_18>	ok so do i put a \% instead of % ?
T 1568104239 18<geirha18>	oops, forgot them for the printf, doh
T 1568104246 18<geirha18>	printf '\%s \%s\n' "$(date +\%T)" "$foo" >> ~/somefile
T 1568104372 18<julius_18>	ok lets test
T 1568104457 18<Soliton18>	!grepawk
T 1568104457 18<greybot18>	Awk can do almost everything grep can do. Instead of doing grep 'foo' | awk '{ statement }', try awk '/foo/{ statement }'
T 1568104485 18<julius_18>	yes im not that deep into bash scripting as you guys :)
T 1568104515 18<julius_18>	but the basic works now. apparently the \% fixed the thing
T 1568104574 18<julius_18>	ah yes, stackoverflow has a explanation for the %
T 1568104576 18<julius_18>	good to know
T 1568104663 18<julius_18>	so when running soemthing from crontab like this:  bash script.sh   you dont need the !#/bin/bash or do you?
T 1568105193 18<geirha18>	It's #!/bin/bash, and no, it will be ignored by bash since it starts with #, so it's just a commented line
T 1568105219 18<geirha18>	also, don't put .sh extension on a bash script. It's misleading
T 1568105436 18<geirha18>	oh and the % thing is also documented in crontab(5)
T 1568105505 18<julius_18>	im sure is documented, just never ran into it
T 1568112069 18<zamba18>	i want to rsync a remote folder tree, but i only want files that are newer than x number of days
T 1568112071 18<zamba18>	how can this be done?
T 1568112075 18<zamba18>	over ssh
T 1568112099 18<djph18>	zamba: that's not how rsync works ...
T 1568112109 18<zamba18>	so it's not possible to do this with rsync?
T 1568112131 18<djph18>	don't think so
T 1568112137 18<djph18>	check the manpage though.
T 1568112147 18<djph18>	But I believe rsync is "check everything, move if new"
T 1568113442 18<Riviera18>	zamba: Note there is #rsync
T 1568116185 18<snooky18>	moin
T 1568116482 18<mingdao18>	zao
T 1568148708 20*	Disconnected (20)
T 1568148732 19*	Now talking on 22#bash
T 1568148732 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568148732 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568148732 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568148748 18<emg18>	many here would say stick with POSIX single letter flags
T 1568148777 18<emg18>	and in general for POSIX -arguments is the same as -a -r -g -u -m -e -n -t -s
T 1568148819 18<emg18>	nvz: https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html
T 1568148822 18<kerframil18>	for long options, I'd go for the GNU style. otherwise, single letter options are effectively sidelined.
T 1568148827 18<^18>	then sometimes you're programs like gcc that uses all 3
T 1568148845 18<greycat18>	!faq options
T 1568148846 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/035 -- How can I handle command-line options and arguments in my script easily?
T 1568148849 18<llua18>	usually a sign of overengineering
T 1568149150 18<emg18>	and then there are dd and find....
T 1568149164 18<greycat18>	and gcc!
T 1568149194 18<^18>	i like dig's +opt
T 1568149808 18<hello__18>	Hey, I am trying to delete specific lines using bash script
T 1568149883 18<hello__18>	here's my code https://paste.mozilla.org/yREDFdXd
T 1568149893 18<hello__18>	But it ain't working
T 1568149975 18<geirha18>	!code
T 1568149976 18<greybot18>	If you're showing me code, I'm going to assume the code is broken. If the code is broken, it doesn't do what you want to do. If it doesn't do what you want, it doesn't explain what you want, either. Use English, describe your goal, keep broken code to yourself.
T 1568150014 18<hello__18>	Basically I get this error: sed: -e expression #1, char 1: unknown command: `''
T 1568150034 18<b1tninja18>	can you sohw us example.... i dont know sed well, but maybe you could avoid it by just looping throug hthe lines in bash
T 1568150045 18<hello__18>	I am trying to delete a specific line using sed command: sed "1d" <file_name>
T 1568150069 18<b1tninja18>	one thing I will suggest is to use ${var@Q} to get your quoted string
T 1568150076 18<b1tninja18>	instead of whatever you're doing there with $QUOTE
T 1568150085 18<geirha18>	sed '/regex/d'
T 1568150119 18<^18>	why are you passing a literal quote to sed?
T 1568150128 18<b1tninja18>	and if you want sed to edit the same file you're working on, i think you use -i
T 1568150133 18<hello__18>	sed '1d' test deletes the 1st line
T 1568150146 18<geirha18>	obviously guessing on syntax and getting it wrong ... very wrong
T 1568150169 18<kerframil18>	that code made my head hurt. is that initial sed command supposed to be producing a sequence of line numbers somehow?
T 1568150183 18<hello__18>	Ye
T 1568150187 18<hello__18>	*yes
T 1568150187 18<b1tninja18>	can you show us an example input please
T 1568150212 18<hello__18>	sed '1d' file_name deletes the 1st line
T 1568150226 18<hello__18>	So, using the first line I got the number of lines which I need to delete
T 1568150247 18<geirha18>	and   sed '/foo/d'  file_name deletes lines that match foo
T 1568150270 18<elibrokeit18>	I strongly recommend deleting that script from both your computer and the internet and then asking a brand new question with example input and output
T 1568150274 18<hello__18>	and then I'm trying to pass this into something like sed '${the nth line}d'
T 1568150282 18<geirha18>	err, I messed up the spacing there
T 1568150292 18<elibrokeit18>	This is a particularly egregious example of !code
T 1568150327 18<hello__18>	I'm sorry, I'm new to bash
T 1568150343 18<geirha18>	hello__: instead of finding the line numbers of all lines matching a regex, then feeding those line numbers to a second sed to delete them, just delete the lines matching the regex
T 1568150370 18<b1tninja18>	do you realize btw, that if you delete the lines before the other lines, those line numbers change
T 1568150425 18<b1tninja18>	you could do it in reverse, but still, probably easier to just loop through the lines, see if they are in your array
T 1568150440 18<hello__18>	geirha: It's a caveat, I can't use regex
T 1568150449 18<larryv18>	hello__: what? you just did, in the very first line
T 1568150512 18<hello__18>	I'm searching for the string just above coz it may repeat
T 1568150525 18<hello__18>	but the string that I'm searching is unique
T 1568150525 18<larryv18>	sed '/640…C7D/d' E_conll_parse
T 1568150542 18<elibrokeit18>	hello__: please, back up
T 1568150550 18<elibrokeit18>	Show us an input file
T 1568150561 18<elibrokeit18>	Show us what you want to get instead
T 1568150672 18<kerframil18>	some sample lines from E_conll_parse would be useful, to begin with.
T 1568150673 18<geirha18>	Hm. del=$((i+1)), so maybe you want to delete the line after the matchinstead?  sed '/640...C7D/{ n; d; }'
T 1568150771 18<b1tninja18>	how are you getting hte line numbers
T 1568150775 18<b1tninja18>	i bet we can do this in one step
T 1568150776 18<b1tninja18>	instead of 2
T 1568150804 18<geirha18>	the line numbers come from the   sed -n '/640...C7D/='   at the start
T 1568150832 18<b1tninja18>	right but is that just matching some value, can he just select lines that dont have that
T 1568150854 18<geirha18>	We don't know, since he won't tell us
T 1568150893 18<geirha18>	All we have to go on is broken code where we have to guess what the real intent was
T 1568150895 18<hello__18>	https://paste.mozilla.org/X5bJGa3A
T 1568150903 18<hello__18>	I guess this should do...
T 1568150928 18<geirha18>	Well I'll be ... I guessed right
T 1568150931 18<hello__18>	Get you guys brief idea of what I'm tryna do
T 1568150957 18<elibrokeit18>	> The "=" command prints the current line number to standard output.
T 1568150964 18<elibrokeit18>	Why even
T 1568151004 18<geirha18>	sed '/6408545D7CA18C32E19C5948F9C8B89281900ED63125E6CCE797BA459D8DAC7D/{ n; d; }' E_conll_parse
T 1568151044 18<geirha18>	and now I'm all out of teaspoons
T 1568151069 18<hello__18>	what does n; and d; do?
T 1568151079 18<hello__18>	Thanks for the help :)
T 1568151080 18<geirha18>	"read next line" and "delete"
T 1568151097 18<geirha18>	it should be explained in the manual
T 1568151108 18<hello__18>	I'm sorry for complicating things for you guys
T 1568151424 18<Wulf18>	Hello
T 1568151466 18<twobitsprite18>	!ask > Wulf
T 1568151466 18<greybot18>	Wulf: If you have a question, please just ask it. Don't look for topic experts. Don't ask to ask. Don't PM! Don't ask if people are awake, or in the mood to help. Just ask the question straight out, and be patient waiting for an answer. http://mywiki.wooledge.org/NetEtiquette
T 1568151479 18<Wulf18>	A script runs with "set -e". How can I catch any error and run "banner ERROR" and then terminate the program?
T 1568151506 18<twobitsprite18>	!set-e > Wulf
T 1568151507 18<greybot18>	Wulf: "set -e" is an inheritance of the old bourne shell, and doesn't really work well with modern shell features. You'll really have less buggy scripts if you do the error handling manually instead of relying on the unreliable "set -e"; see http://mywiki.wooledge.org/BashFAQ/105
T 1568151509 18<^18>	don't run set -e
T 1568151544 18<Wulf18>	So I should really handle the errors for each and every command I execute?
T 1568151596 18<Wulf18>	alright :-(
T 1568151597 18<twobitsprite18>	Wulf: only the commands that can fail and break the rest of your script
T 1568151601 18<larryv18>	the ones that matter
T 1568151760 18<twobitsprite18>	Wulf: alternatively, put your error handling code in a function and use "trap fun ERR"
T 1568151861 18<twobitsprite18>	help trap | grep -C1 ERR
T 1568151864 18<twobitsprite18>	# help trap | grep -C1 ERR
T 1568151866 18<shbot18>	twobitsprite:     script run by the . or source builtins finishes executing.  A SIGNAL_SPEC
T 1568151866 18<shbot18>	twobitsprite:     of ERR means to execute ARG each time a command's failure would cause the
T 1568151866 18<shbot18>	twobitsprite:     shell to exit when the -e option is enabled.
T 1568151933 18<Riviera18>	... no, don't do that. :)
T 1568151950 18<Wulf18>	Riviera: but it solves my problem and I can go to sleep soon ;-)
T 1568151957 18<Wulf18>	twobitsprite: thanks, will use that.
T 1568151972 18<Riviera18>	oh, in that case: good luck!
T 1568151978 18<twobitsprite18>	Riviera: why? I can imagine a a scenario where it's better than putting "|| exit 1" after every line
T 1568152109 18<Riviera18>	mostly because it's much harder than handling the errors in situ
T 1568152170 18<Riviera18>	that feature's idea is rather for handling otherwise unhandled errors, or for debugging
T 1568152193 18<Wulf18>	Riviera: the only way to handle the errors in my script is to terminate.
T 1568152269 18<twobitsprite18>	Riviera: *shrug* we gave him 2 options, and explained the downsides of each
T 1568152282 18<Riviera18>	ah, and also because -e is a problem in itself
T 1568152292 18<Riviera18>	Wulf: not everything with a non-zero exit code is an error
T 1568152315 18<Riviera18>	Wulf: and even *if* that were so you could simply use set -e without the need for that trap. (but since it's not so ..)
T 1568152330 18<twobitsprite18>	Riviera: so you "&& true" those, just like you would "|| exit 1" everything else without set -e
T 1568152365 18<Riviera18>	twobitsprite: there's a difference
T 1568152394 18<Wulf18>	set -e failed for me, that's why I came here and asked :)
T 1568152394 18<twobitsprite18>	Riviera: I know there is, but I think people in here are a bit too puritanical about this stuff. For all we know, set -e is perfect in Wolf's case
T 1568152397 18<Riviera18>	twobitsprite: set -e is the shoot at everything solution without thinking (and what's worse, with a lot of surprises even when thinking is involved),
T 1568152400 18<Wulf18>	But with "trap" it gets the job done
T 1568152433 18<Riviera18>	twobitsprite: simply handling errors is not like that, because you should anyway be aware of what the code you are writing is doing and what you want to happen when it fails.
T 1568152436 18<Riviera18>	but
T 1568152440 18<Riviera18>	m000t discussion, nite Wulf
T 1568153851 18<hello__18>	Also, how do I replace this line into something like "----------------------" and rewrite into the file itself, I did this: MYVAR='1	6408545D7CA18C32E19C5948F9C8B89281900ED63125E6CCE797BA459D8DAC7D	6408545d7ca18c32e19c5948f9c8b89281900ed63125e6cce797ba459d8dac7d	NUM	CD	_	0	root	_	_' "$MYVAR" | sed -e 's/[a-zA-Z]/-----/g' -e 's/[0-9]/-----/g' -e
T 1568153852 18<hello__18>	's/_/-----/g'
T 1568153879 18<hello__18>	https://paste.mozilla.org/WV3JkgKR
T 1568154015 18<twobitsprite18>	hello__: sed -i does in-place replacement. I don't know if the rest of your sed command is right because I'm not entirely sure what you want the replacement line to look like
T 1568154078 18<hello__18>	The replacement should be: https://paste.mozilla.org/FZgFk09b
T 1568154080 18*	b1tninja recognizes this hex string
T 1568154183 18<larryv18>	you want each character to be replaced by five hyphens?
T 1568154214 18<hello__18>	no it was what I am getting due to -e
T 1568154237 18<hello__18>	but I want to replace the whole string with five some hyphens
T 1568154293 18<larryv18>	hello__: ask ##sed, this ceased to be a bash question a long time ago
T 1568154400 18<twobitsprite18>	hello__: if you know the line before hand, why not just sed -e "s/^$MYVAR\$/-----" ?
T 1568154435 18<twobitsprite18>	larryv: people discuss sed in here all the time, not a big deal. bash is largely glue code between other posix tools anyway
T 1568154592 18<hello__18>	twobitsprite: It's throwing an error: sed: -e expression #1, char 161: unterminated `s' command
T 1568154606 18<twobitsprite18>	hello__: sorry, throw another / at the end
T 1568154625 18<twobitsprite18>	sed -e "s/^$MYVAR\$/-----/"
T 1568154725 18<hello__18>	I did something like this:
T 1568154728 18<hello__18>	MYVAR='1	6408545D7CA18C32E19C5948F9C8B89281900ED63125E6CCE797BA459D8DAC7D	6408545d7ca18c32e19c5948f9c8b89281900ed63125e6cce797ba459d8dac7d	NUM	CD	_	0	root	_	_'sed -e "s/^$MYVAR\$/-----/" > a
T 1568154757 18<twobitsprite18>	do you need a space between the closing ' and the sed command?
T 1568154775 18<hello__18>	But the terminal is on and on executing. Did I do something wrong?
T 1568154797 18<twobitsprite18>	also, if those are literally on the same line, it won't work, put a semi-colon between the variable and the sed
T 1568154800 18<hello__18>	actually there's enter between the two
T 1568154814 18<twobitsprite18>	oh, ok... what do you mean "terminal is on and on executing"?
T 1568154822 18<larryv18>	there's no stdin.
T 1568154849 18<kerframil18>	well, there is. it's just not being fed :)
T 1568154850 18<twobitsprite18>	ohh, yeah, you need to pipe the inpit file in to the sed command
T 1568154859 18<twobitsprite18>	hello__: ctrl-c
T 1568154865 18<hello__18>	oh I'm sorry
T 1568154867 18<larryv18>	kerframil: RAWR
T 1568154874 18<twobitsprite18>	sed -e "s/^$MYVAR\$/-----/" < input.file > a
T 1568154932 18<b1tninja18>	note that would interepert myvar as a regex
T 1568154962 18<twobitsprite18>	b1tninja: I'm just answering the question as asked. He said he's literally looking for this exact line, and it looks like it should be fine
T 1568154975 18<b1tninja18>	just warning
T 1568154985 18<b1tninja18>	i dont know how to escape it either
T 1568154997 18<b1tninja18>	pretty sure this is the guy from earlier anyway
T 1568155047 18<twobitsprite18>	b1tninja: it is: 17:10 < hello__> Hey, I am trying to delete specific lines using bash script
T 1568155089 18<b1tninja18>	perhaps just get all the lines that don't match?
T 1568155110 18<twobitsprite18>	yeah, could just grep -v
T 1568155132 18<twobitsprite18>	(but still have the issue that if the actual line has regex characters it'll break)
T 1568155157 18<hello__18>	Yes I'm the previous guy
T 1568155162 18<b1tninja18>	still want to know what MYVAR comes from
T 1568155163 18<twobitsprite18>	((but then could do grep -vF))
T 1568155172 18<hello__18>	Thanks it works
T 1568155202 18<hello__18>	MYVAR is the information in E_conll_file I have
T 1568155774 18<b1tninja18>	where does it come from though I guess was what I was wondering
T 1568155949 18<knstn18>	"translation" of python scripts to bash, is an "easy" task, or i should avoid it? i just wrote my first bisection program in python, and i would like to see it in bash, but i suck at it
T 1568155985 18<b1tninja18>	there are python scripts in the kernel, its pretty common to have python on a system, what systems do you need to support
T 1568156016 18<knstn18>	http://ix.io/1ULN this to bash script
T 1568156118 18<^18>	it depends on the python script. what you've posted is pretty easy in any language though
T 1568156350 18<HelloShitty18>	hello. How do I limit the amount of decimal places in the result of a mathematical operation, division in this case?
T 1568156375 18<HelloShitty18>	I'm printing the result using:
T 1568156393 18<b1tninja18>	printf format perhaps?
T 1568156397 18<HelloShitty18>	printf "Value: %s" "$val1"
T 1568156407 18<HelloShitty18>	printf "Value: %s\n" "$val1"
T 1568156422 18<Riviera18>	# printf '%.4f\n' 3.14159265358979
T 1568156423 18<shbot18>	Riviera: 3.1416
T 1568156433 18<b1tninja18>	are you not wanting it to round?
T 1568156445 18<b1tninja18>	oh you're answering
T 1568156476 18<HelloShitty18>	I want it to round tho the 8th decimal place
T 1568156497 18<b1tninja18>	check out Riviera's answer
T 1568156501 18<larryv18>	so… %.8f ?
T 1568156502 18<HelloShitty18>	thanks
T 1568156509 18<HelloShitty18>	going to try it
T 1568156514 18<HelloShitty18>	I was doing another thing wrong
T 1568156520 18<HelloShitty18>	using %s insteead of %f
T 1568156528 18<b1tninja18>	yes s is string, f is float
T 1568156580 18<Riviera18>	Note the number format (both in- and output) is subject to the current locale.
T 1568156698 18<Riviera18>	# LC_NUMERIC=et_EE.utf8; printf %.2f 3,999
T 1568156699 18<shbot18>	Riviera: 4,00
T 1568156729 18<HelloShitty18>	wait
T 1568156734 18<HelloShitty18>	explain that to me, please
T 1568156803 18<HelloShitty18>	The operation I'm running is the return value of a command, divided by the number of lines read from a file
T 1568156824 18<kerframil18>	see https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html
T 1568156838 18<HelloShitty18>	So, I run a command and it returns a value and I divide that value by the number of lines read from a file
T 1568156844 18<HelloShitty18>	ok, let me see
T 1568156845 18<Riviera18>	The first command sets the locale for numbers to Estonian conventions, and AFAIK a comma is used as decimal point in Estonia.
T 1568156847 18<HelloShitty18>	I know that site
T 1568156865 18<HelloShitty18>	I use to use it for C programming reference functions and etc
T 1568156866 18<Riviera18>	Hence printf expects that for a numerical value, and it prints that.
T 1568156891 18<Riviera18>	The tricky part is that your shell tries to be two things at the same time, and interactive environment that's talking to users,
T 1568156898 18<Riviera18>	and a programming language.
T 1568156939 18<Riviera18>	So for the former having localised numbers is great, but for the latter it's annoying.
T 1568156961 18<Riviera18>	The other tricky part is that the shell tends to process output from other commands which may or may not respect the current locale.
T 1568156967 18<HelloShitty18>	yeah, and I'm only starting to write my 1st functional small script
T 1568156983 18<HelloShitty18>	so I'm kind of oblivious of those many details
T 1568156997 18<Riviera18>	in that case just set the locale to C and learn that part later. :D
T 1568157010 18<Riviera18>	alternatively learn a friendlier language for scripting
T 1568157044 18<HelloShitty18>	I need it to be bash script because it easies tasks of running terminal programs
T 1568157063 18<HelloShitty18>	store the return values and use those return values for future commands and automation processes
T 1568157070 18<Riviera18>	:)
T 1568157112 18<HelloShitty18>	I know I could do the same with C but it would be more complex to parse commands to run them in terminal and "collect" their return values
T 1568157137 18<HelloShitty18>	I don't know what would it be like with python but seems probably a bit like C, but not a clue though
T 1568157138 18<larryv18>	there are quite a few alternatives between bash and C.
T 1568157192 18<HelloShitty18>	Gimme a couple of examples so that I can consider, :p
T 1568157208 18<HelloShitty18>	however I think I'll stick to bash, at least for now
T 1568157214 18<HelloShitty18>	until things are still quite simple
T 1568160801 18<SJr18>	How do I capture a multi line string into a variable and then echo it to a file?
T 1568160959 18<also_uplime18>	https://clbin.com/Dzj4d
T 1568161585 18<dreisner18>	!faq 1 > SJr
T 1568161586 18<greybot18>	SJr: https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
T 1568161637 18<dreisner18>	SJr: where does this string come from? what are you doing with it before you write it to the file? i.e. why can't it just go directly to the file.
T 1568161711 18<SJr18>	dreisner, yeah I decided I'd just work with files.
T 1568166843 18<kurahaupo18>	!sed-i > It seems like it might be time to remind or inform some of our new regulars about this faq, as I've seen two people recommend sed -i in the last 2 hours:
T 1568166844 18<greybot18>	It seems like it might be time to remind or inform some of our new regulars about this faq, as I've seen two people recommend sed -i in the last 2 hours:: Some sed(1)s have -i which claims to "modify" files. It does not: sed is not a FILE editor. The -i flag re-writes the entire file and replaces the original with the new. This breaks open handles and hard-link sets, and fails to follow symlinks. -i is also unportable: valid
T 1568166908 18<kurahaupo18>	valid alternatives include ed or ex
T 1568193167 20*	Disconnected (20)
T 1568193192 19*	Now talking on 22#bash
T 1568193192 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568193192 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568193192 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568193647 18<nony18>	There is a file something like:  https://paste.mozilla.org/A7y5oui2 I want to replace the part: ```(MAXX  (WXCVD    (AB (CD 12345ABCD1234))    (. .))) with "****"   ```
T 1568194785 18<nony18>	 I want to replace the part: (MAXX  (WXCVD    (AB (CD 12345ABCD1234))    (. .))) with  "****"
T 1568195141 18<isomari18>	greetings, is there a bash equivalent to zsh setopt share_history?
T 1568195896 18<Riviera18>	isomari: Perhaps explain briefly what that zsh feature is.
T 1568196270 18<mnemonic18>	can i change the value of "last" var inside the loop? or it act like a constant?  for (( i=0; i<last; i++ )); do
T 1568196457 18<go|dfish18>	# last=5; for ((i=1;i<last;i++)) do ((i==2)) && last=1; echo $i; done
T 1568196459 18<shbot18>	go|dfish: 1
T 1568196459 18<shbot18>	go|dfish: 2
T 1568196757 18<mnemonic18>	go|dfish: I feel I am not very smart... thank you
T 1568198135 18<nony18>	Greetings!
T 1568198444 18<nony18>	I want to replace n lines from my file where the first few lines are reoccurring many times, so is there a way by which I can search a line and delete n lines above it and m lines below it, and at the end replace it...something equivalent?
T 1568198465 18<nony18>	I'm actually a total novice in bash scripting
T 1568198477 18<Soliton18>	!have
T 1568198478 18<nony18>	Sorry for being impatient
T 1568198479 18<greybot18>	"I have ____ and I want ____." Fill in the blanks.
T 1568198568 18<nony18>	https://paste.mozilla.org/nW7XjGvv
T 1568198576 18<nony18>	Something like this
T 1568200048 18<wwilliam18>	I know this is not a bash question but does anyone here uses neofetch and if so  how do i add text after the system info?
T 1568203140 18<{xmb}18>	i wanna code a coproc gawk that reads different fd's, ..how to initialize them
T 1568203338 18<rafasc18>	wwilliam: use: prin "RTFM" 'I didnt search the docs'
T 1568203713 18<{xmb}18>	'empty fd init-part' ? 'coproc awk { gawk ..; } 3<[whathere]' to be used for later printf into /proc/gawk/fd/3
T 1568203762 18<{xmb}18>	rather in the gawk part than outside }, but how to complete the 3<..
T 1568204313 18<b1tninja18>	coproc
T 1568204344 18<b1tninja18>	oh you already are using that
T 1568204379 18<geirha18>	and he left 7 minutes ago
T 1568204391 18<b1tninja18>	coproc should give you back an array, so like blah[1] would be damn
T 1568205569 18<{xmb}18>	how to initialize fds in coproc  for later use
T 1568205773 18<{xmb}18>	i have to fifo ? i hope not
T 1568205915 18<{xmb}18>	geirha oh fd master
T 1568206004 18<{xmb}18>	hi greycat
T 1568206041 18<{xmb}18>	im stuck.. i have to coproc gawk to read a couple of fds later; but i dunno how to create them
T 1568206083 18<greycat18>	sounds like a question for #awk
T 1568206107 18<{xmb}18>	ok well, ill try, but, u know no 'empty fd handle for use for later' such ?
T 1568206143 18<{xmb}18>	cause, the gawk folks will tell me 'use bashs 3<[whathere]' but its in coproc for later use only, not file on init time
T 1568206157 18<greycat18>	I have absolutely no idea what you are even talking about.
T 1568206182 18<greycat18>	An "empty fd" makes no sense at all.  A file descriptor is opened for reading, for writing, for appending, or for reading+writing.
T 1568206239 18<{xmb}18>	i try: $ coproc a { gawk '<read fd 3 and 4 and such>'; }
T 1568206260 18<greycat18>	and who opens fd 3 and 4?  awk, or bash?
T 1568206272 18<{xmb}18>	they aint open, thats the problem
T 1568206279 18<greycat18>	sounds like you know what to do, then
T 1568206304 18<{xmb}18>	i dont, its for later use, like printf data >/proc/awk/fd/3
T 1568206321 18*	greycat waits for someone to ask a question that makes sense
T 1568206323 18<{xmb}18>	i figured at best gawk .. 3< <( some read loop or cat )
T 1568206359 18<{xmb}18>	and i dunno a gawk way to open fd's
T 1568206398 18<greycat18>	08:48  greycat> sounds like a question for #awk
T 1568206414 18<{xmb}18>	:/
T 1568206468 18<{xmb}18>	the bash part is without coproc 'gawk .. 3< <whatever>' - but with coproc i dunno the statement to create the fd 3
T 1568206510 18<{xmb}18>	i dont wanna use fifos really, im looking for a bash intern solution
T 1568206569 18<{xmb}18>	coproc a { gawk .. 3<fifo3 4<fifo4; } #<- but how to without fifos that
T 1568206816 18<{xmb}18>	aka 'how to create fd's for later printf into them use'
T 1568206940 18<{xmb}18>	!fd
T 1568206940 18<greybot18>	http://mywiki.wooledge.org/FileDescriptor
T 1568207361 18<greycat18>	If you want FD 3 to be open for writing to a bash process substitution (background piped thing), then open FD 3 for writing to the process substitution.  Simple.
T 1568207399 18<{xmb}18>	i dont understand :/
T 1568207412 18<greycat18>	exec 3> >(logger or whatever)
T 1568207417 18<greycat18>	gawk '... thing that uses fd 3'
T 1568207418 18<greycat18>	exec 3>&-
T 1568207435 18<elphe18>	hi. vim has an option called 'showcmd' that allows for keys/commands to be displayed in statusline as they are entered. hoping to do something similiar in zsh where by there would be an indication if <esc> had been tapped and the shell is waiting to see if its the first part of a multi-char sequence. is there some kind of public flag that registers if the sheel is in waiting for keytimeout?
T 1568207442 18<{xmb}18>	aha, i have to figure what to do inside the >( .. )
T 1568207458 18<greycat18>	... you were supposed to know this already.
T 1568207461 18<elphe18>	sorry. wrong channel
T 1568207470 18<{xmb}18>	maybe >( : ) is enuff
T 1568207504 18<greycat18>	completely ridiculous.  if you want output to fd3 to be discarded, open it for writing to /dev/null.
T 1568207561 18<{xmb}18>	aha, im trying.. thx
T 1568207850 18<{xmb}18>	i really dont get it
T 1568207858 18<greycat18>	what are you trying to do
T 1568207990 18<{xmb}18>	a code gen for shortened coding, for 'if' there should be minimally a few fd's, stdin will say 'if' then it reads fd 3 == 'ifcode', fd 4 for 'then code', fd 5 for 'else code', and some special format of fd6/7 for elif codes
T 1568208009 18<greycat18>	that made no sense at all
T 1568208016 18<{xmb}18>	:/ lemme try rephrasing
T 1568208074 18<{xmb}18>	im also stuck at serializing the codes
T 1568208138 18<{xmb}18>	if i would do a if function that takes a couple of args, like ifcode thencode etc, and use that if thencode for another if, in functions, i can mark all variables local, but no function no local = vars getoverwritten by insidest nested same code
T 1568208178 18<greycat18>	I think your meds need adjustment.
T 1568208193 18<greycat18>	In any case, whatever you're doing, bash is not suited for it.
T 1568208205 18<{xmb}18>	i figured but it seems not true, that with expanded code for eval i can serialize easiestly, but the gawk coproc way is stuck at fd's where i would need fifos for printf here and there in which i really dont like
T 1568208237 18<greycat18>	file descriptors have no connection to commands passed as arguments and being eval'ed
T 1568208243 18<{xmb}18>	well i heard many so, i just know bash and gawk, and had earlier already half-success with shorts
T 1568208284 18<{xmb}18>	yea i would have used the fd's in gawk to printf specific user-given codes and then the gawk gen's the bash code for eval
T 1568208295 18<han-solo18>	do one feel like, you don't know anything and just... feel so numb ?
T 1568208308 18<greycat18>	you're just going to keep prattling this crap all day long, aren't you.  *plonk*
T 1568208319 18<{xmb}18>	no, im a sensible guy
T 1568208327 18<{xmb}18>	u just have to insult me away once and there
T 1568208352 18*	han-solo was taking about himself
T 1568208371 18<han-solo18>	i have been feeling that recently :/
T 1568208409 18<mooasaurus18>	weekly morning #bash circus time
T 1568208429 18<{xmb}18>	han-solo thats cause enemish influence, not normal stuff
T 1568208430 18<greycat18>	In Tcl, "if" is a command.  It takes a variable number of arguments, but certain numbers of arguments are not allowed.  Like, it can't just have one argument.  It must have at least two.  If there are two arguments, the first one is a script to be executed, whose return value is checked.  If the return value is nonzero (true), the second argument (another script) is executed.
T 1568208451 18<greycat18>	err, the first argument isn't actually a script. it's an expression with a specific syntax.
T 1568208481 18<greycat18>	so you would write something like   if {$x < 3} {puts "hi"}   which is the if command being given two arguments.
T 1568208499 18<greycat18>	{...} is a form of quoting, kind of like bash's '...' except it can be nested.
T 1568208501 18<{xmb}18>	its siiliar what i want
T 1568208510 18<greycat18>	It sounds like xmb wanted to recreate Tcl's if syntax in bash.
T 1568208514 18<Riviera18>	Perhaps xmb should learn tcl.
T 1568208535 18<{xmb}18>	i cannot learn more, i have no support to, eg dunno ppl and the docs and reads are bad
T 1568208535 18<greycat18>	Except then he went totally batshit crazy and started talking about file descriptors for NO discernable reason.
T 1568208581 18<Riviera18>	{xmb}: ok
T 1568208586 18<greycat18>	Now, if someone wanted to write an "if"-like function in bash that takes 2 arguments, the first one being a set of commands to eval, and the second one being a set of commands to eval if and only if the first set exited 0 (true), that can be dne.
T 1568208590 18<greycat18>	done.
T 1568208593 18<{xmb}18>	i only figured i have to use fifos yet.. what i meant by my quesiton is like: 'how to open a couple of fd's for gawk as coproc read them later' when i try > or <> /dev/null it just closes the fd, eg reads nothing
T 1568208611 18<greycat18>	if2() { eval "$1" && eval "$2"; }
T 1568208618 18<Riviera18>	greycat: yup that's nice
T 1568208624 18<greycat18>	if2 'false; true' 'echo hi'
T 1568208633 18<greycat18>	that's very Tcl-esque
T 1568208645 18<{xmb}18>	lol thats a nice alterntive approach
T 1568208659 18<{xmb}18>	however my if alias has to have the same args as the original if
T 1568208662 18<greycat18>	Extending that to accept other numbers of arguments, like Tcl's if does, is left as an exercise.
T 1568208691 18<{xmb}18>	its as much as 'while "expr" "docode"' but as aliases instead of functions
T 1568208698 18<greycat18>	This has nothing to do with file descriptors, or process substitutions, or coprocs, or /dev/fd, or gawk.
T 1568208716 18<{xmb}18>	hm :/
T 1568208753 18<{xmb}18>	i nearly give up then
T 1568208866 18<{xmb}18>	'i want to do: exec fd3; coproc gawk ..fd3code..; printf 'something' >&fd3; read coprocs fd 0 for gawks output
T 1568208950 18<{xmb}18>	i tried like you said exec 3>/dev/null it wont work, returns empty or similiar, and 3<>/dev/null is clear returns null
T 1568208972 18<{xmb}18>	somewhere inside the gawk and coproc i have to place fd definitions too that i dont know
T 1568208987 18<{xmb}18>	the other way i see is redirect fd3+ to from fifos
T 1568208999 18<{xmb}18>	but i hate the fifo creation process, and tmp paths, and and
T 1568209089 18<{xmb}18>	exactly what gawk .. 3<fifo3 does but without fifos, for later printf in use, no out
T 1568209312 18<{xmb}18>	[ as your statements its not a bash q i didnt see any match to my requirements / question ]
T 1568209621 19*	Now talking on 22#bash
T 1568209621 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568209621 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568209622 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568209641 18<mknod18>	"source [...]  The return status is the exit status of the last command executed."
T 1568209660 18<{xmb}18>	..yes ?
T 1568209691 18<mknod18>	Has anyone figured out a way to catch _any_ error that may occur in the sourced file when invoking the builtin?
T 1568209702 18<mknod18>	{xmb}, I'm sure you didn't.
T 1568209718 18<{xmb}18>	if i understood right, catch $? be non null inside DEBUG trap
T 1568209734 18<{xmb}18>	optionally with LINENO and other shikkis
T 1568209753 18<{xmb}18>	or return trap or whatever that name was
T 1568209756 18<{xmb}18>	not debug trap
T 1568209833 18<lopid18>	mknod: "set -e" >:)
T 1568209841 18<mknod18>	lol
T 1568209908 18<{xmb}18>	# printf >b -- '\n%s\n' true false true; trap $'sav="$?"; [[ "$sav" != 0 ]] && printf -- \'%s\' \'err line $LINENO cmd $BASH_COMMAND\n' return; . b
T 1568209909 18<shbot18>	{xmb}: bash: return trap: line 1: unexpected EOF while looking for matching `''
T 1568209909 18<shbot18>	{xmb}: bash: return trap: line 2: syntax error: unexpected end of file
T 1568210008 18<mooasaurus18>	just looking at this coproc for once.. would this be a viable alternative to finding the PID of a forked process in init scripts instead of relying on flat pid files?
T 1568210029 18<{xmb}18>	$! is the pid of the last cmd
T 1568210041 18<{xmb}18>	its just ran aside with redirected fds
T 1568210077 18<twkm18>	mooasaurus: barely.
T 1568210114 18<{xmb}18>	# trap 'printf -- %s\\n "$LINENO _ $BASH_COMMAND"' err; printf >b \\n%s\\n true false true; . b
T 1568210115 18<shbot18>	{xmb}: 4 _ false
T 1568210118 18<{xmb}18>	mknod such ?
T 1568210121 18<Soliton18>	if you forked the process then there is nothing to find. you know the PID.
T 1568210195 18<{xmb}18>	# trap 'printf -- %s\\n "$? -> $(( LINENO - lineno )) -> $BASH_COMMAND"' err; printf >b \\n%s\\n true false true; lineno="$LINENO" . b
T 1568210196 18<shbot18>	{xmb}: 1 -> 3 -> false
T 1568210205 18<mknod18>	lopid, a temporary trap on ERR might be my answer.
T 1568210254 18<lopid18>	just as with any script, if any error occurs, you probably want to deal with it appropriately then and there
T 1568210284 18<{xmb}18>	# trap 'printf -- %s\\n "$? -> $(( LINENO - lineno -1 )) -> $BASH_COMMAND"' err; printf >b \\n%s\\n true false true; lineno="$LINENO"; . b
T 1568210286 18<shbot18>	{xmb}: 1 -> 2 -> false
T 1568210302 18<{xmb}18>	       traps), and the ERR trap is not inherited unless the -o errtrace  shell
T 1568210309 18<mknod18>	lopid, error handling becomes more challenging as soon as sourcing a file is part of an algorithm
T 1568210347 18<lopid18>	i was referring to in the sourced file
T 1568210380 18<Soliton18>	error handling becomes impossible as soon as you try to do it on code you didn't write.
T 1568210493 18<mknod18>	the sourced file is a "definition file", nothing but some array assignments inside
T 1568210520 18<mooasaurus18>	Soliton: as a human being yes, I could find the PID, but the problem would be the init script when ran again (eg. to restart a already running process) wouldn't know the original PID. unless I'm misunderstanding you
T 1568210520 18<{xmb}18>	and does the err trap work then
T 1568210521 18<lopid18>	for now!
T 1568210535 18<mknod18>	lopid, _forever_.
T 1568210543 18<greycat18>	... init ... script
T 1568210547 18<greycat18>	!date
T 1568210547 18<greybot18>	Wed Sep 11 14:02:26 2019
T 1568210554 18<greycat18>	It's 2019.
T 1568210567 18<mooasaurus18>	yes, some servers still live in the stone ages
T 1568210574 18<{xmb}18>	moo, u can export mypid="$$"
T 1568210576 18<lopid18>	quite right. lopid forever
T 1568210586 18<greycat18>	so you installed daemontools or runit on this stone-age server, right?
T 1568210587 18<{xmb}18>	[[ "$mypid" ]] && echo already working
T 1568210659 18<mooasaurus18>	I'm not answering that..
T 1568210668 18<mknod18>	Soliton, so just to set the record straight I do write the code myself, but since it's more of a configuration file, any typo in the Bash syntax should be handled properly.
T 1568210675 18<{xmb}18>	so you violate the open source knowledge license ?
T 1568210704 18<{xmb}18>	bash -n it for syntax errs
T 1568210719 18<greycat18>	well, if you're writing some variant of a sysv-rc init.d script to manage a service, you have my pity, my scorn, and my ridicule, but you've made your decisions, and now you get to live with their consequences
T 1568210746 18<greycat18>	your OS channel may have advice on their particular flavor of sysv-rc hell
T 1568210765 18<{xmb}18>	i used to have my own init= boot script, ..
T 1568210778 18<mooasaurus18>	I realize this, but it's what was supported by the OS
T 1568210796 18<greycat18>	your OS channel can tell you whether their sysv-rc services parses cryptic strings placed in the comments of the init.d script or not, whether there are "helper" prorgams like start-stop-daemon that you are expected to learn and wrestle with or not, etc.
T 1568210826 18<greycat18>	25 years of duct tape and jury-rigged rube goldberg devices stacked on top of one another
T 1568210917 18<Soliton18>	mknod: how is a syntax error not going to terminate the source command?
T 1568210942 18<mknod18>	Soliton, not all errors are fatal
T 1568210984 18<Soliton18>	so not a typo in the bash syntax, ok.
T 1568211027 18<mknod18>	# echo 'foo="foo"; bar="bar; baz="baz"' > file.sh; source file.sh; echo "do more stuff"
T 1568211028 18<shbot18>	mknod: bash: file.sh: line 1: unexpected EOF while looking for matching `"'
T 1568211028 18<shbot18>	mknod: bash: file.sh: line 2: syntax error: unexpected end of file
T 1568211028 18<shbot18>	mknod: do more stuff
T 1568211071 18<timvisher18>	greycat: I'm curious. Is there any place I can read about or would you mind telling me why you (and others here) don't use bash-completion? Is it just force of habit? Or something else?
T 1568211084 18<mooasaurus18>	greycat: start-stop-daemon is a piece of garbage, and was wondering if coproc would be a viable solution for such a tool
T 1568211089 18<greycat18>	It breaks things and it's huge and bloated and why would I want it?
T 1568211108 18<Soliton18>	# echo 'foo="foo"; bar="bar; baz="baz"' > file.sh; source file.sh || echo "handle error"
T 1568211109 18<shbot18>	Soliton: bash: file.sh: line 1: unexpected EOF while looking for matching `"'
T 1568211109 18<shbot18>	Soliton: bash: file.sh: line 2: syntax error: unexpected end of file
T 1568211109 18<shbot18>	Soliton: handle error
T 1568211168 18<mknod18>	Soliton, that works because variable assignation don't have exit status actually...
T 1568211192 18<mknod18>	but, that seems more fragile than:
T 1568211193 18<mknod18>	# echo 'foo="foo"; bar="bar; baz="baz"' > file.sh; trap 'echo "oops!"; exit 1' ERR;  source file.sh; trap - ERR; echo "do more stuff"
T 1568211196 18<shbot18>	mknod: bash: file.sh: line 1: unexpected EOF while looking for matching `"'
T 1568211196 18<shbot18>	mknod: bash: file.sh: line 2: syntax error: unexpected end of file
T 1568211196 18<shbot18>	mknod: etc... ( http://ix.io/1UON )
T 1568211233 18<mknod18>	am I wrong?
T 1568211447 18<Soliton18>	# echo 'foo="foo"; bar="$(false)"' > file.sh; trap 'echo "oops!"; exit 1' ERR;  source file.sh; trap - ERR; echo "do more stuff"
T 1568211448 18<shbot18>	Soliton: oops!
T 1568211448 18<shbot18>	Soliton: (shell exited with 1)
T 1568211556 18<mknod18>	I'm torn between "this sucks" and "totally intended behavior"
T 1568211593 18<mknod18>	Though I favor the latter
T 1568212291 18<wwilliam18>	Hello If I listen to shellcheck the files dont get cpied.:
T 1568212293 18<wwilliam18>	Line 82:
T 1568212294 18<wwilliam18>	screen -dmS ny bash -c 'cd "$1" && find "$5" -maxdepth 1 -type f -name "*"$7"*" -exec cp -v -- {} "$8" \;; exec bash' bash "$wdir" "$user" "$host" "$nydir" "$nymntpnt" "$pword" "$jid" "$dst";                        break
T 1568212296 18<wwilliam18>	                       ^-- SC2016: Expressions don't expand in single quotes, use double quotes for that.
T 1568212359 18<jan618>	that's a warning, not an error
T 1568212386 18<jan618>	because most of the time you're not doing bash -c
T 1568212408 19*	Now talking on 22#bash
T 1568212408 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568212408 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568212408 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568212425 18<jan618>	also I'd really reccommend not using bash -c and such here, but make a script file for that
T 1568212427 18<wwilliam18>	OK thank you jan6
T 1568212635 18<Soliton18>	$7 is not quoted.
T 1568212676 18<jan618>	also that, same for $8
T 1568212685 18<jan618>	nevermind
T 1568212701 18*	jan6 should clean his glasses
T 1568212705 18<mknod18>	# echo 'foo="foo"; bar="bar; baz="baz"' > file.sh; trap 'return 1' ERR;  source file.sh || { echo "oops!"; exit 1; }; trap - ERR; echo "do more stuff"
T 1568212707 18<shbot18>	mknod: bash: file.sh: line 1: unexpected EOF while looking for matching `"'
T 1568212707 18<shbot18>	mknod: bash: file.sh: line 2: syntax error: unexpected end of file
T 1568212707 18<shbot18>	mknod: etc... ( http://ix.io/1UOX )
T 1568212714 18<mknod18>	seems like a good balance
T 1568212733 18<mknod18>	works in functions as well
T 1568212739 18<mknod18>	echo 'funk() { echo "james brown; }; funk' > file.sh; trap 'return 1' ERR;  source file.sh || { echo "oops!"; exit 1; }; trap - ERR; echo "do more stuff"
T 1568212742 18<mknod18>	# echo 'funk() { echo "james brown; }; funk' > file.sh; trap 'return 1' ERR;  source file.sh || { echo "oops!"; exit 1; }; trap - ERR; echo "do more stuff"
T 1568212744 18<shbot18>	mknod: bash: file.sh: line 1: unexpected EOF while looking for matching `"'
T 1568212744 18<shbot18>	mknod: bash: file.sh: line 2: syntax error: unexpected end of file
T 1568212744 18<shbot18>	mknod: etc... ( http://ix.io/1UOX )
T 1568212780 18<wwilliam18>	Soliton: what do you mean remove the quotes of $7 and $8?
T 1568212800 18<mknod18>	this allows to do the error handling outside of the trap command.
T 1568213059 18<Keytap18>	Morning all.  Are there any built-in generic methods of converting a byte value to human readable format?
T 1568213065 18<jan618>	# echo 'funk() { echo "james brown"; }; funk' > file.sh; trap 'return 1' ERR;  source file.sh || { echo "oops!"; exit 1; }; trap - ERR; echo "do more stuff"
T 1568213066 18<shbot18>	jan6: james brown
T 1568213066 18<shbot18>	jan6: do more stuff
T 1568213072 18<jan618>	fixed yer quote ;P
T 1568213239 18<mknod18>	jan6, though james brown is still overrated imho
T 1568213254 18<mknod18>	for anyone wondering, this now works beautifully
T 1568213266 18<mknod18>	$ bankloupe
T 1568213267 18<mknod18>	./definition/70055377XXX.sh: line 9: syntax error near unexpected token `('
T 1568213268 18<mknod18>	./definition/70055377XXX.sh: line 9: `category_filter_credit=('
T 1568213268 18<mknod18>	./definition/70055377XXX.sh: line 12: any: command not found
T 1568213270 18<mknod18>	bankloupe: Error while sourcing definition file `70055377XXX.sh'.
T 1568213289 18<Riviera18>	Keytap: what do you mean? To print the bits?
T 1568213383 18<jan618>	Keytap: do you mean hex values to characters? or something else?
T 1568213445 18<han-solo18>	human readable....
T 1568213478 18<mknod18>	Keytap, human readable, but in which base
T 1568213595 18<Keytap18>	mknod: I'd be fine with megabytes for my needs at the moment, but ideally just the smallest base it'll go into without being totally fractional
T 1568213612 18<mknod18>	not that kind of base
T 1568213619 18<greycat18>	!faq hex
T 1568213620 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/071 -- How do I convert an ASCII character to its decimal (or hexadecimal) value and back? How do I do URL encoding or URL decoding?
T 1568213624 18<mknod18>	like, base 16, base 2?
T 1568213648 18<Keytap18>	mknod: Base 10 would be preferred
T 1568213659 18<mknod18>	this is the worst!
T 1568213660 18<jan618>	there are plenty hex viewers and such, if you want to visualize the bytes, also "od" might help
T 1568213679 18<mknod18>	he's asking for built-in...
T 1568213686 18<jan618>	that, yeah, dream on ;P
T 1568213687 18<mknod18>	printf may help
T 1568213711 18<Keytap18>	(e.g.:  'echo "1535" | asdf' might print "1.5KB")
T 1568213730 18<jan618>	that's a whole different thing
T 1568213732 18<greycat18>	!du-h
T 1568213733 18<greybot18>	du -sk "$@" | sort -n | awk -F '\t' -v OFS='\t' '{if ($1 > 1048576) $1 = sprintf("%.1fG",$1/1048576); else if ($1 > 1024) $1 = sprintf("%.1fM",$1/1024); else $1 = sprintf("%sK",$1)} 1'
T 1568214033 18<repys18>	how can I use an env var in AWK?
T 1568214040 18<repys18>	export var1=test
T 1568214045 18<repys18>	how can I use var1 in awk?
T 1568214064 18<greycat18>	https://mywiki.wooledge.org/BashProgramming/05#Environment_variables
T 1568214143 18<repys18>	I've tried with awk -v var1=$VAR1 -F',' '{mycommand $var1}'
T 1568214147 18<repys18>	but it doesn't work
T 1568214157 18<greycat18>	if you DON'T want to use environment variables, then...
T 1568214160 18<greycat18>	!awk-v
T 1568214160 18<greybot18>	The correct way to get a shell variable into awk is with awk's -v flag, not by putting the $var into the awk code. var=foo; awk -v name="$var" 'BEGIN{print "Hello " name}'
T 1568214161 18<twkm18>	try asking #awk.
T 1568214181 18<twkm18>	but, not $var1 inside awk.
T 1568214185 18<greycat18>	that is ALSO on the same wiki page I already gave you
T 1568214187 18<twkm18>	just var1.
T 1568214201 18<repys18>	but I've tried with var1 also and not working too
T 1568214210 18<greycat18>	Try the examples you were given.
T 1568214228 18<twkm18>	argusbr: too late, everyone knows your address -- ask #help about it.
T 1568214239 18<han-solo18>	:)
T 1568214281 18<twkm18>	that "mycommand" is suspect anyway.
T 1568214507 18<twkm18>	# echo 1,2,3 | awk -v "var1=surprise" -F',' '{print var1 "," $0}'
T 1568214508 18<shbot18>	twkm: surprise,1,2,3
T 1568214601 18<repys18>	export KAFKACLUSTER=server1:9090,server2:9090
T 1568214601 18<repys18>	export KAFKATOPIC=/kafka/bin/kafka-topics
T 1568214601 18<repys18>	export AWK=/usr/bin/awk
T 1568214601 18<repys18>	echo $AWK -v kafkacluster="$KAFKACLUSTER" -F',' '{ system("kafka-topics --create --bootstrap-server kafkacluster --topic "$1" --replication-factor "$2" --partitions "$3"") }' topics
T 1568214612 18<greycat18>	jesus christ, stop that shit
T 1568214613 18<repys18>	why kafkacluster is not replaced with correct values ?
T 1568214614 18<greycat18>	!path
T 1568214614 18<greybot18>	The PATH variable defines where your commands are. Don't do stupid things like GREP=/usr/bin/grep; $GREP foo bar. Just use grep foo bar in the first place. If you aren't sure what your PATH contains, set it yourself.
T 1568214636 18<greycat18>	repys: because "kafkacluster" is part of a quoted string, not a variable reference.
T 1568214670 18<greycat18>	you see how you broke the quotes for $1 and $2?  do that for kafkacluster also.
T 1568214705 18<Soliton18>	!injection
T 1568214705 18<greybot18>	Don't pass user-supplied data in a context where it could be interpreted as code. BAD: ssh host "rm $file"; GOOD: ssh host "$(printf 'rm %q' "$file")"; see http://mywiki.wooledge.org/BashProgramming/05
T 1568214708 18<repys18>	I get the same result
T 1568214720 18<repys18>	even if I put it in the double quote :(
T 1568214735 18<twkm18>	sheesh.
T 1568214741 18<greycat18>	# awk -v kafka=franz 'BEGIN {print "system blah blah " kafka " foo bar"}'
T 1568214742 18<shbot18>	greycat: system blah blah franz foo bar
T 1568214745 18<twkm18>	see my example for how to use a variable.
T 1568214750 18<twkm18>	or that.
T 1568214760 18<greycat18>	They've been given HALF A DOZEN examples by now.
T 1568214819 18<repys18>	I'm getting crazy
T 1568214825 18<repys18>	tried in all manner
T 1568214827 18<greycat18>	reading Kafka will do that
T 1568214878 18<Soliton18>	!guessing
T 1568214879 18<greybot18>	You can't just make shit up and expect the computer to magically know what you mean.
T 1568214911 18<Soliton18>	it's shell injection anyway so probably better if it doesn't work.
T 1568214916 18<greycat18>	true.
T 1568214962 18<twkm18>	have you considered reading the awk documentation repys?
T 1568214991 18<greycat18>	while IFS=, read -r one two three _; do kafka-topic --create --bootstrap-server "$KAFKACLUSTER" --topic "$one" --replication-factor "$2" --partitions "$3"; done < topics
T 1568215002 18<greycat18>	There.  No awk, no awk problems.
T 1568215012 18<greycat18>	crap.
T 1568215022 18<greycat18>	while IFS=, read -r one two three _; do kafka-topic --create --bootstrap-server "$KAFKACLUSTER" --topic "$one" --replication-factor "$two" --partitions "$three"; done < topics
T 1568215107 18<repys18>	what's the read -r one two three _; ?
T 1568215112 18<greycat18>	!faq 1
T 1568215112 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
T 1568215462 18<repys18>	thanks
T 1568215796 18<_wuseman18>	Heya! What you guys think is the best way for run 10 commands in row and after every 10 attempt do a new command over and over again, this is for curl + tor I want to change ip after every 10 attempt
T 1568215860 18<greycat18>	A loop, with a counter variable in it.
T 1568215881 18<_wuseman18>	https://imgur.com/a/3BBd4zl this is how I do it today but thats easy since i grepping the word blocked when pastebin has blocked me
T 1568215886 18<_wuseman18>	ok
T 1568215898 18<greycat18>	!paste
T 1568215899 18<greybot18>	Paste short snippets (<= 5 lines) in channel. Paste more using https://gist.github.com/ or http://paste.debian.net/ or see !ix or !sprunge. Please don't use pastebin.com -- it's full of ads and mangles whitespace. NEVER upload screen shots. Don't use a paste site that requires Javascript, or registration to view raw.
T 1568215920 18<greycat18>	ix.io has been popular lately
T 1568216088 18<_wuseman18>	they sucks
T 1568216115 18<_wuseman18>	nr1.nu
T 1568216223 18<twkm18>	a picture of text?  that sucks too.
T 1568216273 18<greycat18>	Are the common decency/sense guidelines really that hard?  Don't upload screen shots of text.  Don't use pastebin.com.  Don't use a site that requires Javascript.  Don't use a site with no raw.  Don't use a site that requires login to view raw.
T 1568216314 18<greycat18>	I'm sure there will be additions to this as the horrible evil monsters devise new and crueler ways to fuck you.
T 1568216335 18<greycat18>	Whoever came up with some of this shit deserves a long and painful death.
T 1568216417 18<_wuseman18>	You must have a boring life if this bothering you so much
T 1568216454 18<_wuseman18>	takes 1 minute to create a  tcl script for this
T 1568216464 18<greycat18>	so, that happened.  are you already ignored with trailing _ instead of leading _, I wonder.
T 1568216468 18<_wuseman18>	and you don't need to bother anymore if it's a big problem, just saying
T 1568216471 18<emg18>	greycat: you should host a #bash approved paste site on wooledge.org!!
T 1568216487 18<rafasc18>	greycat: assuming the ones that mine bitcoin while you're on the site are included on the requires js. I've seen one of those somewhere.
T 1568216496 18<greycat18>	Hmm, nope.  Oh well.  Stars fore and aft, it is.
T 1568275714 20*	Disconnected (20)
T 1568275739 19*	Now talking on 22#bash
T 1568275739 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568275739 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568275739 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568279449 18<YuGiOhJCJ18>	hello, I am wondering why one of my bash process name is '-bash' instead of 'bash' using the 'ps' or 'htop' commands (with the 'top' command however, it shows 'bash'), any idea or documentation about this prefix '-' for the 'bash' process name please?
T 1568279521 18<Soliton18>	"A login shell is one whose first character of argument zero is a -, or one started with the --login option."
T 1568279561 18<YuGiOhJCJ18>	oh thanks, it is in the man of bash
T 1568280169 18<obiwahn18>	hi, i can not join sed because i lack an inviation
T 1568280198 18<obiwahn18>	but i have a question about it so i ask here and hope it is bash related enough
T 1568280218 18<obiwahn18>	i want to do the following replacement:
T 1568280249 18<obiwahn18>	s/1, sdfasd/somethingelse/
T 1568280259 18<obiwahn18>	where the whitespace could be a newline
T 1568280271 18<obiwahn18>	is that possible with sed?
T 1568280279 18<obiwahn18>	#sed -i 's:[0-9],\(\s\|$\)*testDatabaseArgs:testDBInfo():g' "$f"
T 1568280295 18<obiwahn18>	i was hoping that that is working
T 1568280348 18<YuGiOhJCJ18>	however, when I type 'bash --login' then 'echo $0', I still see 'bash' instead of '-bash', do you know why?
T 1568280350 18<go|dfish18>	obiwahn: if your sed has -z
T 1568280480 18<obiwahn18>	it has
T 1568280487 18<obiwahn18>	ok
T 1568280501 18<obiwahn18>	so with -z and \0
T 1568280547 18<go|dfish18>	obiwahn: just adding -z to what you already have should do it
T 1568280708 18<obiwahn18>	thank you
T 1568281035 18<Soliton18>	sed -z 's:[0-9],[[:space:]]*testDatabaseArgs:testDBInfo():g'
T 1568281162 18<Soliton18>	you need to be registered to join ##sed.
T 1568282374 20*	Disconnected (20)
T 1568282398 19*	Now talking on 22#bash
T 1568282398 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568282398 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568282398 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568282399 18<osse18>	YuGiOhJCJ: The caller is the one who starts bash as "-bash". When you just run bash --login from a shell then there is no such logic
T 1568282416 18<osse18>	Bash itself does not change it from "bash" to "-bash" AFAIk
T 1568282439 18<no_gravity18>	Hello! Is there something like an enhanced sed, which understands [^abc] as "not a b or c"?
T 1568282473 18<YuGiOhJCJ18>	ok thanks but as far as I know there is no '-bash' program stored on my disk, is there really one somewhere?
T 1568282474 18<pj18>	ummmmm, perl?
T 1568282486 18<Soliton18>	that is how regex works already.
T 1568282490 18<osse18>	YuGiOhJCJ: no
T 1568282506 18<osse18>	YuGiOhJCJ: the name of the process isn't necessarily the same as the name of the executable file
T 1568282525 18<no_gravity18>	Soliton: Not in sed
T 1568282531 18<YuGiOhJCJ18>	then how bash has been started as '-bash'?
T 1568282535 18<Soliton18>	prove it.
T 1568282555 18<osse18>	YuGiOhJCJ: when you start another program from your own program you can decide what the name should be
T 1568282575 18<osse18>	and that's what the login daemon (or whatever it's called) does
T 1568282580 18<no_gravity18>	Soliton: Oh, I was wrong! Thanks!
T 1568282599 18<YuGiOhJCJ18>	oh so it's something that is hard to do from command line only
T 1568282613 18<no_gravity18>	Can I make sed match only the first line of a file?
T 1568282627 18<Soliton18>	# help exec | grep -- -a
T 1568282628 18<shbot18>	Soliton: exec: exec [-cl] [-a name] [command [arguments ...]] [redirection ...]
T 1568282629 18<shbot18>	Soliton:       -a name   pass NAME as the zeroth argument to COMMAND
T 1568282637 18<YuGiOhJCJ18>	it's probably something done when you fork in a programming language
T 1568282651 18<Soliton18>	no_gravity: put a 1 before your sed command.
T 1568282659 18<no_gravity18>	Soliton: Great, let me try that ...
T 1568282661 18<osse18>	YuGiOhJCJ: from bash you can use  exec -a
T 1568282681 18<osse18>	YuGiOhJCJ: almost, it's not done when you fork, but when you exec
T 1568282806 18<YuGiOhJCJ18>	thanks for the explanations now it's clear
T 1568282925 18<no_gravity18>	Can sed do "replace a with b but not if a was followed by x"?
T 1568282944 18<osse18>	yes
T 1568282963 18<Riviera18>	no_gravity: depends, if x is really a letter then it's possible, but still mildly tricky.
T 1568283011 18<no_gravity18>	Maybe I should switch to perl of php.
T 1568283019 18<Riviera18>	no_gravity: sed -e 's/$/ /;:a' -e 's/a\([^x]\)/b\1/g' -e ta -e 's/ $//'  # something like this
T 1568283071 18<Riviera18>	no_gravity: yeah, it'd be easier with perl i think, because it features negative look-ahead assertions in its regexes.
T 1568283087 18<Riviera18>	(could also be that i miss something obvious with sed, ##sed knows best)
T 1568283170 18<no_gravity18>	I wonder why nobody ever updated sed to handle lookarounds.
T 1568283186 18<Riviera18>	he did and made perl
T 1568283237 18<Riviera18>	i believe supersed can also do it
T 1568283244 18<Riviera18>	and likely a million of other tools :)
T 1568283383 18<osse18>	# echo a | sed 's/a\($\|[^x]\)/b\1/'
T 1568283384 18<shbot18>	osse: b
T 1568283393 18<osse18>	a gnuism, maybe?
T 1568283397 18<Riviera18>	yup, that's GNU
T 1568283405 18<no_gravity18>	osse: Yeah, that would be a workaround.
T 1568283469 18<osse18>	Riviera: what part of it is GNU? I'm guessing the anchor inside an "or branch" (not sure what the correct term is)
T 1568283480 18<Riviera18>	osse: alternation with \| is GNU only
T 1568283517 18<Riviera18>	osse: although both BSD sed (not sure if all of them) and GNU sed support EREs with |, which should then suffice. So I guess -E 's/...|...' something :)
T 1568283562 18<osse18>	so or'ing stuff isn't BRE at all?
T 1568283566 18<Riviera18>	osse: correct
T 1568283567 18<osse18>	except for the "or" you get with [ ]
T 1568283571 18<osse18>	I see
T 1568283583 18<Riviera18>	osse: then, what BRE has and ERE doesn't is back-references.
T 1568283595 18<Riviera18>	osse: o\(.\)\1e
T 1568283629 18<Riviera18>	when you enable ERE in sed with -E or -r a pattern like o(.)\1e would again only work in GNU sed
T 1568283655 18<Riviera18>	and whether that works in bash with =~ (which uses EREs) depends on the c-lib's regex engine that bash was linked to.
T 1568287521 18<wwilliam18>	hello how to print name of the file and the time there in the form of 2019_09_07:02 i want the ouput to be like this
T 1568287533 18<wwilliam18>	2019_09_07:02 testing2
T 1568287547 18<wwilliam18>	fernandez@debian:~$ ls -l testing2
T 1568287549 18<wwilliam18>	-rwxr--r-- 1 afernandez afernandez 328 Sep 12 07:02 testing2
T 1568287583 18<djph18>	wwilliam: you write your own program in your favorite non-bash language to do that.
T 1568288474 18<thm18>	wwilliam: ls -l --time-style=+%Y_%m_%d_%H:%M
T 1568288631 18<thm18>	and maybe | awk '{print $6 " " $7}'
T 1568288665 18<earnestly18>	$6, $7 (unless you actually need " " and not FS)
T 1568289033 18<pj18>	piping the output of ls is not a good idea.
T 1568289709 18<_val_18>	but you can use find in scripts :p: find -maxdepth 1 -name testing2 -printf '%AY_%Am_%Ad %f\n'
T 1568289869 18<wwilliam18>	Thank you all will test.
T 1568289945 18<wwilliam18>	I ended up with this which suits my needs:
T 1568289946 18<wwilliam18>	stat -c '%y===========>%n' "$x" >> "$fl"
T 1568289949 18<ska18>	I have a $1 I use with getopt for an optional string: Should I make that a getopt argument? I have other getopt args like b but I cant do a : mycommand dirname -b
T 1568290035 18<ska18>	OR should I try to peel off non-getopt args ?
T 1568290101 18<geirha18>	any reason why you're using the broken getopt rather than the getopts builtin?
T 1568290158 18<ska18>	Sr.. I am using getopts builtin
T 1568290215 18<geirha18>	ok, so you have a command with subcommands. I'd probably write a function for each subcommand, which each have their own option parsing with getopts
T 1568290650 18<ska18>	Cant I put that un-opted option in *) of case?
T 1568290694 18<ska18>	Is there some sort of bash debugger?
T 1568290904 18<geirha18>	ska: that would mix global options with subcommand options. Are you sure you want that?
T 1568291054 18<geirha18>	ska: Take git as an example. It globally takes a [-C path], and its grep subcommand, takes a [-C context]. So this invocation is allowed:  git -C /tmp/repo grep -C 3 '^[[:blank:]]*foo('   With the approach you want, you wouldn't be able to handle a case like that
T 1568292584 18<carstenhag18>	Hey! I am trying to write a script, where a command outputs a number and I need to compare it.
T 1568292608 18<carstenhag18>	I'm having a problem running the command, see https://gist.github.com/carstenhag/95c551900509c73455bae9b9c4f636a3 -- condition does not get filled
T 1568292609 18<checkbot18>	carstenhag: I think the problem is on line 9. This is a unicode non-breaking space. Delete and retype it. See 7 issues on https://shellcheck.net/?id=cb92609
T 1568292621 18<carstenhag18>	./convert_non_transparent_png_to_jpg.sh: line 9:  awk: command not found
T 1568292621 18<carstenhag18>	./convert_non_transparent_png_to_jpg.sh: line 9: Image:: command not found
T 1568292741 18<geirha18>	!nbsp
T 1568292741 18<greybot18>	In some graphical environments, Alt+space, Alt Gr+space or Option+space generate a non-breaking space instead of a regular space. They look the same to us, but not to the shell. ''sed -n l'' will display them differently than regular spaces
T 1568292821 18<mknod18>	"In each of the cases below, word is subject to tilde expansion, parameter expansion, command substitution, and arithmetic expansion.
T 1568292821 18<mknod18>	[...]
T 1568292822 18<mknod18>	${parameter:-word}"
T 1568292835 18<mknod18>	# echo "${unset:-~}"
T 1568292836 18<shbot18>	mknod: ~
T 1568292852 18<carstenhag18>	Hmmm
T 1568292893 18<carstenhag18>	https://gist.github.com/carstenhag/95c551900509c73455bae9b9c4f636a3 updated it -- Now the error is at the if test
T 1568292897 18<Soliton18>	tilde is not expanded in quotes.
T 1568292914 18<Soliton18>	!nbsp > carstenhag
T 1568292914 18<greybot18>	carstenhag: In some graphical environments, Alt+space, Alt Gr+space or Option+space generate a non-breaking space instead of a regular space. They look the same to us, but not to the shell. ''sed -n l'' will display them differently than regular spaces
T 1568292922 18<carstenhag18>	Yes, i fixed the nbsp
T 1568292937 18<Patsie18>	carstenhag: you're missing a space before the closein ]
T 1568292948 18<carstenhag18>	wow...
T 1568292949 18<carstenhag18>	thanks
T 1568292953 18<mknod18>	Soliton, but it's supposed to happen at the "word" level
T 1568292959 18<carstenhag18>	seems silly to me :(
T 1568292973 18<Patsie18>	carstenhag: you made it...
T 1568292991 18<carstenhag18>	no, i did not made bash to care about the space before a ] :P
T 1568292994 18<Soliton18>	you could write your own shell with your own syntax rules.
T 1568293000 18<mknod18>	Soliton,
T 1568293005 18<mknod18>	"If parameter is unset or null, the expansion of word is substituted. Otherwise, the value of parameter is substituted."
T 1568293031 18<mknod18>	In this case, the expansion of word is $HOME.
T 1568293040 18<VSpike18>	Does anyone know a simple way to consume open files or file descriptors to test ulimits?
T 1568293071 18<VSpike18>	Trying to think of something that doesn't leave stuff on the disk to clean up
T 1568293168 18<carstenhag18>	Soliton: not sure why the snark, but thanks
T 1568293190 18<mknod18>	carstenhag, because you don't say something is silly if you have no clue about it
T 1568293229 18<Soliton18>	complaining about syntax of a decades old language is fairly useless unless you want to invent your own.
T 1568293310 18<Soliton18>	!drlwf > carstenhag
T 1568293310 18<greybot18>	carstenhag: https://mywiki.wooledge.org/DontReadLinesWithFor ... "for" is for iterating arguments/arrays, not strings. Never do: for x in $(cat file), or for x in $var; instead, use a glob (*.txt), an array ("${hosts[@]}") or a while-read loop. See also https://mywiki.wooledge.org/BashPitfalls#pf1
T 1568293323 18<mknod18>	So, what exactly am I misinterpreting in "the expansion of word is substituted"
T 1568293357 18<mknod18>	This suggests "${unset:-"~"}" would not be subject to tilde expansion.
T 1568293406 18<Soliton18>	VSpike: for ((c=10; c<=1025; c++)); do exec {fd}< file; done
T 1568293508 18<VSpike18>	Soliton: that's awesome! Thanks
T 1568293570 18<mknod18>	The same goes for
T 1568293578 18<mknod18>	# echo "${unset:-5+5}"
T 1568293580 18<shbot18>	mknod: 5+5
T 1568293601 18<mknod18>	"word" is definitely not subject to arithmetic expansion here. The manual is broken.
T 1568293634 18<Soliton18>	there is no arithmetic context there.
T 1568293667 18<Soliton18>	you might as well complain it did not to command substitution.
T 1568293673 18<Soliton18>	do*
T 1568293673 18<mknod18>	Byt they ARE saying word is subject to arithmetic expansion in "${parameter:-word}"
T 1568293684 18<mknod18>	But*
T 1568293705 18<Soliton18>	if you put syntax there that suggests arithmetic expansion, sure.
T 1568293725 18<Soliton18>	# echo "${unset:-$((5+5))}"
T 1568293726 18<shbot18>	Soliton: 10
T 1568293738 18<mknod18>	I remember when the manual was even more broken and stated "${parameter/word/string}" in place of "${parameter/pattern/string}"
T 1568293777 18<mknod18>	Soliton, but that's not what they're saying, again. If I follow you, then the tilde should be equally expanded.
T 1568293793 18<mknod18>	In your example, $((5+5)) is being expanded first.
T 1568293807 18<Soliton18>	prove it.
T 1568293817 18<mknod18>	It has nothing to do with the parameter Expansion
T 1568293971 18<mknod18>	# echo "foo $((5+5)) bar"
T 1568293972 18<shbot18>	mknod: foo 10 bar
T 1568293985 18<mknod18>	proved it.
T 1568294017 18<Soliton18>	yes, arithmetic expansion works in double quotes. well done.
T 1568294066 18<Soliton18>	nothing about your suggested order of operations was proven.
T 1568294135 18<mknod18>	what they want to say is "${parameter:-string}", because nothing here is subject to anything but parameter expansion.
T 1568294171 18<VSpike18>	Soliton: what is {fd} in that one liner?
T 1568294178 18<Soliton18>	then ${unset:-$((5+5))} would not work as it does.
T 1568294199 18<mknod18>	Soliton, $((...)) IS subject ti parameter expansion
T 1568294208 18<Soliton18>	anywhere?
T 1568294220 18<mknod18>	as in?
T 1568294232 18<Soliton18>	you make it sound like context doesn't matter.
T 1568294277 18<mknod18>	Soliton, pretty much anywhere unless single quoted yeah...?
T 1568294281 18<Soliton18>	VSpike: assigns fd the next free file descriptor.
T 1568294317 18<Soliton18>	unless single quoted. right, so not everywhere.
T 1568294336 18<urthmove118>	I have some questions about "expect" does anyone know where the best place (different channel/server) is?
T 1568294344 18<Soliton18>	so it would seem one would have to specify where it is done and where not.
T 1568294353 18<Soliton18>	!expect
T 1568294353 18<greybot18>	expect (http://expect.sf.net/) is a tool for scripting terminal applications in tcl, join #tcl for help. Alternative tools exist in most languages, for a shell version see http://empty.sf.net
T 1568294359 18*	urthmove1 is having trouble spawning screen within an expect script to automate vpn logins
T 1568294363 18<mknod18>	I'm not sure how it relates to the issue I'm describing. Simply put: "word" is a made-up concept.
T 1568294421 18<Soliton18>	ok.
T 1568294519 18<mknod18>	Soliton, unless you can prove how different it is from "string"
T 1568294538 18<mknod18>	Because that's my question ultimately
T 1568294546 18<VSpike18>	Soliton: I've never seen that syntax before .. is that an exec thing or a bash thing? Does it have a name?
T 1568294554 18<VSpike18>	I couldn't spot it in man bash
T 1568294579 18<Soliton18>	look under REDIRECTION.
T 1568294604 18<Patsie18>	# echo "$((~))"
T 1568294605 18<shbot18>	Patsie: bash: ~: syntax error: operand expected (error token is "~")
T 1568294623 18<VSpike18>	Doh .. just spotted it *facepalm*
T 1568294682 18<Soliton18>	mknod: it's not much different that's why all the expansions you expect in double quoted strings were listed there.
T 1568294717 18<mknod18>	Soliton, but they do make a difference in the manual
T 1568294741 18<Soliton18>	feel free to point it out.
T 1568294753 18<mknod18>	https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Shell-Parameter-Expansion
T 1568294808 18<Soliton18>	feel free to point out exactly what you mean. i'm not going to read dozens of lines to guess what you're referring to.
T 1568294819 18<mknod18>	${parameter%%word}, here we have "word" (as per their definition)
T 1568294829 18<mknod18>	${parameter/pattern/string}, here we have "string"
T 1568294853 18<mknod18>	I can see how pattern and string are a thing in Bash, but word seems made-up as previously said
T 1568294885 18<mknod18>	unless both string and word behave differently, in which case I'd want to know where.
T 1568295085 18<Soliton18>	you mean string is also subject to all the mentioned expansion for word?
T 1568295137 18<Soliton18>	i suppose it doesn't say that.
T 1568295188 18<Soliton18>	it dosn't say it for pattern either.
T 1568295319 18<mknod18>	Soliton, I mean "word" is not any different from "string" as far as I can see.
T 1568295330 18<mknod18>	# parameter="foo bar baz"; echo "${parameter/bar/$((5+5))}"
T 1568295331 18<shbot18>	mknod: foo 10 baz
T 1568295390 18<Soliton18>	sure.
T 1568295451 18<mknod18>	And I mean that Bash doesn't comply with how "word" is described in the manual.
T 1568295465 18<Soliton18>	so it could say that string and pattern are also subject to the mentioned expansions.
T 1568295521 18<Soliton18>	word   A sequence of characters considered as a single unit by the shell.  Also known as a token.
T 1568295544 18<Soliton18>	not sure what's wrong there.
T 1568295544 18<mknod18>	that's pretty low-level heh.
T 1568295573 18<Soliton18>	again point out exactly what you mean or i'll guess something.
T 1568295617 18<mknod18>	<Soliton>	so it could say that string and pattern are also subject to the mentioned expansions.
T 1568295641 18<mknod18>	they are the same thing, and none comply to the "mentioned expansions"
T 1568295647 18<mknod18>	if by "mentioned expansions" you mean:
T 1568295664 18<mknod18>	"In each of the cases below, word is subject to tilde expansion, parameter expansion, command substitution, and arithmetic expansion."
T 1568295676 18<Soliton18>	you just showed that they do.
T 1568295691 18<Soliton18>	which one does not work?
T 1568295704 18<mknod18>	tilde expansion
T 1568295715 18<Soliton18>	# var=foo; echo ${var/foo/~}
T 1568295716 18<shbot18>	Soliton: /root
T 1568295738 18<mknod18>	the result of ${var/foo/~} was tilde expanded
T 1568295748 18<mknod18>	not ~
T 1568295753 18<Soliton18>	prove it.
T 1568295767 18<mknod18>	# var=foo; echo "${var/foo/~}"
T 1568295768 18<shbot18>	mknod: /root
T 1568295775 18<mknod18>	holy shit
T 1568295796 18<mknod18>	32# var=foo; echo "${var/foo/~}"
T 1568295797 18<shbot18>	mknod: ~
T 1568295802 18<mknod18>	mmhm.
T 1568295865 18<mknod18>	hey Soliton, you're fooling me
T 1568295874 18<skered18>	Any idea what feature or bug fix in 5.x where this shows different results on 4.1/4.2 (RHEL 6/7 bash).  foo=bar; echo "${foo/bar/'$(echo baz)'}"   5: $(echo baz)  4: baz
T 1568295880 18<mknod18>	# echo "${unset:-~}"
T 1568295881 18<shbot18>	mknod: ~
T 1568295886 18<mknod18>	^ here I'm proving it.
T 1568295911 18<Soliton18>	no, you're not.
T 1568295912 18<skered18>	er... is this kinda releated to what you're already talking about with ${.../...}?
T 1568295919 18<mknod18>	# echo ${unset:-~}
T 1568295920 18<shbot18>	mknod: /root
T 1568295923 18<mknod18>	better?
T 1568296650 18<Soliton18>	yes, so tilde expansion does work.
T 1568296686 18<Soliton18>	what is a bit weird is when the word/string/pattern is considered quoted or not.
T 1568296731 18<mknod18>	so we can finally agree something is a bit weird
T 1568296732 18<Soliton18>	i think you could argue it should be true nested quoting so that tilde expansion does work even if the PE itself is quoted.
T 1568296748 18<mknod18>	in     echo ${unset:-~}     tilde expansion works just as it works in      echo ~
T 1568296755 18<mknod18>	what I proved above
T 1568296776 18<Soliton18>	that still does not tell you anything about order of operations.
T 1568296807 18<Soliton18>	you'd have to look at the code since i doubt you can make a test that would tell you.
T 1568296822 18<mknod18>	That's not really what matters here. I'd be more interested in Bash doing what the manual say it does.
T 1568296846 18<Soliton18>	it does. just not the way you interprete it.
T 1568296862 18<Soliton18>	bash does all the expansions it mentions.
T 1568296898 18<mknod18>	"In each of the cases below, word is subject to tilde expansion [...]"
T 1568296908 18<Soliton18>	as mentioned the only somewhat surprising part is that for tilde expansion to work the whole PE must be unquoted... sometimes.
T 1568296911 18<mknod18>	${parameter:-word}
T 1568296925 18<mknod18>	sorry but no, "word" is not subject to tilde expansion in ${parameter:-word}
T 1568296934 18<mknod18>	${parameter:-word} is, if and only if word is a tilde.
T 1568296937 18<Soliton18>	# echo ${unset:-~}
T 1568296938 18<shbot18>	Soliton: /root
T 1568296948 18<mknod18>	what I've just said
T 1568296949 18<Soliton18>	# echo ${unset:-~root}
T 1568296950 18<shbot18>	Soliton: /root
T 1568296973 18<Soliton18>	# echo ${unset:-~root/foo bar}
T 1568296973 18<mknod18>	the result is expanded, because it's unquoted.
T 1568296974 18<shbot18>	Soliton: /root/foo bar
T 1568296982 18<mknod18>	word itself is not.
T 1568296983 18<Soliton18>	wild guessing
T 1568296999 18<mknod18>	otherwise "${parameter:-~}" would equally work.
T 1568297020 18<Soliton18>	# var=foo; echo "${var/foo/~}"
T 1568297021 18<shbot18>	Soliton: /root
T 1568297030 18<mknod18>	because ~ would actually be substituted, as explained in the manpage
T 1568297114 18<iffraff18>	Hi is there a command that will tell me if my script is running in linux or mac?
T 1568297141 18<twkm18>	nope.
T 1568297152 18<mknod18>	Soliton, in your last example, the parameter expansion is ${parameter/pattern/string}, notice it's "string", not "word"
T 1568297154 18<twkm18>	you may be able to infer it from the bash version.
T 1568297172 18<mknod18>	Soliton, also, notice that it does the exact opposite what the manual says
T 1568297198 18<twkm18>	but normally one runs uname then guesses.
T 1568297222 18<iffraff18>	twkm:  there must be a way.  I can't imagine I'm the only one who has a team using both mac and linux.  ok so uname does return linux in linux :) but what does it do in mac?
T 1568297233 18<twkm18>	[repeat:] normally one runs uname then guesses.
T 1568297236 18<fructose18>	iffraff: uname may help, e.g. https://gist.github.com/ashrithr/5752922
T 1568297249 18<mknod18>	iffraff, on mac:
T 1568297249 18<twkm18>	usually uname doesn't lie, but sometimes it does.
T 1568297250 18<mknod18>	$ uname
T 1568297250 18<mknod18>	Darwin
T 1568297275 18<skered18>	iffraff: I use 'uname -s' to find the platform.
T 1568297352 18<iffraff18>	skered: are you on a mac?
T 1568297368 18<skered18>	iffraff: I'm on mutliple platforms.
T 1568297400 18<carstenhag18>	I'm following https://unix.stackexchange.com/a/489457/88337 to change a file extension in a string, see https://gist.github.com/carstenhag/1086b5ec7bbde7af627943f805f4590a
T 1568297412 18<mknod18>	iffraff, wake up
T 1568297425 18<twkm18>	for example, darwin would be the opensource base under macos which in theory anyone might build a not-macos on top of, perhaps even having a newer bash.  in practice nobody gives a shit about darwin without the macos experience so Darwin=MacOS.
T 1568297425 18<iffraff18>	skered: so I ran uname -s on ubuntu ( I'm afraid my only platform ) and it returned the sam with no -s
T 1568297432 18<carstenhag18>	unfortunately bash on a mac says ./crap.sh: line 3: ${"$old"%.png}.jpg: bad substitution. I tried without the ", but welp, doesnt work either
T 1568297460 18<twkm18>	carstenhag: duh.
T 1568297473 18<twkm18>	that's not how PARAMETER expansion works.
T 1568297476 18<carstenhag18>	i also looked at shellcheck first :D
T 1568297501 18<twkm18>	also bash on mac is old as shit, though ${var%...} works for it.
T 1568297518 18<twkm18>	!faq rename
T 1568297519 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/030 -- How can I rename all my *.foo files to *.bar, or convert spaces to underscores, or convert upper-case file names to lower case?
T 1568297526 18<carstenhag18>	ah so an extra $
T 1568297528 18<carstenhag18>	thanks
T 1568297533 18<iffraff18>	right ok, so all I really care about is if running on linux do x so as long as uname doesn't throw on a mac and doesn't return "linux" :) then I gues I"m good
T 1568297536 18<twkm18>	extra?!?!!?
T 1568297554 18<iffraff18>	thanks skered and twkm.  not so much mknod
T 1568297556 18<carstenhag18>	so an extra $, which was too much :D
T 1568297558 18<mknod18>	iffraff, that's because mac ain't linux
T 1568297567 18<twkm18>	beware some people have their uname return GNU/Linux.
T 1568297596 18<twkm18>	(because none of the other contributors matter as much as gnu, i guess)
T 1568297607 18<Soliton18>	perhaps rather check the tools work like you expect instead of guess based on OS or write portable scripts.
T 1568297681 18<iffraff18>	tkazi: so... some mac useres may set up their local machine like that?  if that's the case that's ok, I don't thnk my peole are doing that
T 1568297746 18<twkm18>	given tkazi hasn't spoken in the last 500 lines i'll guess that's for me.
T 1568297748 18<skered18>	iffraff: I don't know about older macOS but the latest macOS has -s.  There's a lot of other tricks to find the proper platform but I've gotta away with uname for the most part.  Knowing the different between Linux or CentOS/RHEL might take a couple extra steps.
T 1568297797 18<twkm18>	i can't imagine anyone with macos that would strip macos leaving darwin then build a new experience on that.
T 1568297834 18<iffraff18>	skered: great,my case is fairly rudimentary.  basically I'm the oly one using linux and their damn scripts all says brew this and other mac only shite that.  so I'm good.
T 1568297839 18<iffraff18>	thank you all again.
T 1568297845 18<mknod18>	twkm, that's called iOS
T 1568297846 18<twkm18>	there were some attempts to build a plain darwin, perhaps they continue.
T 1568297862 18<twkm18>	mknod: hahahaha, no.
T 1568297954 18<twkm18>	iffraff: macos users are often asked to use homebrew, etc, to get a newer bash because the one that comes with macos is very old.
T 1568298078 18<twkm18>	for licensing reasons, which will eventually cause macos to change to zsh as the default shell at which time your mac users will probably ask why the script fails for that reason.
T 1568298143 18<iffraff18>	great... but I'm using zsh, and uname seems to work for me.  anyway screw em.  they'll have to blow that bridge when they come to it
T 1568298177 18<greycat18>	uname isn't a shell builtin, so it doesn't matter which shell you're using
T 1568298199 18<Soliton18>	4# foo=bar; echo "${foo/bar/'$(echo baz)'}" # skered
T 1568298200 18<shbot18>	Soliton: $(echo baz)
T 1568298635 18<skered18>	4# echo $BASH_VERSION
T 1568298636 18<shbot18>	skered: 4.4.23(1)-release
T 1568298715 18<skered18>	Ok so it looks like something was changed past 4.2
T 1568298728 18<skered18>	Doe shbot have different 4.x versions?
T 1568298731 18<skered18>	Does*
T 1568298763 18<greycat18>	!triggers
T 1568298763 18<greybot18>	/msg shbot # triggers
T 1568298816 18<Soliton18>	42# foo=bar; echo "${foo/bar/'$(echo baz)'}"
T 1568298817 18<shbot18>	Soliton: 'baz'
T 1568298820 18<Soliton18>	43# foo=bar; echo "${foo/bar/'$(echo baz)'}"
T 1568298821 18<shbot18>	Soliton: $(echo baz)
T 1568299415 18<pyzozord18>	hi guys, i made a bunch of aliases like `alias gco="git checkout"` but the bash autocomplete doesnt work with those aliases now :(
T 1568299458 18<greycat18>	I'm guessing you mean bash-completion and its special handling of git subcommands and options.
T 1568299482 18<greycat18>	You could read up on how bash-completion does its magic, and duplicate that for your alias.
T 1568300392 18<wwilliam18>	oh shit you guys gonna kill me with this one:
T 1568300405 18<wwilliam18>	I have a list of filenames in a file.
T 1568300413 18<emg18>	nul separated?
T 1568300419 18<emg18>	:-D
T 1568300429 18<wwilliam18>	one per line
T 1568300438 18<emg18>	ouch
T 1568300449 18<wwilliam18>	the real files are in different directories nested
T 1568300462 18<wwilliam18>	uhh wait if there nested i can use find
T 1568300472 18<wwilliam18>	I will be right back
T 1568300476 18<emg18>	heh
T 1568300493 18<emg18>	wwilliam: just remember when you do come explain what you're doing, explain what you're actually doing and why, don't try to generalize it
T 1568300504 18<wwilliam18>	OK
T 1568300708 18<wwilliam18>	while read -r x;do find . -type f  -iname "$x" -exec stat -c '%y===========>%n' {} \;;done < <(cat logs_2019_09_10)
T 1568300712 18<wwilliam18>	didnt work
T 1568300715 18<rafasc18>	pyzozord: I think you could run: __git_complete gco _git_checkout
T 1568300839 18<wwilliam18>	"work"=no hits
T 1568300996 18<rafasc18>	bikeshed: why use done < <(cat file) instead of just: done < file
T 1568301008 18<emg18>	uuoc
T 1568301014 18<wwilliam18>	ok thank you
T 1568301069 18<emg18>	wwilliam: 1) can you show us the content of logs_2019_09_10? 2) how was that file created? why is there a list of files? that's normally a sign you did osmething wrong already. 3) what are you trying to accomplish? why are you running find and stat? what's your goal?
T 1568301071 18<wwilliam18>	still no hits
T 1568301107 18<wwilliam18>	1) hold on....coming up
T 1568301113 18<lf9418>	Hey, is there a way to play a beep whenever a program is finished executing?
T 1568301131 18<lf9418>	I mean implicitly, not explicitly
T 1568301131 18<greycat18>	lf94: printf '\a' might work; if it doesn't, ask your OS channel
T 1568301140 18<lf9418>	implicitly
T 1568301144 18<emg18>	lf94: probably add printf '\a' to your prompt command
T 1568301147 18<lf9418>	I should not have to type it
T 1568301152 18<lf9418>	Ah ha
T 1568301154 18<lf9418>	Very good idea
T 1568301159 18<emg18>	lf94: but first, check if printf '\a' actually beeps
T 1568301166 18<lf9418>	yep
T 1568301171 18<emg18>	you may need to modprobe pcspkr or something like that, I forget
T 1568301176 18<emg18>	I think I always blacklist it
T 1568301193 18<lf9418>	doesnt beep
T 1568301207 18<lf9418>	iirc there are many beep commands on debian
T 1568301211 18<greycat18>	OS channel time
T 1568301215 18<lf9418>	In any case - not #bash's problem :)
T 1568301235 18<emg18>	lf94: go to #debian to ask how to beep, come back here if you need help getting that beep into your PROMPT_COMMAND
T 1568301241 18<emg18>	good luck!
T 1568301257 18<lf9418>	My main concern is "how to always run program X after string-of-commands is done" or similar
T 1568301275 18<lf9418>	Shouldnt it go into PS1?
T 1568301291 18<emg18>	probably PROMPT_COMMAND
T 1568301298 18<lf9418>	ok :)
T 1568301314 18<greycat18>	If it's just the single \a character you can put it in PS1.  If you need to run a whole command, like aplay or beep, then put that command in PROMPT_COMMAND.
T 1568301318 18<lf9418>	ah ha
T 1568301328 18<lf9418>	This is a very cool feature
T 1568301354 18<wwilliam18>	1) http://paste.debian.net/hidden/4b853493/
T 1568301365 18<emg18>	hmm, I might try out PS1+=$'\a' for a day or two
T 1568301388 18<emg18>	wwilliam: you won't match -name when it starts with ./
T 1568301393 18<greycat18>	well, you want \[ \] around it too.
T 1568301403 18<emg18>	indeed
T 1568301403 18<wwilliam18>	2)
T 1568301405 18<wwilliam18>	function fls ()
T 1568301406 18<wwilliam18>	{
T 1568301407 18<wwilliam18>	    find . -maxdepth 1 -type f -mtime -1 \( -iname "nypdf2ing2*.txt" -o -iname "ncfl*.txt" -o -iname "*nyfl*.txt" -o -iname "naetfl*.txt" -o -iname "drns2ing2*.txt" -o -iname "nc102fl*.txt" -o -iname "flpdfls*.txt" -o -iname "flpsfls*.txt" \) ! -size 0 -exec tail -n+1 {} + > "$emlfl"
T 1568301409 18<wwilliam18>	};
T 1568301412 18<emg18>	oh god why
T 1568301425 18<wwilliam18>	3)
T 1568301425 18<emg18>	well, if that's the exact files you want
T 1568301429 18<skered18>	Soliton: I see thanks.
T 1568301440 18<emg18>	use -exec in there, or use printf \0 to nul separate and handle them that way
T 1568301449 18<wwilliam18>	i need like this for every file found:
T 1568301479 18<wwilliam18>	stat -c '%y===========>%n' 632547_MDTA_STMT_9x12_MANUAL_001.PDF.done
T 1568301481 18<wwilliam18>	2019-09-11 14:05:47.000000000 -0400===========>632547_MDTA_STMT_9x12_MANUAL_001.PDF.done
T 1568301505 18<wwilliam18>	create another file with the output like this for everyfile found:
T 1568301506 18<emg18>	wwilliam: also I'd recommend a paste site that doesn't have all the extra crap, ix.io is really nice, and easy to use from the terminal
T 1568301506 18<wwilliam18>	2019-09-11 14:05:47.000000000 -0400===========>632547_MDTA_STMT_9x12_MANUAL_001.PDF.done
T 1568301559 18<wwilliam18>	around where? greycat starting where and finishing where?
T 1568301618 18<emg18>	wwilliam: well, if you just want to hack this together, let's continue with what you have because trying to get to the bottom of this and do it right is just too much for me to handle right now
T 1568301630 18<wwilliam18>	ok
T 1568301633 18<emg18>	wwilliam: in your while loop you want to remove the ./ from the file name
T 1568301647 18<emg18>	while IFS= read -r file; do file=${file#./}; find ....
T 1568301657 18<wwilliam18>	ah ok thanks
T 1568301661 18<wwilliam18>	testing
T 1568301739 18<emg18>	!ix > wwilliam
T 1568301740 18<greybot18>	wwilliam: Upload to http://ix.io from your terminal: <command> | curl -n -F 'f:1=<-' http://ix.io # or add a function to your .bashrc: ix() { curl -n -F 'f:1=<-' http://ix.io; } # examples: ix < file; command | ix
T 1568301748 18<emg18>	add that to your bashrc and use it
T 1568301761 18<wwilliam18>	ok
T 1568301925 18<marcusal198718>	where would be a good place to start learning bash
T 1568301941 18<emg18>	!guide
T 1568301941 18<greybot18>	http://mywiki.wooledge.org/BashGuide or in PDF: http://s.ntnu.no/bashguide.pdf
T 1568301953 18<emg18>	also check out the faq and especially the pitfalls
T 1568301972 18<emg18>	also don't google or check stack overflow, most of the scripts in the wild are absolute shit
T 1568301997 18<emg18>	ask here when you have questions or need help, and explain what you're working on and why very precisely
T 1568302006 18<emg18>	good luck!
T 1568302009 18<wwilliam18>	in this case what would be command for that function?
T 1568302024 18<emg18>	wwilliam: what do you mean?
T 1568302037 18<wwilliam18>	examples: ix < file; command | ix
T 1568302098 18<emg18>	ah, the idea is the ix function will take whatever it reads on stdin and post it to the ix.io paste site
T 1568302111 18<emg18>	so if you wanted to show the output of a command, you'd run that command and pipe it through the ix function
T 1568302120 18<emg18>	if you watned to show the contents fo a file, you'd redirect input from the file
T 1568302164 18<wwilliam18>	ah ok thank you.
T 1568302172 18<emg18>	wwilliam: for example when I asked about the contents of that logs_2019_something you could do: ix < logs_2019_something
T 1568302188 18<wwilliam18>	oh OK
T 1568302190 18<wwilliam18>	let me test
T 1568302197 18<emg18>	wwilliam: and if I asked what's the output when you run find . -name gazordnablotz you could run   find . -name gazordnablotz | ix
T 1568302210 18<lf9418>	haha
T 1568302213 18<lf9418>	This is awesome!
T 1568302213 18<wwilliam18>	coll
T 1568302215 18<wwilliam18>	cool
T 1568302230 18<lf9418>	export PROMPT_COMMAND="play -q -n synth 0.1 sine 180 vol 0.5
T 1568302230 18<emg18>	the two great things about ix.io are 1) easy to post from the terminal 2) easy to curl/wget from the terminal
T 1568302248 18<lf9418>	Now I can an audible confirmation that something is done
T 1568302259 18<lf9418>	rather than needing to look at my screen
T 1568302269 18<lf9418>	better than visual notifications imo
T 1568302270 18<emg18>	lf94: fun. I assume you're only using that in specific windows not for every session?
T 1568302279 18<lf9418>	For all sessions
T 1568302294 18<lf9418>	It is a very short, low frequency beep
T 1568302298 18<emg18>	I can just imagine:   cd    (sound, wait for prompt)      ls (sound, wait for prompt)
T 1568302300 18<lf9418>	so it's very easy on the ears
T 1568302314 18<lf9418>	emg: nope. my cd command does ls automatically after.
T 1568302325 18<emg18>	ah, I have cs for that :-)
T 1568302343 18<lf9418>	and also: single tab press shows possible completions / directory listing
T 1568302357 18<lf9418>	these tiny quality of life things are fricking great.
T 1568302377 18<lf9418>	Is it possible to play a noise on program failure?
T 1568302384 18<rafasc18>	lf94: I have this abomination as my nofify beep: play -n synth .15 sine A4 .15 sine F4 delay 0 .15 remix - fade 0 .3 .05 norm -10
T 1568302398 18<greycat18>	lf94: you can use $? in PROMPT_COMMAND or in a command substitution in PS1.
T 1568302400 18<emg18>	lf94: yes you can check $? in PROMPT_COMMAND and do something based on that
T 1568302405 18<wwilliam18>	i did :
T 1568302406 18<wwilliam18>	afernandez@debian:~$ ix < logs
T 1568302407 18<wwilliam18>	afernandez@debian:~$
T 1568302408 18<emg18>	damn I'm too slow
T 1568302424 18<emg18>	wwilliam: should have printed a URL
T 1568302431 18<wwilliam18>	did not
T 1568302441 18<lf9418>	that is awesome.
T 1568302449 18<lf9418>	rafasc: too long :)
T 1568302470 18<greycat18>	background it
T 1568302470 18<wwilliam18>	as always im an id=diot
T 1568302472 18<wwilliam18>	http://ix.io/1UUy
T 1568302478 18<rafasc18>	lf94: short beeps are hard to hear when you have other audio playing
T 1568302482 18<wwilliam18>	i did on the first one only logs
T 1568302519 18<lf9418>	rafasc: ah yeah
T 1568302529 18<lf9418>	rafasc: I'm listening to jazz most of the day...easy to hear through :)
T 1568302561 18<rafasc18>	lf94: try changing the .15 to something like .05
T 1568302574 18<emg18>	or as greycat said, background it so you don't have to wait
T 1568302825 18<horribleprogram18>	Prob the best channel to ask this
T 1568302847 18<horribleprogram18>	bunch of my .mp4s have a title... something like 001 Vid.mp4
T 1568302859 18<horribleprogram18>	In Finder and w/e they show the title
T 1568302878 18<horribleprogram18>	when I drag them into let's say a VLC media playlist, a lot of them have the same "Udemy Video Asset"
T 1568302885 18<horribleprogram18>	or into the iTunes database
T 1568302916 18<horribleprogram18>	This is such a peculiar thing, so I grepped the ones that did this
T 1568302930 18<horribleprogram18>	grep "Udemy Video Asset" myvid.mp4 # For example
T 1568302952 18<horribleprogram18>	it says "Binary file myvid.mp4 matches"
T 1568302962 18<horribleprogram18>	so there's this string within the binary file
T 1568303039 18<larryv18>	horribleprogram: what is your question?
T 1568303041 18<horribleprogram18>	what I seriously don't understand is this... a file (an .mp4) is on the HDD, the Filesystem calls it something
T 1568303062 18<horribleprogram18>	yet it changes its name
T 1568303091 18<horribleprogram18>	larryv: uhh I'll record the problem and see if you can fix it
T 1568303174 18<horribleprogram18>	http://www.giphy.com/gifs/XH50CFfheZUw2uYySH
T 1568303247 18<larryv18>	VLC/iTunes/whatever reads titles out of files' internal metadata
T 1568303271 18<horribleprogram18>	larryv: Okay sweet, now I got the question
T 1568303291 18<horribleprogram18>	I'm going to have to write a bash script that goes through each file, changing the file's internal metadata name from "Udemy Video Asset" to the actual filename
T 1568303349 18<horribleprogram18>	now obviously there's binary files, but the characters "Udemy Video Asset" must be coded in there somewhere, probably at a specific location conforming to the .mp4 format
T 1568303354 18<horribleprogram18>	they're*
T 1568303372 18<greycat18>	They may be in a multi-byte encoding like that one Windows uses where every second byte is NUL.
T 1568303400 18<horribleprogram18>	impossible
T 1568303412 18<horribleprogram18>	grep worked... it should the string, so it's gotta be ASCII
T 1568303418 18<horribleprogram18>	s/should/found
T 1568303458 18<horribleprogram18>	ik this was a hard fix
T 1568303459 18<greycat18>	If grep determines that the *file* is "binary", it will refuse to print the matching "line".
T 1568303484 18<horribleprogram18>	no it shows "Binary file matches
T 1568303485 18<greycat18>	It will instead say "Binary file ... matches" to let you know that it matched, but it can't show you the result because it's not safe to do so.
T 1568303488 18<horribleprogram18>	yeah
T 1568303517 18<horribleprogram18>	so here's what I'm going to do
T 1568303542 18<horribleprogram18>	maybe a sed script that goes into each .mp4, replacing the match of "Udemy Video Asset" to the filename
T 1568303553 18<greycat18>	so apparently you got lucky and the string is in an ASCII-compatible character set, rather than $'A\0s\0s\0e\0t\0'
T 1568303559 18<horribleprogram18>	yeah
T 1568303571 18<horribleprogram18>	what tools are available for this sort of thing
T 1568303581 18<greycat18>	you could ask #ffmpeg or whatever
T 1568303583 18<greycat18>	or your OS channel
T 1568303589 18<horribleprogram18>	kk
T 1568303598 18<horribleprogram18>	ty :) I didn't even know ffmpeg existed
T 1568303740 18<dendazen_18>	Saw in someone's code func A{ export local VAR1='blah' ...}. does it even make sense?
T 1568303808 18<greycat18>	TIAS.  I bet it creates an environment variable named local.
T 1568303889 18<dendazen_18>	What does TIAS mean, if you don't mind me asking.
T 1568303896 18<greycat18>	!tias
T 1568303896 18<greybot18>	Try It And See
T 1568303906 18<dendazen_18>	Thank you.
T 1568304085 18<wwilliam18>	tias=aunts in spanish
T 1568304108 18<wwilliam18>	could not figure the file stuff from before could not find files.
T 1568304116 18<wwilliam18>	and they are there.
T 1568304242 18<dendazen_18>	No, it doesn't set local as variable.
T 1568304280 18<greycat18>	# f() { export local foo=bar; }; f; env | grep local
T 1568304281 18<shbot18>	greycat: no output
T 1568304299 18<greycat18>	# f() { export local foo=bar; declare -p local foo; }; f
T 1568304300 18<shbot18>	greycat: declare -x local
T 1568304300 18<shbot18>	greycat: declare -x foo="bar"
T 1568304325 18<greycat18>	Well, it creates a placeholder variable named local with the -x flag on it.  If you were to assign it a value, I bet it would appear in the env.
T 1568304340 18<greycat18>	# f() { export local foo=bar; }; f; local=x; env | grep local
T 1568304341 18<shbot18>	greycat: local=x
T 1568304343 18<greycat18>	Yup.
T 1568304406 18<dendazen_18>	So that code 'export local VAR' inside the function makes no sense then.
T 1568304450 18<dendazen_18>	Why most of the bash code even init scripts on linux contain so many mistakes?
T 1568304505 18<dendazen_18>	I guess, it can be said for any code, not just bash.
T 1568304539 18<dendazen_18>	publicly avaliable
T 1568304639 18<Soliton18>	!itworks2
T 1568304639 18<greybot18>	"I have no idea what I've written, but it works"
T 1568304683 18<Soliton18>	barrier to entry is perhaps lowest for bash since many people use it daily even if they don't know too much about it.
T 1568304922 18<wwilliam18>	OK this command found too many it looks like is not reading from logs_2019_09_10 because it found files not in that log list
T 1568304932 18<wwilliam18>	while IFS= read -r file; do file=${file#./} find . -type f  -iname "$file*.done" -exec stat -c '%y===========>%n' {} \;;done < logs_2019_09_10
T 1568304965 18<emg18>	well you put a *
T 1568304984 18<Soliton18>	!faq echo
T 1568304985 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/104 -- Why doesn't foo=bar echo "$foo" print bar?
T 1568304988 18<emg18>	so if the file it reads is     foo     that won't just find    foo.done    it'll also match on    foobar.done    etc.
T 1568305017 18<emg18>	also you used iname so it'll find   FOO.DONE and FoObAr.DoNe etc.
T 1568305053 18<wwilliam18>	this found nothing:
T 1568305054 18<Soliton18>	file is only set in the env of find.
T 1568305055 18<wwilliam18>	while IFS= read -r file; do file=${file#./} find . -type f  -iname "$file.done" -exec stat -c '%y===========>%n' {} \;;done < logs_2019_09_10
T 1568305092 18<emg18>	Soliton: good catch
T 1568305097 18<emg18>	wwilliam: file=${file#./};
T 1568305100 18<emg18>	you forgot that semicolon
T 1568305115 18<wwilliam18>	oh
T 1568305117 18<wwilliam18>	shoot
T 1568305153 18<wwilliam18>	ok that did it Thank you very much all
T 1568305604 18<wwilliam18>	is there a way to input multiple logs?
T 1568305658 18<knstn18>	wwilliam: yes, use systemd-journald or epylog
T 1568305684 18<knstn18>	wwilliam: Oh sorry, i was missing context
T 1568305716 18<dendazen_18>	would "< join my_logs*" work?
T 1568305718 18<wwilliam18>	It is OK Thank you knstn
T 1568305732 18<wwilliam18>	or cat them?
T 1568305749 18<Soliton18>	< <(cat logs*)
T 1568305756 18<wwilliam18>	Thank you.
T 1568307216 20*	Disconnected (20)
T 1568307242 19*	Now talking on 22#bash
T 1568307242 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568307242 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568307242 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568311245 18<darkxploit18>	I failed a ssh bash test today
T 1568311390 18<llua18>	k
T 1568311411 18<Soliton18>	!ssh
T 1568311411 18<greybot18>	Secure SHell (#openssh, http://mywiki.wooledge.org/CategorySsh). To run rm "$localVar" remotely, use: printf 'rm %q\n' "$localVar" | ssh user@host bash
T 1568311417 18<earnestly18>	run the else clause
T 1568311500 18<vishal18>	die "this is how it ends"; fi
T 1568311525 18<darkxploit18>	there were a HOST = ( google.com xxx.com dsds.com ) and a for loop to ping it
T 1568311537 18<Soliton18>	!assignment
T 1568311537 18<greybot18>	To assign to a variable, use varname=value . Do not include spaces around the '=', and do not write $varname on the left hand side.
T 1568311538 18<darkxploit18>	there were several errors in the script
T 1568311541 18<greycat18>	do not put spaces around = in an assignment
T 1568311595 18<earnestly18>	life is one big if statement with many consequents and alternative, but all with the same final clause
T 1568311600 18<greycat18>	don't use all-caps variable names (I don't know whether HOST is reserved, but HOSTNAME is), and stylistically, I would use a plural noun for the name of a list variable
T 1568311618 18<earnestly18>	alternatives*
T 1568312460 18<twobitsprite18>	darkxploit: job interview or something?
T 1568312483 18<darkxploit18>	twobitsprite: yeahh that was a job interview
T 1568312524 18<twobitsprite18>	darkxploit: were you supposed to debug an existing script with that line, or did you have to write the script and failed because you wrote that line?
T 1568312525 18<darkxploit18>	i also forgot to use sort and trying to use uniq -u directly
T 1568312546 18<darkxploit18>	it was debugging a script
T 1568312607 18<twobitsprite18>	darkxploit: oh, yeah, those can be tricky. I usually will just run the script through "bash -x" if I can't find the issue
T 1568312616 18<darkxploit18>	that twhat I did
T 1568312616 18<greycat18>	oh, the goal was to find as many of the errors as you could in x minutes?
T 1568312633 18<greycat18>	or was it to *fix* the script?
T 1568312639 18<darkxploit18>	yeahh within less that 3 mins
T 1568312667 18<darkxploit18>	well it could be more.. may be 7 mins
T 1568312673 18<darkxploit18>	time went so fast
T 1568312679 18<greycat18>	that's still a really brutal deadline
T 1568312707 18<twobitsprite18>	arbitrary timelimits like that are a red-flag for me. I don't know if I would want to take a job with management who thought in those terms
T 1568312836 18<azonenberg_work18>	Hey, so I just discovered the $(<file.txt) syntax and was wondering... is there any way to turn this off in rbash?
T 1568312861 18<lopid18>	pirate bash?
T 1568312862 18<greycat18>	!rbash
T 1568312894 18<greycat18>	Restricted shells are such a joke that we don't even have a bot factoid for them.
T 1568312898 18<jan618>	lol
T 1568312901 18<darkxploit18>	twobitsprite: I understand, but i have no choice….
T 1568312913 18<jan618>	why are they such a joke?
T 1568312966 18<greycat18>	Well.  You know how chroot is such a joke that the Linux chroot(2) man page literally tells you how to bust out of one?
T 1568312970 18<greycat18>	Restricted shells are even more so.
T 1568312980 18<jan618>	lol, how so?
T 1568313002 18<twobitsprite18>	jan6: just look at azonenberg_work's question
T 1568313006 18<azonenberg_work18>	greycat: lol, well sadly some people won't accept such recommendations
T 1568313018 18<jan618>	at least on first glance, it's not obvious how to execute custom programs ;P
T 1568313026 18<azonenberg_work18>	I can't stop them from shooting themselves in the foot, but i can at least take out one or two bullets :p
T 1568313028 18<twobitsprite18>	perfect example. he probably has $(cat file.txt) blocked in rbash, but just realized there's an alternative way to read a file to a variable
T 1568313046 18<greycat18>	(why does he want to prevent reading a file)
T 1568313060 18<jan618>	(super seecreeet filee ;)
T 1568313060 18<twobitsprite18>	in fact, I can think of a dozen ways to just read a file in to a variable off the top of my head
T 1568313070 18<greycat18>	(why did he GIVE A COMMAND SHELL to a person that he doesn't want to be able to read files)
T 1568313083 18<twobitsprite18>	(I just work here *shrug* :P)
T 1568313085 18<darkxploit18>	azonenberg_work: can you give more details how the script is
T 1568313090 18<greycat18>	It's not a script.
T 1568313096 18<greycat18>	It's a user's interactive shell.
T 1568313111 18<greycat18>	He wants to cripple his user.
T 1568313115 18<azonenberg_work18>	Cant say too much as it's not my system, it's somebody else's
T 1568313117 18<twobitsprite18>	greycat: we don't know that... it could be running arbitrary user scripts in rbash XD
T 1568313124 18<twobitsprite18>	bwahahahahah
T 1568313124 18<greycat18>	*plonk*
T 1568313125 18<azonenberg_work18>	i'm just advising them on how to not be tooo stupid
T 1568313143 18<azonenberg_work18>	and apparently "dont use rbash" isnt an option
T 1568313147 18<greycat18>	"and I can't tell you why!"
T 1568313181 18<jan618>	pretty sure chroot was also never a security measure, but a utility, but has gained the reputation of one, for whatever reason
T 1568313217 18<greycat18>	https://en.wikipedia.org/wiki/Restricted_shell#Weaknesses_of_a_restricted_shell
T 1568313222 18<greycat18>	WIKI FUCKING PEDIA
T 1568313247 18<greycat18>	I mean, that's a *lame* critique section, but still.
T 1568313262 18<jan618>	https://fireshellsecurity.team/restricted-linux-shell-escaping-techniques/ "Some of them are just normal shells with some simple common restrictions not actually configurable, such as rbash (restricited Bash), rzsh and rksh (Korn Shell in restricted mode), which are really trivial to bypass"
T 1568313297 18<greycat18>	yup, that result was slightly farther down google's response for me
T 1568313308 18<jan618>	duckduckgo for me, and pretty top ;P
T 1568313323 18<jan618>	(second, right after tecmint)
T 1568313384 18<mknod18>	the exception which confirms the rule
T 1568351749 20*	Disconnected (20)
T 1568351773 19*	Now talking on 22#bash
T 1568351773 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568351773 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568351773 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568351858 18<alphageek18>	it was a super simple routine to reverse engineer, so I included 2 routines to do precisely that. use the "md5sum" binary if it's available. if it's not, use the slower but still effective md5 routine from openssl
T 1568351894 18<alphageek18>	I'm big on belt & suspenders :)
T 1568352009 18<alphageek18>	3 ranked routines for transforming obfuscated path *prefixes* in scanfs. if 1 isn't available, try 2. if 2's not available, try 3. if 3's not available, whimper & cry
T 1568352262 18<alphageek18>	b1tninja: not ignoring you, just yammering here & testing array/string ideas locally
T 1568352318 18<alphageek18>	tbh, my current answer is "no clue"
T 1568352386 18<alphageek18>	I suspect these fine folks will know
T 1568352482 18<akoana18>	alphageek:  gotta leave now, good luck then with your dedup project :)
T 1568352497 18<alphageek18>	thanks. tot zo!
T 1568353358 18<voldial18>	How do I kill "unbuffer this_process | on_first_line_output"?
T 1568353438 18<voldial18>	I tried |& head -n 1, this_process keeps running
T 1568353673 18<voldial18>	it does not even need to be a line, I want to kill the process if it outputs on stdout or stderr at all
T 1568354530 18<wwalker18>	I have a grep that does what I expect it to from the command line, but in a script it doesn't match.  The line is grep '^ *(source|\.)  *(/home/wwalker|\$HOME|~)/.bashrc.local' ~/.bashrc    more detail:  https://gist.github.com/wwalker/8cc26bdb625b0933011d5b5bcefdf80c
T 1568354742 18<alphageek18>	welp, way past the time I should have rolled off to bed.. o/
T 1568354763 18<voldial18>	here's what I have... it almost works, how do I get the pidof head? http://dpaste.com/2AK1EF7
T 1568355136 18<geirha18>	wwalker: In BRE, ( and | are not special, they just match ( and |. Switch to ERE with -E
T 1568355218 18<geirha18>	voldial: you can't wait for head, because it's not a direct child of your shell
T 1568355279 18<wwalker18>	voldial: that's an interesting thing to do
T 1568355283 18<wwalker18>	https://gist.github.com/wwalker/d715b88adbd2756bf76e44588dc7cba9
T 1568355295 18<wwalker18>	should get you started on a solution voldial
T 1568355319 18<voldial18>	wwalker: thx. deciphering!
T 1568355353 18<wwalker18>	geirha: Thanks!  I have an alias at the prompt for grep.  It's bit me twice now.  Alias is going to die now.
T 1568355355 18<geirha18>	if read -d '' -rn1 < <(ffmpeg ...); then printf 'ffmpeg output somehting\n'; fi; kill "$!"; wait "$!"
T 1568355421 18<geirha18>	err, the kill should be inside the block
T 1568355421 18<wwalker18>	voldial: whether you go with my syntax or with geirha 's  you can replace the program to run with "$@"
T 1568355473 18<wwalker18>	DOH, i left out getting the pid.  geirha has a solution that works as is
T 1568355487 18<voldial18>	got it. applying (and moving the fi;)
T 1568355487 18<wwalker18>	if you want a one liner, use his.
T 1568355530 18<geirha18>	so I take it ffmpeg doesn't return a useful exit status? so you have to do this terrible hack to see if it outputs error messages?
T 1568355532 18<wwalker18>	If you want a generalized script, use geirha 's just replacce ffmpeg with "$@" (including the quotes!)
T 1568355577 18<wwalker18>	The problem he is wanting to work around is that ffmpeg could spend hours encode video before it exits.
T 1568355593 18<geirha18>	aha
T 1568355600 18<wwalker18>	If it is outputing warnings, he wants it to die quick rather than after hours of encoding
T 1568355614 18<geirha18>	still might if it buffers the output
T 1568355652 18<wwalker18>	I don't remember if the exit codes are usefull.  Last used ffmpeg at a dead company about 10 years ago (we wrote a video player for the Play Station 2 :-)
T 1568355697 18<wwalker18>	I don't think that output is buffered.  Not sure how it behaves writing to a pipe (keep that in mind voldial
T 1568355726 18<wwalker18>	Thanks again for finding my stupidity geirha .  Good night all....
T 1568579907 20*	Disconnected (20)
T 1568579933 19*	Now talking on 22#bash
T 1568579933 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568579933 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568579933 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568584921 18<mearon18>	Hi. From within a bash script, I want to run several commands in a container. But for some reason, it doesn't work...  https://dpaste.de/gXjs/raw
T 1568584928 18<mearon18>	It has probably to do with systemd-nspawn
T 1568584988 18<mearon18>	so in the end I was planning to have just this in my script:  https://dpaste.de/oNss/raw
T 1568585072 18<mearon18>	Probably the here document doesn't work the way I intended...
T 1568585107 18<Riviera18>	mearon: perhaps check systemd-nspawn's --console option.
T 1568585136 18<mearon18>	Riviera: cool, thanks!
T 1568585151 18<Riviera18>	mearon: just a wild guess, it's indeed not really related to bash. :)
T 1568585182 18<mearon18>	okay, sorry for that. I was not sure...
T 1568585244 18<twkm18>	you probably should have started at #systemd.
T 1568585296 18<mingdao18>	Just curious how one can "Press ^] three times within 1s..."
T 1568585318 18<mearon18>	mingdao: It's ctrl and the ] key
T 1568585958 20*	Disconnected (20)
T 1568585985 19*	Now talking on 22#bash
T 1568585985 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568585985 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568585985 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568587380 18<Jonta18>	I have some longer one-liners, with a bunch of pipes. What's the best way of separating them for readability/comments? Assigning each part to a variable seems a bit off
T 1568587516 18<Riviera18>	Jonta: functions perhaps.
T 1568587782 18<Jonta18>	Riviera: That seems equivalent to variables. Oh well. Variables it is :)
T 1568587811 18<mknod18>	# bash -c $'echo foo | # comment\n cat'
T 1568587813 18<shbot18>	mknod: foo
T 1568587830 18<mknod18>	make them multi-liners?
T 1568587846 18<jan618>	^ simple, but effective ;P
T 1568587852 18<cttttt18>	Riviera: well named functions can sometimes describe what cryptic commands are intended to do.
T 1568587866 18<cttttt18>	Err...Jonta
T 1568587875 18<jan618>	multi-line function it is, then ;P
T 1568587906 18<cttttt18>	It's almost like we're programming here....lol.
T 1568587929 18<jan618>	almost ;P
T 1568587955 18<Jonta18>	mknod: Ah, that seems like what I was looking for
T 1568587964 18<Jonta18>	cttttt: Well yes, but so can variable names
T 1568588011 18<jan618>	variables are meant to store DATA, not code, but you do you, I suppose
T 1568588052 18<cttttt18>	Jonta: I think both go hand in hand in a well written program you intend to maintain (or have maintained by a group).
T 1568588052 18<jan618>	been here long enough to know people tend to be very set in their ways ;P
T 1568588106 18<cttttt18>	If it's not written for the long term on purpose, though, make it all one line 😂😂😂
T 1568588116 18<Jonta18>	jan6: variable names, not variables
T 1568588209 18<Riviera18>	Jonta: you can add comments to functions
T 1568588240 18<Riviera18>	Jonta: functions can be part of pipelines, contrary to variables you wouldn't require terminating programs and memory to store entire outputs.
T 1568588310 18<cttttt18>	^ this. Functions describe how to do a thing and can be reused throughout your program to do the same thing.  If they actually do one thing, a proper name can even replace a comment.
T 1568588345 18<cttttt18>	Variable names describe the result of some operation and only have meaning in a single context.
T 1568588431 18<Riviera18>	Jonta: i find it opaque what you mean with that equivalence.
T 1568617508 20*	Disconnected (20)
T 1568617535 19*	Now talking on 22#bash
T 1568617535 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568617535 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568617535 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568621126 18<berkley18>	hello
T 1568621139 18<berkley18>	is it possible for bash to read a command within a file.txt?
T 1568621155 18<berkley18>	inside the file.txt i have `ping -c4 127.0.0.1`
T 1568621178 18<berkley18>	but i would like to execute it in `main.sh`
T 1568621487 18<_val_18>	berkley: is that the only line in file.txt?
T 1568621545 18<pigeon12318>	Is this posix?    find
T 1568621639 18<_val_18>	!faq1 > berkley
T 1568621639 18<greybot18>	berkley: https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
T 1568621647 18<pigeon12318>	Because I know Mac OS rejects
T 1568621666 18<pigeon12318>	I wonder why it requires  find .
T 1568621687 18<berkley18>	@_val_  lots of ping and curl commands
T 1568622017 18<_val_18>	berkley: did you read faq1?
T 1568622286 18<berkley18>	not yet, im still trying to code with awk before looping it
T 1568622296 18<berkley18>	i saved the article
T 1568624555 18<Soliton18>	pigeon123: no, that's not posix. find requires at least one path argument.
T 1568626266 18<snooky18>	moin
T 1568626395 18<reactormonk18>	I have a list of newline-separated stuff I want to use as stdin for a process - one line at a time, different process each time. Can xargs do that?
T 1568626497 18<pj18>	reactormonk: no
T 1568626503 18<sshine18>	hi reactormonk :)
T 1568626560 18<reactormonk18>	sshine, o/
T 1568626575 18<sshine18>	I've got a sh function, apply_filter() { if ...; then some_filter; ... else; cat; fi } # so cat is the identity filter
T 1568626608 18<pj18>	reactormonk: actually yes, I think I misundestood what you want.
T 1568626621 18<pj18>	you want the same program to be run but separate processes, right?
T 1568626650 18<reactormonk18>	Yep
T 1568626693 18<sshine18>	and now I'd like to rename this to apply_filter_inner() and wrap it in the following, apply_filter() { if grep -q '^/me '; then sed 's/^\/me //' | apply_filter_inner | sed 's/^/\/me /'; else apply_filter_inner; fi }
T 1568626709 18<pj18>	yeah, look at the xargs man page, look at the -n and -L and -P args.
T 1568626757 18<geirha18>	requires non-standard extensions to xargs though
T 1568626793 18<pj18>	oh, and it passes the lines as args, not as stdin
T 1568626845 18<sshine18>	so, for example, if apply_filter_inner() { perl -ple 'tr/a-z/A-Z/' }, then echo "/me jumps" | apply_filter # should give me back "/me JUMPS". but it gives me nothing. it's as if the output is lost somewhere around the 'if'.
T 1568626846 18<reactormonk18>	pj, hmm, as stdin would make it a bit easier
T 1568626855 18<sshine18>	I'll try and post a working example.
T 1568626885 18<geirha18>	I'd do it with a bash loop instead
T 1568626902 18<Soliton18>	sshine: grep reads the input. just remove it, seems fairly useless.
T 1568626936 18<sshine18>	Soliton, oh, ok. well, if I only remove '/me ' and reinsert it afterwards, it doesn't get conditionally inserted.
T 1568626952 18<sshine18>	Soliton, then echo "hello" | apply_filter becomes "/me hello".
T 1568626954 18<Soliton18>	ah, you insert it again.
T 1568626954 18<pj18>	reactormonk: yeah, you can do it with bash.
T 1568626956 18<geirha18>	i=0; n=5; while read -r line; do if (( i++ > n )); then wait -n; fi; cmd <<< "$line" & done < infile; wait
T 1568626970 18<sshine18>	Soliton, yes, I basically unwrap-rewrap '/me's.
T 1568626976 18<Soliton18>	perhaps think of a better design.
T 1568626985 18<sshine18>	Soliton, I'm in that process.
T 1568627394 18<sshine18>	geirha, was the "I'd do it with a bash loop instead" directed at me, by the way?
T 1568627428 18<sshine18>	I see that going out one layer, there is a 'while read -r line; do ...; done where this kind of manipulation might be more fitting.
T 1568627548 18<pj18>	sshine: no, it was for reactormonk
T 1568627570 18<sshine18>	right, I thought so.
T 1568627588 18<sshine18>	what are you up to, reactormonk?
T 1568627648 18<pj18>	sshine: you do realize that () after a bash function name is only for declaring the function?
T 1568627709 18<sshine18>	pj, yes.
T 1568627728 18<pj18>	ok, not really sure what you're trying to do with this, then: [21:40] <sshine> so, for example, if apply_filter_inner() { perl -ple 'tr/a-z/A-Z/' }, then echo "/me jumps" | apply_filter # should give me back "/me JUMPS". but it gives me nothing. it's as if the output is lost somewhere around the 'if'.
T 1568627732 18<reactormonk18>	sshine, messing with elasticsearch, mostly
T 1568627786 18<sshine18>	pj, I'll try and make this with a 'while', which I think I can, and I can ask again how one might do it without.
T 1568627805 18<pj18>	I have to go.
T 1568627815 18<sshine18>	sure.
T 1568627856 18<sshine18>	reactormonk, I saw a talk by Chris Allen on bloodhound (Haskell wrapper for elasticsearch) and you have my condolences.
T 1568628742 18<zouhair18>	Hi, is there a decent way to convert the "ISO 8601 duration format"  to seconds? https://www.digi.com/resources/documentation/digidocs/90001437-13/reference/r_iso_8601_duration_format.htm
T 1568628765 18<zouhair18>	youtube uses it in theri API for the video duration
T 1568628800 18<zouhair18>	it's a pain
T 1568628844 18<zouhair18>	for ex a video of 1h 10m and 20s will be PT1h10M20S
T 1568628884 18<zouhair18>	but a one with 1h and 20sec will be PT1H20S ommiting the M because it's zero
T 1568628939 18<Soliton18>	!faq 100
T 1568628939 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/100 -- How do I do string manipulations in bash?
T 1568628955 18<zouhair18>	as a noob all i could do is an multiple if/elif statements to check for each case
T 1568628979 18<zouhair18>	if [[ $duration =~ ^PT([0-9]{1,})H([0-9]{1,})M([0-9]{1,})S$ ]];  for PT1H1M1S
T 1568628984 18<zouhair18>	and so on and so forth
T 1568629088 18<Soliton18>	just go through the string according to the format and extract the numbers.
T 1568629847 18<zamba18>	hi! i have the following command to rsync only files from the last day: find . -mtime -1 -print0 | rsync -avz -0 --files-from=- . <host>:<dst_folder>
T 1568629855 18<zamba18>	the problem with this command is that it syncs every file every time
T 1568629866 18<zamba18>	instead of just doing what i thought rsync did - only the changes/differences
T 1568629932 18<mingdao18>	zamba: /join #rsync
T 1568629940 18<zamba18>	mingdao: #rsync's dead
T 1568629961 18<mingdao18>	zamba: No, it's not.
T 1568630025 18<zamba18>	mingdao: prove me wrong :)
T 1568630062 18<mingdao18>	zamba: Just because BasketCase isn't at your beck and call doesn't mean "#rsync's dead".
T 1568630094 18<mingdao18>	zamba: And...BasketCase already solved your problem in #rsync.
T 1568630134 18<mingdao18>	zamba: !notbash
T 1568630139 18<mingdao18>	!notbash
T 1568630139 18<greybot18>	We only answer bash-related questions. Apt-get? #debian. Adding users? ##linux. Sending mail in a PHP script? #php. Makefiles? ##c or ##workingset. Complex regular expressions? #regex.
T 1568633808 18<zeroes18>	I have a unit test folder. I want to run all tests in there. I can achieve this by utests/test1 && utests/test2 && ... utests/testN. Is there more automatic way with for-loop?
T 1568633933 18<nvz18>	zeroes: I was just using a globbing approach to deal with sequential numbers using 00{000001..020000}.jpg to break up a large framedump into smaller more managable chunks, you could probably do something similar
T 1568633969 18<nvz18>	I'd taken nearly 120,000 files and broke them up into 6 dirs of 20,000 each
T 1568634022 18<nvz18>	120,000 files is way too many to work with at once, even the mv command can't handle that many arguments.. but 20,000 is totally doable :P
T 1568641511 20*	Disconnected (20)
T 1568641539 19*	Now talking on 22#bash
T 1568641539 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568641539 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568641540 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568646092 18<omry18>	is there anything that influences the order of displayed tab completions? I have an integration test using expect that is testing bash completion and in some environments (under an IDE) the render order of the completion is different than the one I am actually producing.
T 1568708580 20*	Disconnected (20)
T 1568708607 19*	Now talking on 22#bash
T 1568708607 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568708607 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568708607 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568711457 18<Naabs18>	Hello all.
T 1568712680 18<ryszard18>	hey
T 1568712693 18<ryszard18>	by: "readelf -p 25 <binaryelf>" I can read section header string table of the binaryelf
T 1568712720 18<ryszard18>	but now how can I write those section to separate files ?
T 1568714121 18<earnestly18>	ryszard: objcopy should be able to do that
T 1568715233 18<ryszard18>	earnestly: and if I have only those .bss .data .text etc files can I roll them back to the binary ?
T 1568715276 18<earnestly18>	Yes
T 1568715344 18<ryszard18>	relly? how?
T 1568715355 18<ryszard18>	can't find it in the man
T 1568715411 18<adac18>	How can I sort these kind of strings by splittin for the dash  and sorting all after 3rd dash   "v4.7.1-15-gc3327c980-79-master"
T 1568715592 18<Soliton18>	tell sort to use - as separator and to use field 4.
T 1568715668 18<adac18>	Soliton, tahnks
T 1568715736 18<Soliton18>	i would guess you really want just field 4 as numeric though.
T 1568715807 18<ryszard18>	earnestly: how can I do that ?
T 1568715915 18<earnestly18>	ryszard: --add-section
T 1568715937 18<earnestly18>	Or --update-section perhaps for your case
T 1568715972 18<earnestly18>	ryszard: (This GNU objcopy fwiw)
T 1568715994 18<ryszard18>	hmm ok let me take a look to man
T 1568716080 18<ryszard18>	earnestly: then as I understand I have to add all sections one by one to build a original binary ?
T 1568716106 18<earnestly18>	ryszard: You can use --*-section multiple times in the same call to objcopy
T 1568716121 18<earnestly18>	ryszard: E.g. https://0x0.st/zy0y.txt
T 1568716152 18<ryszard18>	interesting, will try
T 1568716155 18<ryszard18>	give me a sec
T 1568716484 18<ryszard18>	hmm got error
T 1568716505 18<adac18>	Soliton, yes field four you are right :)
T 1568716513 18<ryszard18>	# objcopy --add-section .data=.data ddd.elf results in: objcopy: 'ddd.elf': No such file
T 1568716515 18<shbot18>	ryszard: bash: objcopy: command not found
T 1568716636 18<Soliton18>	adac: sort -n -t- -k 4,4
T 1568716836 18<ryszard18>	earnestly: in the example you provided there is one filename but as I see objcopy requires two ?
T 1568716974 18<earnestly18>	ryszard: [outfile] is optional as the [] syntax denotes
T 1568716999 18<earnestly18>	The manual explains what happens if you don't provide an outfile as well
T 1568717037 18<ryszard18>	then to rollup those dumped parts I have to have the original binary file ?
T 1568717272 18<earnestly18>	I guess, never used it without
T 1568717290 18<earnestly18>	But you can experiment and try things
T 1568717591 18<docmax18>	i need a regex
T 1568717598 18<docmax18>	https://www.edicolanazionale.it/wp-content/jh7my-bnqb2-zxav  ->   edicolanazionale.it:443
T 1568717603 18<docmax18>	in sed
T 1568717722 18<Riviera18>	docmax: sed 's/http\(s\{0,1\}\):\/\/\([^/]*\).*/\2:\1/;s/$/80/;s/s80/443/'
T 1568717738 18<Riviera18>	docmax: note this is not a regex but a sed script, also, there are ##sed and #regex
T 1568717748 18<Riviera18>	docmax: a wait, minor correction:
T 1568717760 18<Riviera18>	docmax: sed 's/http\(s\{0,1\}\):\/\/\([^/]*\).*/\2:\1/;s/$/80/;s/s80$/443/'
T 1568717789 18<ryszard18>	earnestly: ok, thanks
T 1568717819 18<Riviera18>	docmax: oh, and the www should also go, damn. what's that in English? Remove the first part of the host, or, keep the last two? Or, be aware of top-level-domains and keep one hierarchy higher?
T 1568717886 18<dreisner18>	seems like a job for python or some other language with a URL parser.
T 1568717933 18<dreisner18>	what happens when the TLD is multiple components?
T 1568717948 18<dreisner18>	www.ponies.co.uk, for example
T 1568718011 18<docmax18>	Riviera: thanks!!!
T 1568718030 18<Riviera18>	docmax: ... see my questions? :) And dreisner's, which is one of the ones I asked. :)
T 1568718049 18<earnestly18>	dreisner: Not that python can consistently get url parsing right across its different libraries
T 1568718055 18<docmax18>	sorry
T 1568718061 18<docmax18>	https://www.edicolanazionale.it/wp-content/jh7my-bnqb2-zxav  ->   www.edicolanazionale.it:443
T 1568718063 18<earnestly18>	(Or perhaps anyone else)
T 1568718069 18<docmax18>	i want the www
T 1568718072 18<Riviera18>	docmax: ah, so that sed thing does that then, good. :)
T 1568718081 18<docmax18>	the second?
T 1568718093 18<docmax18>	sed 's/http\(s\{0,1\}\):\/\/\([^/]*\).*/\2:\1/;s/$/80/;s/s80$/443/
T 1568718093 18<Riviera18>	docmax: yup
T 1568718099 18<docmax18>	perfect
T 1568718135 18<docmax18>	wait
T 1568718141 18<docmax18>	http should be ignored!
T 1568718180 18<Riviera18>	docmax: so, it should always be 443? :)
T 1568718187 18<docmax18>	only if https matches
T 1568718192 18<docmax18>	:443
T 1568718194 18<Riviera18>	docmax: and what should happen when it's http?
T 1568718209 18<Riviera18>	docmax: only the hostname?
T 1568718213 18<docmax18>	if http the line shouldnt be touched
T 1568718217 18<Riviera18>	docmax: ah.
T 1568718230 18<docmax18>	can you rewrite please?
T 1568718295 18<Riviera18>	docmax: sed 's/https:\/\/\([^/]*\).*/\1:443/'
T 1568718302 18<docmax18>	thank you!!
T 1568718307 18<Riviera18>	np
T 1568718856 18*	earnestly .oO(Hmm, awk -F / '$1 == "https:" {print $3 ":443"}')
T 1568719330 18<mknod18>	Do you find it acceptable to rely on lexicographic order to sort date strings? (as long as they are formatted accordingly). Cannot help but feel uneasy about this.
T 1568719347 18<geirha18>	yes
T 1568719398 18<earnestly18>	mknod: The "formatted accordingly" was designed in such a way that they were lexical
T 1568719433 18<earnestly18>	That was one of the main principles, to make lexicographical order the same as the chronological order
T 1568719582 18<mknod18>	I didn't know there is a standard that was designed with this in mind (is that what you are saying?). I'm just using %Y-%m-%d out of common sense.
T 1568719597 18<geirha18>	iso8601
T 1568719619 18<mknod18>	Nice. Thank you both
T 1568719890 18<Riviera18>	although using this date format solely for being able to have an easy time sorting is a medieval hack
T 1568719975 18<survietamine18>	I use medieval hack to process gdpr cleaning :p
T 1568720423 18<mknod18>	It feels like a hack when used to make programming easier, and it feels like good computer hygiene when ensuring my file system sorts naturally. So I must be biased.
T 1568721594 18<kreyren18>	Looking for recommendations for Shellcheck for vim
T 1568721668 18<kerframil18>	kreyren: ale, perhaps
T 1568721674 18<kreyren18>	kerframil, thanks
T 1568721682 18<kerframil18>	I know it has a shellcheck linter.
T 1568721717 18<earnestly18>	Reinventing errorformat in viml was never better
T 1568721770 18<earnestly18>	The only linter with a "battery saving mode"
T 1568722093 18<xochilpili18>	hello everyone
T 1568722157 18<xochilpili18>	im trying to do something like this: cat my_sample | grep $(cat another | awk -F ":" '{print $2}') | awk -F ":" '{print $1}', directly from shell, but i cant ?
T 1568722210 18<xochilpili18>	 how can i grep (from a result of a cat | awk ) ?
T 1568722229 18<geirha18>	might work if you quote the command substitution, but it's probably better to just do it all in a single awk
T 1568722236 18<Soliton18>	!grepawk
T 1568722236 18<greybot18>	Awk can do almost everything grep can do. Instead of doing grep 'foo' | awk '{ statement }', try awk '/foo/{ statement }'
T 1568722241 18<xochilpili18>	geirha, what you mean?
T 1568722254 18<geirha18>	awk is a powerful language
T 1568722287 18<xochilpili18>	geirha, but i want to find results from one file, depending of second one
T 1568722298 18<geirha18>	right, and awk can do that
T 1568722318 18<xochilpili18>	any example?
T 1568722405 18<geirha18>	wild guessing on what you're tring to do:  awk -F: 'FNR == NR {a[$2];next} $2 in a {print $1}' another my_sample
T 1568722409 18<Soliton18>	what use is it to come up with an example if you have one? problem solving the most useless way?
T 1568722630 18<xochilpili18>	geirha, thanks
T 1568722679 18<wwilliam18>	Hello the following script fails from crontab the line failing is find . -maxdepth 1 -daystart -mtime 1 -name 'ing2_file_*.txt' -print when running from command line it finds the file.  any insights please?  thank you.
T 1568722683 18<wwilliam18>	http://paste.debian.net/hidden/98ec7cf3/
T 1568722697 18<Soliton18>	what is . in cron?
T 1568722709 18<wwilliam18>	like what?
T 1568722718 18<Soliton18>	ok, what is .?
T 1568722743 18<wwilliam18>	I dont understand the question.
T 1568722752 18<kerframil18>	literally: what does . mean?
T 1568722760 18<geirha18>	as a path
T 1568722761 18<kerframil18>	knowing that is key to diagnosing the issue.
T 1568722761 18<wwilliam18>	present directory
T 1568722779 18<Soliton18>	so what is the present directory in cron?
T 1568722780 18<kerframil18>	ok, so what's the current working directory for code executed in your crontab?
T 1568722794 18<kerframil18>	and what was the current working directory for "running from command line"?
T 1568722823 18<wwilliam18>	wdir=/u/CCDev
T 1568722835 18<Patsie18>	foo=bar!
T 1568722843 18<wwilliam18>	kerframil: /u/CCDev
T 1568722844 18<geirha18>	the find is on line 8, cd "$wdir" is on line 14
T 1568722847 18<geirha18>	try again
T 1568722853 18<wwilliam18>	ok
T 1568722855 18<wwilliam18>	Thanks
T 1568723547 18<wwilliam18>	it "worked" doing this but why? dont i have to declare the vars at the beggining then do the cd and the find im confused like always
T 1568723549 18<wwilliam18>	cd "$wdir" || exit;
T 1568723550 18<wwilliam18>	emlfl=$(find . -maxdepth 1 -daystart -mtime 1 -name "ing2_file_*.txt" -print)
T 1568723552 18<wwilliam18>	echo "$emlfl"
T 1568723570 18<geirha18>	I can't fathom why that is confusing
T 1568723589 18<wwilliam18>	you know me im clueless.
T 1568723606 18<Soliton18>	. means current dir. if you issue a cd call the meaning of . obviously changes.
T 1568723621 18<Soliton18>	nothing to do with any variables.
T 1568723642 18<wwilliam18>	Ok Thank you will analize.
T 1568723651 18<wwilliam18>	Thank you all for your time.
T 1568724472 18<xochilpili18>	geirha, dont get it, i create 2 files, file one: 1000:sample\n2000:sample1\n3000:sample3, file_two: sample:2000\ndemo:1000\nex:3000 then using awk -F: 'FNR=NR{a[$1]=$1;next} $2 in a {print $1}' file_one file_two and prints nothing
T 1568724507 18<xochilpili18>	geirha, dont get it, i create 2 files, file one: 1000:sample\n2000:sample1\n3000:sample3, file_two: sample:2000\ndemo:1000\nex:3000 then using awk -F: 'FNR==NR{a[$1]=$1;next} $2 in a {print $1}' file_one file_two and prints nothing << corrected == in FNR==NR
T 1568724626 18<geirha18>	# printf '1000:sample\n2000:sample1\n3000:sample3\n' > f1; printf 'sample:2000\ndemo:1000\nex:3000\n' > f2; awk -F: 'FNR==NR{a[$1]=$1;next} $2 in a {print $1}' f1 f2
T 1568724628 18<shbot18>	geirha: sample
T 1568724628 18<shbot18>	geirha: demo
T 1568724628 18<shbot18>	geirha: ex
T 1568724670 18<geirha18>	!wfm
T 1568724670 18<greybot18>	Works For Me!
T 1568724693 18<xochilpili18>	geirha, dont know why here is not working
T 1568724716 18<geirha18>	did you create the files on windows? if so, it's the \r in its \r\n line endings that's causing trouble
T 1568724733 18<xochilpili18>	geirha, no, im in linux
T 1568724794 18<timvisher18>	Is there a way to emit a NUL delimited stream? i.e. I want to pipe some arbitrary command/pipeline to `xargs -0` to ensure that I don't overrun the command line length limit.
T 1568724820 18<geirha18>	printf '%s\0' "${array[@]}" | xargs -0 ...
T 1568724822 18<timvisher18>	The solutions I've come up with so far all leave a trailing NUL character which obviously doesn't work.
T 1568724834 18<timvisher18>	Or maybe it does?
T 1568724839 18<geirha18>	it should
T 1568724843 18<timvisher18>	Because geirha suggested one of the ones I wanted to do.
T 1568724846 18<xochilpili18>	geirha, oh i see!
T 1568724848 18<xochilpili18>	:D :D
T 1568724852 18<xochilpili18>	thanks!
T 1568724911 18<timvisher18>	gerlo: 2 questions: 1. Won't that pass an extra arg because of the trailing NUL and 2. Will that not run afoul of the command length rule if array is very large?
T 1568724922 18<timvisher18>	Or is printf being a builtin going to save me there?
T 1568724995 18<timvisher18>	Nope. Actually the trailing NUL is expected.
T 1568724996 18<timvisher18>	TIL
T 1568725031 18<timvisher18>	So then only question 2 remains. And I'm guessing that bash will handle that for me with the builtin.
T 1568725088 18<geirha18>	# printf 'foo\0bar\0' | xargs -0 printf '<%s>'
T 1568725090 18<shbot18>	geirha: <foo><bar>
T 1568725092 18<ultrav1olet18>	How can I `basename "$1"` only the first argument of a script which has many invocations like this which I wouldn't want to change: application "$@"
T 1568725113 18<timvisher18>	So basically if I can get NUL interleaved into the stream in some way, either by reading into an array and then using printf or by some other means then I can send a pipeline to xargs -0.
T 1568725114 18<geirha18>	timvisher: printf is a builtin, so it's not limited by the argmax limit
T 1568725135 18<ultrav1olet18>	$1 doesn't look a variable you could change, cause without $ it's just a number :-)
T 1568725151 18<timvisher18>	geirha: Thanks for confirming. That's what I expected. And I also confirmed that `find … -print0` emits a trailing NUL so `xargs -0` definitely allows for it because that's what it was designed for. :)
T 1568725166 18<geirha18>	ultrav1olet: is it a bash script or sh script?
T 1568725174 18<ultrav1olet18>	geirha: bash
T 1568725199 18<ultrav1olet18>	(technically it's sh but sh defaults to bash in Fedora Linux)
T 1568725202 18<geirha18>	ultrav1olet: then you can store them in an array
T 1568725235 18<ultrav1olet18>	and change each invocation of "$@" to "$array" or something?
T 1568725243 18<geirha18>	ah wait, no, if it's an sh script, don't use arrays
T 1568725248 18<geirha18>	even if sh is bash
T 1568725249 18<ultrav1olet18>	it's exactly what I wanted to avoid
T 1568725276 18<geirha18>	tmp=$1; shift; set -- "$(basename "$tmp")" "$@"
T 1568725294 18<ultrav1olet18>	wow, gonna check it right away
T 1568725297 18<geirha18>	or just run your command with application "$(basename "$tmp")" "$@" instead
T 1568725431 18<ultrav1olet18>	I'm hitting some infinite loop with  tmp=$1; shift; set -- "$(basename "$tmp")" "$@"
T 1568725434 18<ultrav1olet18>	No idea why
T 1568725460 18<geirha18>	then it's probably inside a loop
T 1568725470 18<geirha18>	that's infinite
T 1568725564 18<xochilpili18>	geirha, now im trying to make somethig like this as output: sample:demo\nsample1:sample using awk -F: 'FNR==NR{a[$1]=$1":"$2;next} $1 in a {print a[$1]":"$2}' sample_one sample_two
T 1568725580 18<xochilpili18>	same logic, but dont get it work, what am i missing ?
T 1568725635 18<xochilpili18>	# printf '1000:sample\n2000:sample1\n3000:sample3\n' > f1; printf 'sample:2000\ndemo:1000\nex:3000\n' > f2; awk -F: 'FNR==NR{a[$1]=$1","$2;next} $2 in a {print a[$1]","$1}' f1 f2
T 1568725636 18<shbot18>	xochilpili: ,sample
T 1568725636 18<shbot18>	xochilpili: ,demo
T 1568725636 18<shbot18>	xochilpili: ,ex
T 1568725659 18<geirha18>	a[$2]","$1
T 1568725668 18<xochilpili18>	# printf '1000:sample\n2000:sample1\n3000:sample3\n' > f1; printf 'sample:2000\ndemo:1000\nex:3000\n' > f2; awk -F: 'FNR==NR{a[$2]=$1","$2;next} $2 in a {print a[$1]","$1}' f1 f2
T 1568725669 18<shbot18>	xochilpili: no output
T 1568725682 18<xochilpili18>	# printf '1000:sample\n2000:sample1\n3000:sample3\n' > f1; printf 'sample:2000\ndemo:1000\nex:3000\n' > f2; awk -F: 'FNR==NR{a[$1]=$1","$2;next} $2 in a {print a[$2]","$1}' f1 f2
T 1568725683 18<shbot18>	xochilpili: 2000,sample1,sample
T 1568725683 18<shbot18>	xochilpili: 1000,sample,demo
T 1568725683 18<shbot18>	xochilpili: 3000,sample3,ex
T 1568725695 18<geirha18>	there you go
T 1568725709 18<xochilpili18>	geirha, thanks
T 1568725734 18<geirha18>	now you've implemented join(1) in awk
T 1568725771 18<geirha18>	though awk is arguably much more understandable than the archaic syntax of join(1), so I'd stick with awk
T 1568726505 18<xochilpili18>	geirha, i will learn more about awk :D
T 1568726589 18<xochilpili18>	but i have this question geirha , if i do this: a{$1}=$4":"$2;next $1 in a {print a[$2]} im not able to print column 2 of file one ?
T 1568726614 18<xochilpili18>	it is saved in the array a as "sample:1234" but cant access only to 1234 ?
T 1568726644 18<greycat18>	your syntax is completely messed up, to the point I can't even tell what you're trying to do
T 1568726650 18<geirha18>	you can use two arrays.  a[$1]=$4;b[$1]=$2
T 1568727131 18<kurahaupo18>	xochilpili: also, your habitual quoting is backwards for the shell; you should double-quote variables and other expansions,  but
T 1568727132 18<kurahaupo18>	ordinary text need not be quoted (though you may if you wish).
T 1568727137 18<kurahaupo18>	xochilpill: So the colon is the one part of your text that *doesn't* need quoting; the variable expansions of either side of it are what should be quoted.
T 1568727153 18<wwilliam18>	http://paste.debian.net/1101234/
T 1568727161 18<greycat18>	but in awk, ":" is correct for a literal string
T 1568727188 18<greycat18>	it might have been *really* hard to tell because of how broken the syntax was, but xochilpili was trying to write awk there.
T 1568727192 18<kurahaupo18>	Ah, didn't read that far back
T 1568727205 18<geirha18>	yeah, it was meant to be awk syntax, but pretty broken at that too
T 1568727246 18<greycat18>	(although it's academic if the actual goal is to store two values per line, in two arrays, as geirha hinted)
T 1568727260 18<kurahaupo18>	(that explains why neither of you mentioned it)
T 1568727399 18<kurahaupo18>	wwilliam: same way that you would pipe between any other two commands. just make sure that function has been defined first
T 1568727417 18<wwilliam18>	Thank you kurahaupo
T 1568727457 18<kurahaupo18>	wwilliam: it pays to put a synopsis of your question in the channel; don't assume anyone will read a paste with no explanation
T 1568727480 18<wwilliam18>	Sorry.
T 1568728037 18<wwilliam18>	kurahaupo: the function is in /root/.bashrc i am getting this:
T 1568728039 18<wwilliam18>	++ fndlgs
T 1568728040 18<wwilliam18>	./testfind: line 2: fndlgs: command not found
T 1568728069 18<greycat18>	why would you expect a script to be able to execute a function that's in root's .bashrc file?
T 1568728080 18<greycat18>	did your script source that file?
T 1568728093 18<wwilliam18>	no greycat
T 1568728097 18<geirha18>	.bashrc is only for setting up interactive shells
T 1568728106 18<geirha18>	when your shell runs a script, it's non-interactive
T 1568728117 18<forgon18>	 /buffer 3
T 1568728119 18<wwilliam18>	Thank you.
T 1568728212 18<greycat18>	One of the basic objectives in programming (which includes shell scripts) is being able to count on the behavior of a program, without having to guess whether any of dot files in some user's directory will change that behavior.
T 1568728250 18<greycat18>	There are places where this ideal does not hold up (exported functions, for example), but generally speaking, you should be able to tell what a script will do by reading ONLY the script.
T 1568728436 18<alsaiduq18>	hey guys, i want o diff the output of `mount` and cat /etc/mtab
T 1568728449 18<alsaiduq18>	cat /etc/mtab | diff < $(mount)
T 1568728467 18<greycat18>	diff -u <(sort /etc/mtab) <(mount | sort)
T 1568728471 18<kurahaupo18>	alsaiduq: reverse them
T 1568728472 18<alsaiduq18>	i'm trying this command but it's giving ambiguios redirection
T 1568728487 18<greycat18>	!<(
T 1568728487 18<greybot18>	Process Substitution: <(command) or >(command) is replaced by a FIFO or /dev/fd/* entry. Basically shorthand for setting up a named pipe. See <http://mywiki.wooledge.org/ProcessSubstitution>. Example: diff -u <(sort file1) <(sort file2)
T 1568728564 18<kurahaupo18>	alsaiduq: the filename given to the < redirection operator must be quoted if it contains spaces, which the output of mount is likely to
T 1568728580 18<greycat18>	no, the bugs are deeper than that
T 1568728593 18<kurahaupo18>	alsaiduq: <$(…) is almost always wrong
T 1568728605 18<greycat18>	they tried to redirect two different stdin streams to one diff command, and the second one wasn't even syntactically correct
T 1568728622 18<greycat18>	diff needs to *file name arguments*.
T 1568728626 18<greycat18>	two
T 1568728638 18<greycat18>	<() is a filename.  < "$(cmd)" is not.
T 1568728646 18<kurahaupo18>	mount | diff - /etc/mtab
T 1568728673 18<greycat18>	and this will work without sorting...?
T 1568728694 18<greycat18>	*shrug* I guess that's an OS channel question
T 1568728755 18<kurahaupo18>	alsaiduq: the mtab file often contains additional options that are not reflected in the information that mount gets from the kernel; eg the "user" option that allows the owner of the directory to unmount it, as well as root
T 1568728804 18<kurahaupo18>	Or, on some systems, 'mount' simply prints the contents of mtab, so the comparison would be pointless
T 1568728823 18<greycat18>	wooledg:~$ grep /dev/sda3 /etc/mtab
T 1568728823 18<greycat18>	/dev/sda3 /boot ext4 rw,relatime 0 0
T 1568728823 18<greycat18>	wooledg:~$ mount | grep /dev/sda3
T 1568728823 18<greycat18>	/dev/sda3 on /boot type ext4 (rw,relatime)
T 1568728830 18<greycat18>	On mine, every single line is different.
T 1568728869 18<kurahaupo18>	I'm not surprised…
T 1568728931 18<alsaiduq18>	kurahaupo yes, that's why I've though about diffing them, to check their difference
T 1568728940 18<alsaiduq18>	on mine every single line is different as well
T 1568728953 18<kurahaupo18>	Linux makes it really entertaining, where a single fs can be mounted concurrently in two places AND a single directory can have multiple mounts stacked on it
T 1568728955 18<alsaiduq18>	but I didn't know that
T 1568729027 18<alsaiduq18>	isn't dangerous to mount a single fs concurrently in two different places?
T 1568729032 18<alsaiduq18>	kurahaupo
T 1568729036 18<greycat18>	ask your OS channel
T 1568729064 18<kurahaupo18>	not in Linux; the kernel merely makes both mount points refer to the same instance of the fs driver
T 1568729082 18<kurahaupo18>	on other OSes, yes, that would be terrible
T 1568729116 18<kurahaupo18>	oh except for ocfs, which is supposed to be used that way
T 1568729175 18<kurahaupo18>	alsaiduq: it would be dangerous to mount an fs using multiple kernels, such as Xen guests
T 1568729209 18<kurahaupo18>	but not multiple containers that share one kernel
T 1568729366 18<kurahaupo18>	(I have mount -t tmpfs mytmpfs ~/tmp in my .profile; arranging not to stack multiple mounts is actually tricky in Linux)
T 1568729368 18<alsaiduq18>	kurahaupo i though Xen, for example, wouldn't modify a kernel at the point of chaing its fs mounting guidelines
T 1568729375 18<alsaiduq18>	changing*
T 1568729421 18<kurahaupo18>	alsaiduq: each guest has its own kernel, and a separate instance of the fs driver within each kernel; that's where the danger lies
T 1568729444 18<kurahaupo18>	even if they are identical kernels, they are separate instances
T 1568729516 18<kurahaupo18>	but Xen generally stops you from sharing a "block device" between guests unless you ask extra nicely, so you're unlikely to encounter the problem
T 1568729519 18<greycat18>	depending on which VM machinery is in use, guests may have their own kernels, or they may share the host's kernel
T 1568729526 18<greycat18>	this is getting way off topic
T 1568729531 18<kurahaupo18>	indeed
T 1568729612 18<kurahaupo18>	alsaiduq: continue this in pm if you wish
T 1568730469 18<oskie18>	acmc
T 1568732398 18<InnerUbuntu18>	Is there a way to redirect stdout to a file, but at the same time keep printing it in the terminal?
T 1568732403 18<greycat18>	tee
T 1568732437 18<InnerUbuntu18>	ok but what if I have to stop the stdout stream by using CTRL+C
T 1568732446 18<InnerUbuntu18>	tee doesnt write anything to the file
T 1568732457 18<greycat18>	!faq buffer
T 1568732457 18<greybot18>	https://mywiki.wooledge.org/BashFAQ/009 -- What is buffering?  Or, why does my command line produce no output: tail -f logfile | grep 'foo bar' | awk ...
T 1568732473 18<InnerUbuntu18>	:)
T 1568732477 18<InnerUbuntu18>	thx
T 1568732496 18<greycat18>	you'll have to find some way to stop your long-running-expects-to-be-killed command from buffering stdout when it's being piped
T 1568732534 18<InnerUbuntu18>	thanks again :)
T 1568733792 18<arinov18>	september... the stdin/stdout questions period
T 1568733820 18<alsaiduq18>	lmao
T 1568733822 18<arinov18>	the next will be grep, cut, awk, then lvm
T 1568733830 18<greycat18>	Every month is frequently asked questions month.
T 1568733841 18<arinov18>	in december it will bash syntax
T 1568733876 18<arinov18>	greycat: its a student course relative
T 1568733900 18<arinov18>	greycat: they starts from pipes and in december they will code something in bash
T 1568733968 18<alsaiduq18>	they questions are just done gradually for you guys don't quickly grasp it's student course relative lol
T 1568734000 18<alsaiduq18>	but i don't judge, i do those questions as well
T 1568734117 18<arinov18>	its always interesting to answer for myself, so the channel is a generator of interesting questions
T 1568734295 18<alsaiduq18>	we go through a loop of interesting and previously answered questions, which keep us remembering the concepts
T 1568734298 18<alsaiduq18>	learning by spaced repetition
T 1568734606 18<bashquest18>	hello. i did a bash test on the internet and i failed. feels a bit depressing. like i overestimated myself. however. come over it.
T 1568734612 18<bashquest18>	btw, i have question
T 1568734619 18<bashquest18>	declare file_name="$(basename ""${media}"")"
T 1568734624 18<bashquest18>	why is this not working?
T 1568734631 18<greycat18>	!quotes
T 1568734631 18<greybot18>	http://mywiki.wooledge.org/Quotes
T 1568734633 18<bashquest18>	how to do that with quotes
T 1568734659 18<greycat18>	!forget quotes
T 1568734659 18<greybot18>	OK, greycat
T 1568734660 18<greycat18>	!learn quotes https://mywiki.wooledge.org/Quotes
T 1568734660 18<greybot18>	OK, greycat
T 1568734661 18<bashquest18>	cant u just say whats from with my quotes ... ? im just concatenating strings
T 1568734666 18<bashquest18>	dude
T 1568734676 18<bashquest18>	it works inline on the command line but not in a script
T 1568734678 18<bashquest18>	why
T 1568734680 18<bashquest18>	dude, why
T 1568734695 18<greycat18>	What you've written is wrong.  We have a page that explains why.
T 1568734725 18<greycat18>	It's about 60% of the way down.  I could add an anchor, but that's a pain.
T 1568734743 18<greycat18>	using the natural anchors already in the wiki... it's at https://mywiki.wooledge.org/Quotes#line-129
T 1568734792 18<bashquest18>	oh thank you nevertheless, for the anchor, greycat ... !
T 1568734818 18<greycat18>	I strongly recommend reading the whole page.
T 1568734833 18<bashquest18>	looks like you dont have to concat strings when "$()"? the interpreter is really that smart?
T 1568735115 18<kerframil18>	this was explained in excruciating detail on the last occasion this same question was asked. between that and the linked page, you have all the information that's needed.
T 1568735159 18<greycat18>	Every day is quotes day.
T 1568735217 18<bashquest18>	i want do to it perfectly you know... and i want to avoid e.g. glob-hacks or the like to you know...
T 1568735230 18<kerframil18>	but it's not every day you get your explanations thrown back in your face with constant, erroneous, contradictory statements.
T 1568735235 18<kurahaupo18>	bashquest: unlike other languages you've used, quotes DON'T delimit strings
T 1568735243 18<greycat18>	kerframil: *cough*
T 1568735245 18<kerframil18>	he thinks there's a "glob exploit", if written the correct way.
T 1568735246 18<greycat18>	it... is.
T 1568735329 18<kerframil18>	even though it's his incantation that has an unquoted expansion of the variable.
T 1568735341 18<greycat18>	The hardest part of offering support in this channel is that people come in here with serious misunderstandings about extremely fundamental, important things.
T 1568735343 18<bashquest18>	yeah, i know, burnout is a real problem in ICT
T 1568735351 18<bashquest18>	thank you nevertheless
T 1568735357 18<bashquest18>	i guess, i learned something new
T 1568735362 18<kerframil18>	you didn't. that's the problem.
T 1568735370 18<bashquest18>	burnout.
T 1568735376 18<bashquest18>	thats your problem,.
T 1568735458 18<kerframil18>	!b18
T 1568735458 18<greybot18>	The newbie will not accept the answer you give, no matter how right it is.
T 1568735532 18<greycat18>	wooledg:~$ args 'one' "two" $'three'
T 1568735532 18<greycat18>	3 args: <one> <two> <three>
T 1568735533 18<greycat18>	wooledg:~$ echo "$(args 'one' "two" $'three')"
T 1568735533 18<greycat18>	3 args: <one> <two> <three>
T 1568735563 18<greycat18>	inside "$(...)" you quote exactly the way you would if the "$(...)" were not present
T 1568735656 18<bashquest18>	such a dumb bot.
T 1568735668 18<bashquest18>	who has the longest penis community, huh?
T 1568735681 18<greycat18>	... what the hell are you talking about now?
T 1568735689 18<kerframil18>	greycat: I tried to warn you.
T 1568735690 18<bashquest18>	sorry that i need to read a book five to three times to understand it properly
T 1568735723 18<bashquest18>	i will... hack you! dumbasses!
T 1568735726 18*	bashquest is kidding
T 1568735826 18<Soliton18>	perhaps you should concentrate on solving/understanding your issue instead of acting like you don't deserve any attention.
T 1568735839 18<bashquest18>	i had a mentor who put me all the lucid explanations into my throat.
T 1568735848 18<bashquest18>	unfortunately hes dead now. car accident.
T 1568735864 18<bashquest18>	amen
T 1568735942 18<polyzen18>	okay then
T 1568735992 18<kerframil18>	a cyber-stalker in the making.
T 1568736266 18<timvisher18>	Whoa. Had not heard of `args` before.
T 1568736278 18<greycat18>	it's not a standard command.  it's a script.
T 1568736286 18<greycat18>	#!/bin/sh
T 1568736287 18<greycat18>	printf "%d args:" "$#"
T 1568736287 18<greycat18>	printf " <%s>" "$@"
T 1568736287 18<greycat18>	echo
T 1568736295 18<timvisher18>	Oh so you're not using https://manpages.debian.org/stretch/ucommon-utils/args.1.en.html?
T 1568736323 18<greycat18>	no.
T 1568736332 18<timvisher18>	I guess that should've been obvious by your next statement. :)
T 1568736358 18<timvisher18>	I have often wanted something like that when demonstrating word splitting gotchas to coworkers. :)
T 1568736394 18<greycat18>	it's on  http://mywiki.wooledge.org/WordSplitting  also
T 1568736451 18<timvisher18>	I have also managed never to read this wiki page…
T 1568736454 18*	timvisher sighs
T 1568736461 18<timvisher18>	So much to do.
T 1568736468 18<greycat18>	it's not one of the common ones
T 1568736589 18<davidfetter_work18>	Is there some kind of guideline for when something's gotten too big to be a bash program? I was thinking one of them might be when I start looking for ways to do the things getopt_long does.
T 1568736625 18<greycat18>	I can't imagine there will ever be any kind of consensus over what language to use for each thing.
T 1568736641 18<OMGOMG18>	i think when you start looking for guidelines it's a good sign already
T 1568736654 18<davidfetter_work18>	I specifically didn't mention a particular alternative
T 1568736672 18<timvisher18>	davidfetter_work: Mine is always the moment I think to myself 'I should rewrite this in a better language.' which is always followed directly by the 'Shoot this is too big to rewrite now.' thought.
T 1568736686 18<Soliton18>	rather than too big i would switch when you want features bash doesn't have.
T 1568736693 18<Soliton18>	!weakness
T 1568736693 18<greybot18>	http://mywiki.wooledge.org/BashWeaknesses
T 1568736725 18<davidfetter_work18>	yeah, I've hit #2 more often so far than #1
T 1568736739 18<davidfetter_work18>	(partly because when I'm going for #1, I'm mostly thinking C)
T 1568736765 18<Soliton18>	there is a lot between bash and c performance wise.
T 1568736836 18<davidfetter_work18>	of course. It's just that by the time I'm thinking about performance on a green field project, I'm already looking at C.
T 1568736879 18<timvisher18>	The thing is there's always a way to force it to work in bash, even if you are reinventing wheels language X has built in. My problem is always that my scripts grow from tiny little things in unexpected ways and the moment I'm one hack too far it's too late.
T 1568736968 18<davidfetter_work18>	I guess I've been lucky that way so far. When a bash program I've written needs to grow in any significant way, I figure I got the design wrong.
T 1568736996 18<timvisher18>	davidfetter_work: You sound more discipline than me. :)
T 1568737006 18<davidfetter_work18>	Just lazier
T 1568737006 18<timvisher18>	disciplined*
T 1568740038 18<dwts18>	hi all, I have a question supposing that I have a file /etc/my-jvm-opts where I set some options in a bash string like this: JAVA_OPTS="my_opts_here" and then from another script I `source /etc/my-jvm-opts`. If I run `java $JAVA_OPTS` everything runs fine. If I run `java "$JAVA_OPTS"` I get heap-related errors
T 1568740055 18<dwts18>	any ideas why the double quotes mess the behaviour of the script in this context ?
T 1568740070 18<dwts18>	I thought taht it's always a good practice to double quote variables ?
T 1568740081 18<dwts18>	s/taht/that
T 1568740125 18<greycat18>	You're trying to store a list of argument words in a string variable.  This is never going to work in the general case.  You *might* be able to get away with it if you can guarantee that no argument word contains whitespace or globbing chars.
T 1568740149 18<dwts18>	the word contains spaces and dashes :P
T 1568740152 18<greycat18>	The only generalized alternative is to store the arguments in an array, which means sh can't do it.
T 1568740179 18<twkm18>	sounds like you need to export the variable.
T 1568740186 18<dwts18>	greycat: so basically the spaces and special characters like - break things for me?
T 1568740205 18<dwts18>	twkm: I'm exporting the variable in the /etc/my-jvm-opts file
T 1568740218 18<greycat18>	- is not a globbing character.  * and ? and [ are.
T 1568740248 18<dwts18>	hmmm, I don't think I'm using any chars like these, only spaces and dashes
T 1568740258 18<dwts18>	greycat: is this documented somewhere in the bash manual?
T 1568740264 18<greycat18>	Are there spaces *inside* any of your arguments, like CFLAGS="-g -O" ?
T 1568740275 18<greycat18>	Is what documented?  How word splitting works?  Yes.
T 1568740281 18<greycat18>	In a trillion places.
T 1568740296 18<dwts18>	greycat: yes it's like the CFLAGS example
T 1568740301 18<greycat18>	Then you cannot do it in sh.
T 1568740310 18<greycat18>	If your /etc/java-whatever is read by an sh script, you are fucked.
T 1568740322 18<dwts18>	but I'm using bash not posix scripts
T 1568740324 18<greycat18>	If your JAVA_OPTS is exported as an environment variable, you are fucked.
T 1568740330 18<dwts18>	hmmmm
T 1568740413 18<superboot18>	Hi all. I'm writing a loop to find the most recently changed file in locates output:    x=0 max=0 locate duke| grep -i energy | while read line; do x=$(stat -c %Y "$line"); if [[ "$x" -gt "$max" ]]; then max="$x"; f=$line; fi; done; echo "$max"; echo $f;       This outputs nothing. I can see x, max, and f, are all asigned to if I run this under bash -x. Why are they not surviving the loop?
T 1568740426 18<dwts18>	greycat: so, my best alterative is creating a bash array of strings with each element being a single "CFLAG" ?
T 1568740430 18<superboot18>	I'm all ears if there is an easier way to do this.
T 1568740437 18<greycat18>	!faq disappear > superboot
T 1568740437 18<greybot18>	superboot: https://mywiki.wooledge.org/BashFAQ/024 -- I set variables in a loop that's in a pipeline. Why do they disappear after the loop terminates? Or, why can't I pipe data to read?
T 1568740460 18<superboot18>	greycat: Awesome! Thanks.
T 1568740468 18<greycat18>	dwts: I don't know what you're designing here.  The ALL_CAPS_NAME implies an environment variable.
T 1568740493 18<dwts18>	greycat: you are correct, what other information would you need to help me?
T 1568740512 18<greycat18>	If it's an environment variable, you are fucked.  Start over.  Throw everything away.
T 1568740523 18<dwts18>	lol, ok
T 1568740531 18<greycat18>	An environment variable is a string, never an array.  You can't store a list of strings in an string.  There's no way to tell where each one ends.
T 1568740540 18<dwts18>	so, if i throw things away, how can I properly start over?
T 1568740543 18<twkm18>	dwts: your discussion does not state that you did.
T 1568740548 18<greycat18>	What are you trying to do?
T 1568740587 18<dwts18>	I'm having an /etc file which holds env variables. This /etc file is sourced by a script that starts a java service
T 1568740610 18<dwts18>	the variables are java options to be passed to the java executable
T 1568740615 18<dwts18>	to start the java service
T 1568740625 18<dwts18>	does that help ?
T 1568740641 18<greycat18>	Consider alternatives like "instead of passing arguments in an environment variable, I'll have a special file that lists the arguments one per line".
T 1568740666 18<dwts18>	greycat: ok, I can give that a try I guess
T 1568740667 18<greycat18>	Or "I'll write a wrapper script that invokes jave --foo="bar quux" and make my service use that."
T 1568740687 18<dwts18>	lol that also helps
T 1568740702 18<dwts18>	I'llgive a try.
T 1568740703 18<dwts18>	thanks
T 1568740722 18<greycat18>	Or "instead of configuring my service with an environment variable that comes from outside the run script, I'll put the java arguments IN the run script".
T 1568740744 18<dwts18>	can you guys remember which bash manual section would allow me to see that what I was doing so far is wrong?
T 1568740760 18<greycat18>	https://mywiki.wooledge.org/WordSplitting
T 1568740766 18<dwts18>	greycat: I would actually do that greycat
T 1568740770 18<dwts18>	but I didnt write the script
T 1568740775 18<dwts18>	I'm trying to fix it though :P
T 1568740804 18<dwts18>	the person that wrote the script has a general /etc file with all the jvm options (for different java services) :P
T 1568740827 18<dwts18>	your latest suggestion would be my goto option most likely
T 1568740883 18<philipp6418>	hi. I’ve got a script that’s mysteriously stopping execution midway.  I’m not using -e.  I’ve tried tracing it with -x and there’s nothing obvious. Is there a simple way to set up a handler (signal or err) that would give me more insight as to why it’s dying?  Any examples out there someone could point to or an pastebin?  Thanks
T 1568740890 18<dwts18>	greycat: and twkm thank you very much for your time
T 1568740892 18<dwts18>	cheers
T 1568740954 18<greycat18>	Bash only stops running your script if you call exit, or if you exec something else, or if you have set -e or set -u in effect and trigger it, or if bash dies from a fatal syntax error (can't continue parsing).
T 1568740990 18<greycat18>	Or, I suppose, if you send it a signal externally.
T 1568741004 18<greycat18>	We can't rule that out yet.
T 1568741008 18<twkm18>	what's the last thing that is show in your xtrace?
T 1568741014 18<twkm18>	shown.
T 1568741212 18<philipp6418>	greycat: what about a signal, such as SIGPIPE?
T 1568741270 18<greycat18>	I'm counting that as external.
T 1568741328 18<philipp6418>	It dies as: https://paste.fedoraproject.org/paste/eg3H7CxY~gm-B0JKpGzTSA/
T 1568741470 18<greycat18>	If this is a bash script, rather than an sh script, a single EXIT trap is preferred over trapping individual signals like that.
T 1568741497 18<twkm18>	nothing obvious there.  you'll probably need to [dkls]trace/truss it.
T 1568741508 18<greycat18>	Is there any chance that this is being executed and then terminated, e.g. by a timeout command or other strict resource limit?
T 1568741583 18<philipp6418>	well, it’s on CentOS 6 and it says “#!/bin/sh” but’s a link to bash… though I don’t know if bash detects it’s being invoked as “sh” and behaves differently or not.
T 1568741592 18<twkm18>	it does.
T 1568741607 18<philipp6418>	how so?
T 1568741619 18<llua18>	tries to conform closer to the posix standard
T 1568741646 18<Soliton18>	!sh
T 1568741646 18<greybot18>	sh is NOT bash; it is a POSIX or Bourne shell. To run bash code, your script MUST use a bash shebang, and it MUST be executed directly or with bash (NOT sh myscript). Sometimes /bin/sh symlinks to bash, but you can't rely on this and it will disable many bash features. <http://mywiki.wooledge.org/BashGuide/Practices#Choose_Your_Shell>
T 1568741702 18<llua18>	man bash | col -b | awk '/a description of posix mode/'
T 1568741706 18<llua18>	to be more specific
T 1568741737 18<greycat18>	invoking as sh isn't fully posix mode, though
T 1568741756 18<greycat18>	pretty close, though.
T 1568741837 18<dwts18>	that sh info is interesting
T 1568741859 18<dwts18>	I thought that it didnt matter because of the symlink to bash
T 1568741862 18<dwts18>	TIL I guess
T 1568742118 18<philipp6418>	hmmm… I trap EXIT but that handler isn’t being called… I trap ERR and that doesn’t happen either.
T 1568742137 18<greycat18>	In sh, the EXIT trap is not called when terminated by a signal.
T 1568742151 18<greycat18>	That's why I said "If this is a bash script, rather than an sh script"
T 1568742184 18<philipp6418>	okay, assuming the quasi-posix mode of being invoked as “sh”, how do I get my smoking gun?
T 1568742204 18<greycat18>	How does this script get executed?
T 1568742307 18<philipp6418>	greycat: looking…
T 1568742385 18<twkm18>	[repeat:] nothing obvious there.  you'll probably need to [dkls]trace/truss it.
T 1568742429 18<greycat18>	even doing that will likely require some intervention in the parent, so they still have to track down how it gets executed
T 1568742809 18<kodachi18>	I got a couple of files, their names are like: test.sh.save1 test.sh.save2 and test.sh.save3
T 1568742823 18<kodachi18>	Now how do I use a search pattern with rm to delete them?
T 1568742829 18<kodachi18>	the pattern should look for save
T 1568742837 18<greycat18>	rm test.sh.save*
T 1568742852 18<kodachi18>	Ah
T 1568742863 18<kodachi18>	How do I use the other notations like [] and the other one
T 1568742883 18<greycat18>	!glob
T 1568742883 18<greybot18>	Globs are shell patterns that can be used for matching strings or expanding pathnames: [[ $name = Bob* ]]; rm -- *.txt; see http://mywiki.wooledge.org/glob
T 1568743428 18<bashtux18>	hello all, what is the recommended way to post code here if i wanted guidance? i dont want to breaking any posting rules
T 1568743472 18<earnestly18>	!paste
T 1568743472 18<greybot18>	Paste short snippets (<= 5 lines) in channel. Paste more using https://gist.github.com/ or http://paste.debian.net/ or see !ix or !sprunge. Please don't use pastebin.com -- it's full of ads and mangles whitespace. NEVER upload screen shots. Don't use a paste site that requires Javascript, or registration to view raw.
T 1568743485 18<greycat18>	If it's one line you have a question about, just paste the line here, and ask the question.  If it's longer, you can use a TEXT BASED paste site, but many of us won't bother reading it.
T 1568743535 18<bashtux18>	thanks guys
T 1568743537 18<bashtux18>	https://gist.github.com/natemcmaster/5e36e3953c586e4b407a7bb9316b8772
T 1568743550 18<bashtux18>	im still quite novice at bash
T 1568743552 18<twkm18>	!check
T 1568743552 18<checkbot18>	bashtux: Line 3: < is for string comparisons. Use -lt instead. Line 12: Double quote to prevent globbing and word splitting. Line 31: Double quote to prevent globbing and word splitting. See https://shellcheck.net/?id=cb43552 for all 9 issues.
T 1568743587 18<bashtux18>	so the fuction in that script....
T 1568743600 18<bashtux18>	 [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
T 1568743637 18<bashtux18>	i get most of what its doing, accept the very last or ||
T 1568743641 18<greycat18>	!pf ||
T 1568743641 18<greybot18>	https://mywiki.wooledge.org/BashPitfalls#pf22 -- Don't do this! -- cmd1 && cmd2 || cmd3
T 1568743686 18<greycat18>	It appears to be trying to convert a relative path, given as an argument, to an absolute path, by assuming that its notion of the current working directory can be concatenated with the argument and produce something viable.
T 1568743695 18<greycat18>	It'll probably work most of the time.
T 1568743721 18<greycat18>	I probably can't say anything that will make you stop doing this, especially since apparently you did not WRITE this script, since you don't even understand it.
T 1568743769 18<bashtux18>	no i have no need for it.....im purely looking at examples and seeing what i can comprehend from given scripts....
T 1568743787 18<bashtux18>	so thank you for the explanation and guidance
T 1568743813 18<greycat18>	!crap
T 1568743813 18<greybot18>	The overwhelming majority of bash scripts, code, tutorials, and guides on the Internet are crap. Sturgeon was an optimist.
T 1568743873 18<bashtux18>	is there any good resources you can recommend to start at with bash.....im just doing this for personal gain...no work related or anything
T 1568743879 18<greycat18>	!guide
T 1568743879 18<twkm18>	funnily enough we point to a guide and the manual on the internet.
T 1568743879 18<greybot18>	http://mywiki.wooledge.org/BashGuide or in PDF: http://s.ntnu.no/bashguide.pdf
T 1568743888 18<bashtux18>	i would just love to start better understanding bash
T 1568743924 18<bashtux18>	thank you very much!
T 1568744093 18<bashtux18>	probably a stupid question for you guys :) , i have no real programming knowledge so this is probably why i ask..... i have seen -echo some text blah and then i have seen echo "some text blah"
T 1568744101 18<bashtux18>	when do you and dont you use the "" ?
T 1568744109 18<greycat18>	!quotes
T 1568744110 18<greybot18>	https://mywiki.wooledge.org/Quotes
T 1568744147 18<bashtux18>	thanks ;)
T 1568744195 18<Jonta18>	Best practices for printf-ing source code? I want to try having a script that prints the syntax of common shell-things. Also: Syntax highlighting on that would be nice, but tput setaf everywhere seems a bit cumbersome
T 1568744209 18<greycat18>	!pretty
T 1568744209 18<greybot18>	"Pretty-print" your bash code: pretty() { printf 'pretty() { %s\n }; declare -f pretty' "$(cat)" | bash | sed '1d;2d;$d;s/^ //'; } ## Usage: pretty < myscript
T 1568744210 18<greycat18>	that?
T 1568744232 18<Jonta18>	Testing…
T 1568744397 18<kerframil18>	or use --pretty-print if you have >=5.0
T 1568744452 18<Jonta18>	I do not
T 1568744496 18<greycat18>	kerframil: ... what?
T 1568744515 18<greycat18>	there is no occurrence of "pretty" in my bash(1)
T 1568744555 18<kerframil18>	# printf '%s\n' '#!/bin/bash' 'f() { echo 123; }' > script; bash --pretty-print script
T 1568744559 18<shbot18>	kerframil:
T 1568744559 18<shbot18>	kerframil: f ()
T 1568744559 18<shbot18>	kerframil: etc... ( http://ix.io/1VAz )
T 1568744577 18<greycat18>	Huh.  It's in bash --help but not in the man page.
T 1568744627 18<kodachi18>	Hey, I'm basically writing a script that will delete files that have 0 size. I've written:
T 1568744648 18<greycat18>	find . -type f -size 0 -delete   # assuming GNU find
T 1568744649 18<twkm18>	find ... -size 0 -exec rm {} +
T 1568744663 18<kerframil18>	^ how not to assume GNU find
T 1568744680 18<kodachi18>	filesize=(stat -c%s); files=*; [[ $filesize $files ]] && rm -i || bla bla
T 1568744686 18<kodachi18>	I see
T 1568744701 18<kodachi18>	oh and after $files in the condition I also wrote == 0
T 1568744705 18<kodachi18>	But that still doesn't work
T 1568744714 18<greycat18>	kodachi: there are so many errors in that, I won't even bother trying.
T 1568744719 18<kodachi18>	lmao Ikr
T 1568744733 18<kodachi18>	Its really tuff to work with bash as a beginner
T 1568744737 18<kodachi18>	need lots of practice
T 1568744752 18<greycat18>	!find
T 1568744753 18<greybot18>	http://mywiki.wooledge.org/UsingFind
T 1568744767 18<kerframil18>	don't put code in variables, to begin with
T 1568744796 18<kodachi18>	I saw on that unixstackexchange site that the guy had put that stat code in a variable
T 1568744807 18<greycat18>	!crap
T 1568744807 18<greybot18>	The overwhelming majority of bash scripts, code, tutorials, and guides on the Internet are crap. Sturgeon was an optimist.
T 1568744808 18<also_uplime18>	i think they were expecting filesize=($(stat -c%s))
T 1568744816 18<kerframil18>	I'm almost impressed. no offense, but that does pack a lot wrongness into so little code.
T 1568744817 18<also_uplime18>	(not that its any better)
T 1568744818 18<greycat18>	I think they're just stupid.
T 1568744820 18<kerframil18>	lot of*
T 1568744839 18<also_uplime18>	could be ¯\_(ツ)_/¯
T 1568744842 18<kodachi18>	Damn, even stack sites can't be trusted for good answers?
T 1568744846 18<kodachi18>	relating to bash.
T 1568744846 18<greycat18>	!so
T 1568744846 18<greybot18>	Like virtually every other web site you find via Google, StackOverflow is chock full of wrong answers. Verify everything you read there before using it.
T 1568744865 18<kodachi18>	Have every answer in the bot lmao
T 1568744875 18<kodachi18>	Alright tho, I'm surprised tbh
T 1568744886 18<kodachi18>	I'll come here for answers then
T 1568744918 18<Jonta18>	kodachi: But what if #bash is also chock full of wrong answers?
T 1568744932 18<greycat18>	then you need to /ignore knstn and others
T 1568744934 18<kodachi18>	Jonta Can't be
T 1568744974 18<kodachi18>	greycat and lhunath take bash seriously, so.. they can't really be like the rest
T 1568745026 18<greycat18>	There's a solid group of people here who give reliably good answers.  After a while you'll figure out who those people are.
T 1568745043 18<vlm18>	i found many good answers for things on internet from a person named Geirha or so dunno if its same person here though
T 1568745054 18<greycat18>	geirha is definitely one of them
T 1568745055 18<kerframil18>	it almost certainly is.
T 1568745107 18<vlm18>	i wanted to thank him but not sure if its same person,if so many thanks,have helped me much
T 1568745173 18<Soliton18>	he's on SO at least with the same username.
T 1568745337 18<kerframil18>	kodachi: incidentally, while you definitely should use find, here's a not-so-broken pure bash implementation, assuming that globstar is enabled: for f in **/*; do [[ -f $f ]] && [[ ! -s $f ]] && rm -- "$f"; done
T 1568745429 18<kodachi18>	kerframil I see, thanks.
T 1568746013 18<Jonta18>	Got !pretty working. No such easy trick on the syntax highlighting then? I suppose the script could just be "vim -R my_syntax_file"
T 1568746048 18<Riviera18>	Jonta: note there's also --pretty-print
T 1568746073 18<greycat18>	apparently new in 5.0 and not in the man page, only visible in --help
T 1568746078 18<Riviera18>	yup
T 1568746147 18<Jonta18>	(And I'm running 3.2)
T 1568746182 18<Riviera18>	my sympathies
T 1568746230 18<Jonta18>	Soon, there will be an upgrade. Just has to bubble up to the top of my list first. I prefer POSIX when feasable anyway
T 1568746288 18<Riviera18>	ah, but i'd repeat myself
T 1568746316 18<Jonta18>	Sympathies <3
T 1568747780 18<kodachi18>	There's some file called core in my home directory, I am going to delete it. Was wondering if it's a system file and I shouldn't delete it
T 1568747804 18<kodachi18>	Binary file
T 1568747811 18<greycat18>	A file named 'core' is a memory dump from a process that terminated in a specific way (SIGQUIT or similar).
T 1568747823 18<greycat18>	If you don't intend to debug the program using the core file, just remove it.
T 1568747833 18<kodachi18>	K thanks!
T 1568747866 18<greycat18>	core(5) on Debian
T 1568748010 18<knstn18>	omg, i haven't give an answer to anyone here for weeks.
T 1568748897 18<lavalike18>	when one starts a completion with   "some words   and successfully completes with TAB it becomes   some\ words\ ...   is it possible to configure bash to leave it in quoted form?
T 1568749035 18<Jonta18>	lavalike: You type         "so       hit tab, and then it completes to     some     ? Here it completes to      "some"
T 1568749064 18<lavalike18>	Jonta: the completed path must contain spaces to show this
T 1568749127 18<nil18>	doesn't for me, on bash 5.0.9
T 1568749156 18<greycat18>	Sounds like bash-completion strikes again...
T 1568749168 18<greycat18>	wooledg:~$ cat "with
T 1568749168 18<greycat18>	withcess146-s.png  with spaces
T 1568749168 18<greycat18>	wooledg:~$ cat "with spaces"
T 1568749347 18<lavalike18>	https://imgur.com/rLpcuOk
T 1568749381 18<also_uplime18>	what if you try it with `bash --norc --noprofile`
T 1568749417 18<lavalike18>	nothing changes
T 1568749485 18<lavalike18>	if I   touch "a b c d"   that one completes with quotes if started with a quote, curious
T 1568753031 20*	Disconnected (20)
T 1568753056 19*	Now talking on 22#bash
T 1568753056 22*	Topic for 22#bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
T 1568753056 22*	Topic for 22#bash set by 26izabera (24Wed May 15 19:55:21 2019)
T 1568753056 -18ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
T 1568753066 18<ave_milia18>	I have issues making crafting https://pastebin.com/PpCxXjen , in particular line 15, where I want to run the command as if I would run it verbatim. if I write there $(./blah args <<< input) it works. but with variables my program treats "<<< input" as trailing nonpositional arguments (basically something is wrong). how to make it work with variables too?
T 1568753067 18<pasteban18>	Paste is available without ads on http://pastebin.com/raw/PpCxXjen
T 1568753091 18<greycat18>	!check
T 1568753091 18<checkbot18>	ave_milia: Line 15: Double quote to prevent globbing and word splitting. See https://shellcheck.net/?id=cb53091 for all 3 issues.
T 1568753131 18<ave_milia18>	(I checked with that advice applied as well)
T 1568753140 18<greycat18>	are you attempting to do something like  args=(foo bar '<<<' 'input'); mycmd "${args[@]}" ?  If so, that won't work.
T 1568753172 18<ave_milia18>	<<< /must/ be specified verbatim?
T 1568753176 18<ave_milia18>	or what is the problem?
T 1568753198 18<greycat18>	another person whose questions can only be determined by reading their pastebins...
T 1568753202 18<ave_milia18>	iirc @ expands array args
T 1568753222 18<ave_milia18>	-args
T 1568753238 18<also_uplime18>	bash won't process <<< after it has been expands the array. it will just be passed to the cmd literally
T 1568753272 18<also_uplime18>	# foo=(cat '<<<' 'hi there'); "${foo[@]}"
T 1568753274 18<shbot18>	also_uplime: cat: '<<<': No such file or directory
T 1568753274 18<shbot18>	also_uplime: cat: 'hi there': No such file or directory
T 1568753277 18<also_uplime18>	oops
T 1568753283 18<also_uplime18>	# foo=(echo '<<<' 'hi there'); "${foo[@]}"
T 1568753284 18<shbot18>	also_uplime: <<< hi there
T 1568753327 18<ave_milia18>	I see. any way to make it treat <<< verbatim?
T 1568753340 18<greycat18>	It *is* treating it verbatim, as a string.
T 1568753367 18<ave_milia18>	ok, "treat it as special bash thing", or something
T 1568753373 18<greycat18>	If you want to put bash syntax in variables and then have it act as bash syntax in a future evaluation, that's what eval is for.  But you should SERIOUSLY RETHINK YOUR DESIGN.
T 1568753437 18<ave_milia18>	thanks, forgot about it
T 1568753534 18<also_uplime18>	could put a wrapper around it. redir() { local out=$1; shift; cmd "$@" <<< "$out"; }
T 1568753570 18<greycat18>	I don't know what the design goals are, or why he's trying to pass redirection operators jumbled together with arguments.
T 1568753576 18<ave_milia18>	having <<< in args is stupid, I know, but I want to write one function for all kinds of programs to be tested
T 1568753663 18<ave_milia18>	(some of them will not accept stdin, so I'll have to remember to call another function, and so on)
