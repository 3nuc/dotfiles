**** BEGIN LOGGING AT Sat Aug 31 11:21:48 2019

Aug 31 11:21:48 *	Now talking on #neovim
Aug 31 11:21:48 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Aug 31 11:21:48 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Aug 31 11:56:00 <EddBarrettGitter>	@justinmk hi
Aug 31 12:05:49 <JustinMKeyesGitt>	hi
Aug 31 12:10:45 <MarcoHinzGitter[>	hi
Aug 31 12:24:04 <MarcoHinzGitter[>	@h-michael In practice, I had no problems with simply using `'file://'.expand('%')` or `'file://'.getcwd()` for `rootUri` so far. Probably needs to be more elaborate if you plan to publish it, though.
Aug 31 12:30:43 <EddBarrettGitter>	@justinmk just a friendly reminder that I need help with that CI PR
Aug 31 12:31:03 <EddBarrettGitter>	sorry to prod, I know it's a pain
Aug 31 12:33:36 <JustinMKeyesGitt>	thanks will try today. traveling ..
Aug 31 13:13:41 <EddBarrettGitter>	thanks
Aug 31 14:45:49 <HirokazuHataGitt>	@mhinz It works in many cases, but it doesn't work on Windows and the LSP specification requires percent encoding.
Aug 31 14:48:21 <HirokazuHataGitt>	I pushed part of the URI module implementation.
Aug 31 14:48:22 <HirokazuHataGitt>	https://github.com/neovim/neovim/pull/10222/commits/937540b5f3d28c349c2d3c003a14a6f047846e03
Aug 31 15:22:14 <MarcoHinzGitter[>	@h-michael Yeah, that's why I meant with the intent to publish. My private LSP plugin does the above only and I never had a single issue with that approach with lots of different servers. :) An official Nvim implementation should be more resilient. :]
Sep 02 08:51:42 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep  2 08:51:42 2019

**** BEGIN LOGGING AT Mon Sep  2 08:52:09 2019

Sep 02 08:52:09 *	Now talking on #neovim
Sep 02 08:52:09 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 02 08:52:09 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 02 09:05:49 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep  2 09:05:49 2019

**** BEGIN LOGGING AT Mon Sep  2 09:06:12 2019

Sep 02 09:06:12 *	Now talking on #neovim
Sep 02 09:06:12 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 02 09:06:12 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 02 09:17:04 <_rgn>	is there a way to debug why typing in gitcommit filetype is super unresponsive?
Sep 02 09:17:06 <_rgn>	thanks
Sep 02 09:18:20 <_rgn>	:set syntax= fixes it, so it must be slow syntax highlighting or?
Sep 02 09:37:54 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep  2 09:37:54 2019

**** BEGIN LOGGING AT Mon Sep  2 09:38:17 2019

Sep 02 09:38:17 *	Now talking on #neovim
Sep 02 09:38:17 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 02 09:38:17 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 02 09:44:44 <_rgn>	fixed
Sep 02 11:22:50 <sunjon>	blueyed: For the record (I forgot to mention when I fixed it). My issues with installing --HEAD via brew were resolved by uninstalling binutils. Seems it was some path error relating to `ar`
Sep 02 11:23:15 <sunjon>	I found the solution in someone else's issue: https://github.com/neovim/neovim/issues/9488
Sep 02 11:23:42 <sunjon>	that was from January. Not sure why it took until the end of July to rear it's head for me, as I'd been building HEAD quite regularly
Sep 02 11:25:28 <EddBarrettGitter>	@justinmk thanks for working on the CI
Sep 02 11:25:36 <EddBarrettGitter>	i can have a look at that gdb thing
Sep 02 11:25:42 <EddBarrettGitter>	(at some point)
Sep 02 11:26:01 <EddBarrettGitter>	although we could just manually ssh as you say
Sep 02 12:03:58 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep  2 12:03:58 2019

**** BEGIN LOGGING AT Mon Sep  2 12:04:25 2019

Sep 02 12:04:25 *	Now talking on #neovim
Sep 02 12:04:25 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 02 12:04:25 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 02 13:56:00 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep  2 13:56:00 2019

**** BEGIN LOGGING AT Mon Sep  2 13:56:26 2019

Sep 02 13:56:26 *	Now talking on #neovim
Sep 02 13:56:26 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 02 13:56:26 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 02 15:56:24 <hendry>	when coders want to pair program with neovim, how is that best done? via tmux in a shared login ssh login?
Sep 02 16:19:06 <JustinMKeyesGitt>	hendry: yes, or you could try floobits. https://floobits.com/help/plugins/nvim
Sep 02 16:19:21 <d42>	i find the floobits thing kind of cool, but i'd like it more with less floobits :^)
Sep 02 16:28:07 <JustinMKeyesGitt>	tmux seems fine to me, i don't really understand why people need anything else
Sep 02 16:30:13 *	JustinMKeyesGitt sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/TIrQjhLHRYNrjmylaqXdZPpC >
Sep 02 16:32:50 <JustinMKeyesGitt>	I think better "collaboration" tool would be an editor plugin that streams git commits to/from some shared branch, and then makes peer edits visible by highlights, notifications, etc.
Sep 02 16:32:57 <JustinMKeyesGitt>	^ brb getting VC funding
Sep 02 16:42:10 <MarcoHinzGitter[>	:>
Sep 03 10:14:12 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep  3 10:14:12 2019

**** BEGIN LOGGING AT Tue Sep  3 10:14:37 2019

Sep 03 10:14:37 *	Now talking on #neovim
Sep 03 10:14:37 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 03 10:14:37 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 03 11:08:15 <MarcoHinzGitter[>	astronavt: https://github.com/mhinz/vim-galore#profiling-startup-time and below is usually good enough for all profiling purposes. Unless you want pretty output as well.
Sep 03 14:10:12 *	zgpioGitter[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/poUnEZhVpQcLPeAJjnDkGeEn >
Sep 03 14:10:18 <JustinMKeyesGitt>	> I know I should not be possible to use global funciton in function.
Sep 03 14:10:19 <JustinMKeyesGitt>	> But if I make those global function results arguments, users who use that module would have painful.
Sep 03 14:10:19 <JustinMKeyesGitt>	@h-michael I don't understand that, nor why you want to stub anything
Sep 03 14:10:29 <zgpioGitter[m]>	(edited) ... name[=value] ... => ... name[=value] …
Sep 03 14:10:30 <zgpioGitter[m]>	```
Sep 03 14:11:11 <JustinMKeyesGitt>	@zgpio what `bash` version?
Sep 03 14:11:43 <zgpioGitter[m]>	```
Sep 03 14:11:44 <zgpioGitter[m]>	GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin18)
Sep 03 14:11:45 <zgpioGitter[m]>	```
Sep 03 14:12:15 <MarcoHinzGitter[>	Needs at least 4.0, since it relies on associative arrays.
Sep 03 14:13:24 <JustinMKeyesGitt>	ah, very old. Typically macOS users install latest bash via homebrew. Although , I like it when we avoid bash features in our scripts, and also we should try to use lua for non-trivial scripts... but the speedup for using associative arrays in vim-patch.sh is huge, so it's worth getting latest `bash` until someone decides to rewrite it in lua :)
Sep 03 14:13:32 <zgpioGitter[m]>	👌
Sep 03 19:20:42 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep  3 19:20:42 2019

**** BEGIN LOGGING AT Tue Sep  3 19:21:06 2019

Sep 03 19:21:06 *	Now talking on #neovim
Sep 03 19:21:06 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 03 19:21:06 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 03 20:25:45 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep  3 20:25:45 2019

**** BEGIN LOGGING AT Tue Sep  3 20:26:12 2019

Sep 03 20:26:12 *	Now talking on #neovim
Sep 03 20:26:12 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 03 20:26:12 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 03 20:37:56 <segeljaktGitter[>	is it a bad idea to nest dictionaries?
Sep 03 20:38:21 <JustinMKeyesGitt>	not generally
Sep 03 20:39:35 *	segeljaktGitter[ sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/CCxGWIUYeQEmIwKXNkuYOpdu >
Sep 03 20:39:59 <segeljaktGitter[>	to be a dictionary of dictionaries
Sep 03 20:41:53 *	segeljaktGitter[ sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/pHGuWkQDqkzqNgmJgoiCzBNZ >
Sep 03 20:43:09 *	segeljaktGitter[ sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/RYsRhgqMilmSPoMXKCvhkoZN >
Sep 03 20:43:37 <segeljaktGitter[>	will it kill performance?
Sep 03 20:44:46 <JustinMKeyesGitt>	no
Sep 03 20:45:27 <segeljaktGitter[>	:thumbsup:
Sep 03 21:18:44 <segeljaktGitter[>	is there any function for converting between hexadecimal number to a decimal?
Sep 03 21:18:45 <segeljaktGitter[>	(edited) ... hexadecimal numberto ... => ... hexadecimal to ...
Sep 03 21:18:46 <segeljaktGitter[>	(edited) ... to adecimal? => ... to decimal?
Sep 03 21:18:58 <segeljaktGitter[>	I can't seem to find
Sep 03 21:19:09 <JustinMKeyesGitt>	printf()
Sep 03 21:22:43 <segeljaktGitter[>	thx
Sep 03 21:51:27 <JamesMcCoyGitter>	or `str2nr()` (if I'm understanding the question correctly)
Sep 03 22:02:43 <vito-cGitter[m]>	what's best way to clear a terminal buffer?
Sep 03 22:03:07 <JustinMKeyesGitt>	`reset`, or `:set scrollback=1`
Sep 03 22:03:46 <JustinMKeyesGitt>	(edited) ... `:set scrollback=1` => ... `:set scrollback=1<cr>:set scrollback=9999<cr>`
Sep 03 22:06:26 <vito-cGitter[m]>	reset isn't an editor command. Is that a newish feature? and changing the scrollback will chop off everything outside the scrollback "window" but not everything in the current window
Sep 03 22:06:59 <JustinMKeyesGitt>	reset is a shell command. you didn't specify a context :)
Sep 03 22:07:22 <vito-cGitter[m]>	ah fair enough :) I mean in normal mode then
Sep 03 22:07:55 <JustinMKeyesGitt>	clearing the current screen is up to the child process. e.g. in a shell, you can use `clear` command or CTRL-L
Sep 03 22:09:40 <JustinMKeyesGitt>	the child controls the screen, not the terminal (Nvim), so it does not really make sense for the terminal to "clear the screen". Of course, we could provide such a function, but what's the use case ...
Sep 03 22:11:45 <vito-cGitter[m]>	on iterm I'm able to use clear screen (cmd+k) and it will clear the terminal. There isn't really an option to do this while inside nvim term because it will give me funky results
Sep 03 22:17:46 <vito-cGitter[m]>	I'm using `SBT` which doesn't really supply a way for you to clear the screen while a process is running. I imagine there would be similar issues with other interactive interpreters.
Sep 03 22:20:03 <JustinMKeyesGitt>	but still , what's the use case?
Sep 03 22:20:12 <JustinMKeyesGitt>	why.... does the screen need to be cleared?
Sep 03 22:21:27 <vito-cGitter[m]>	it's basically logging to output and I'd like to clear the screen :)
Sep 03 22:21:43 <JustinMKeyesGitt>	You can hack it like this: `:set ma|for i in range(1,line('$'))|call setline(i,[''])|endfor`
Sep 03 22:21:46 <BjrnLinseGitter[>	As a hack, you could echo the screen clear sequence to `nvim_get_chan_info(&channel).pty`
Sep 03 22:22:14 <JustinMKeyesGitt>	that's better :}
Sep 03 22:23:01 <vito-cGitter[m]>	@bfredl would that be from a command? like `:echo nvim_get_chan_info(&channel).pty`
Sep 03 22:23:34 <BjrnLinseGitter[>	yes, from a mapping likely
Sep 03 22:24:13 <JustinMKeyesGitt>	actually would `call chansend(&channel,...)` work?
Sep 03 22:24:16 <vito-cGitter[m]>	`{'id': 5, 'mode': 'terminal', 'stream': 'job', 'pty': '/dev/ttys002', 'buffer': 51}`
Sep 03 22:24:42 <vito-cGitter[m]>	the pty is `'/dev/ttys002'`
Sep 03 22:25:12 <BjrnLinseGitter[>	@justinmk unlikely
Sep 03 22:25:23 <BjrnLinseGitter[>	you want to send it to tty master, not the child
Sep 03 22:26:25 <JustinMKeyesGitt>	this works: `:exe '!printf "\e[2J" >' nvim_get_chan_info(&channel).pty`
Sep 03 22:27:21 <vito-cGitter[m]>	ooh and then clamp and unclamp scrollback?
Sep 03 22:27:35 <BjrnLinseGitter[>	hmm it doesn't reset the cursor for me. But that's just another sequence :]
Sep 03 22:28:33 <vito-cGitter[m]>	what's sequence to reset the cursor?
Sep 03 22:30:36 <JustinMKeyesGitt>	https://invisible-island.net/xterm/ctlseqs/ctlseqs.html
Sep 03 22:30:40 <BjrnLinseGitter[>	\e[H I think
Sep 03 22:33:04 <vito-cGitter[m]>	yup yup
Sep 04 07:55:02 *	Disconnected ()
**** ENDING LOGGING AT Wed Sep  4 07:55:02 2019

**** BEGIN LOGGING AT Wed Sep  4 07:55:27 2019

Sep 04 07:55:27 *	Now talking on #neovim
Sep 04 07:55:27 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 04 07:55:27 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 04 10:15:33 *	Disconnected ()
**** ENDING LOGGING AT Wed Sep  4 10:15:33 2019

**** BEGIN LOGGING AT Wed Sep  4 10:15:56 2019

Sep 04 10:15:56 *	Now talking on #neovim
Sep 04 10:15:56 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 04 10:15:56 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 04 12:07:34 <mcepl>	anybody any thoughts on https://github.com/neovim/neovim/pull/10938 ?
Sep 04 13:25:28 <sQVe>	Having problems with writing a List with multiple lines. What's the problem with this snippet? https://gist.github.com/sQVe/047fe54319ae873cf8756e073f277ac9
Sep 04 14:03:20 <JamesMcCoyGitter>	sQVe: your ale_linters dict is using [] when it should be using {}
Sep 04 14:22:27 <sQVe>	JamesMcCoyGitter: :thumbsup:
Sep 04 14:36:14 <MarcoHinzGitter[>	@h-michael Good work on the LSP client. ありがとう！
Sep 04 15:11:34 <HirokazuHataGitt>	I would like to express my gratitude.  I love the neovim community and I am very happy to be involved with it.
Sep 04 15:13:41 <mcepl>	HirokazuHataGitt: thank you, truly! I was the one asking about the progress, now using vim-lsp, but (patiently!) looking forward to be able to use built-in LSP client.
Sep 04 15:22:20 <muffindrake>	Hiya.
Sep 04 16:56:05 *	Disconnected ()
**** ENDING LOGGING AT Wed Sep  4 16:56:05 2019

**** BEGIN LOGGING AT Wed Sep  4 16:56:30 2019

Sep 04 16:56:30 *	Now talking on #neovim
Sep 04 16:56:30 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 04 16:56:30 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 05 09:58:43 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep  5 09:58:43 2019

**** BEGIN LOGGING AT Thu Sep  5 09:59:06 2019

Sep 05 09:59:06 *	Now talking on #neovim
Sep 05 09:59:06 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 05 09:59:06 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 05 12:31:25 <BjrnLinseGitter[>	"E576: Error while reading ShaDa file: there is an item at position 25565 that must not be there: Missing items are for internal uses only" is this a known recent issue?
Sep 05 12:31:46 <BjrnLinseGitter[>	or maybe it is just random data corruption from nvim crashing
Sep 05 12:32:38 <BjrnLinseGitter[>	though shada update is atomic, and shouldn't be affected by a crash? (unless the fs/disk itself was a causality of the crash I guess)
Sep 05 12:44:24 <glacambre[m]>	Is there a way to have lua code log things to $NVIM_LOG_FILE or to the file specified with `-V`?
Sep 05 12:50:11 <HirokazuHataGitt>	AFAIK, there is no way except for writing logger your own.
Sep 05 12:50:11 <HirokazuHataGitt>	related PR https://github.com/neovim/neovim/pull/7062
Sep 05 13:01:01 <glacambre[m]>	Thank you :)
Sep 05 13:07:34 <filt3r>	hi, i have the same issue as described here: https://github.com/neovim/neovim/issues/4148 , the last comment mentions that this is covered by other clipboard issues, however, i was unable to find any issues on github (open or closed) which described the same symptoms with the clipboard.
Sep 05 13:08:23 <filt3r>	anybody aware of a ticked where this issue is covered, or maybe someone knows a workaround when using `clipboard=unnamedplus`?
Sep 05 14:53:48 <MarcoHinzGitter[>	filt3r: I imagine it's because when you keep `x` pressed while `clipboard=unnamed[plus]` is set, you basically shell out to `pbcopy` for _every_ single character deleted.
Sep 05 14:55:18 <MarcoHinzGitter[>	There's probably you can do about it except not spamming `x`, but using `d` with a motion or using visual mode first.
Sep 05 14:55:26 <MarcoHinzGitter[>	+nothing
Sep 05 14:57:16 <BjrnLinseGitter[>	maybe `noremap x "_x`
Sep 05 15:02:15 <MarcoHinzGitter[>	@bfredl Good idea as a workaround. Would it be feasible to only shell out to the clipboard provider after 500ms (or probably shorter)? And each new request would reset an already running timer?
Sep 05 15:03:24 <BjrnLinseGitter[>	dunno. In `nvim-miniyank` I just ignore yanks that is zero or one byte large :)
Sep 05 15:03:37 <MarcoHinzGitter[>	:-P
Sep 05 15:13:25 <filt3r>	MarcoHinzGitter[: I see, in hindsight it makes sense (looks like nvim is calling xclip on my system), i'll try to come up with a suitable workaround for my workflow based on your suggestions :)
Sep 05 15:26:08 <MarcoHinzGitter[>	Well, the mapping bfredl mentioned should be a good workaround for now. Usually you only want to yank to clipboard with `y`, but `clipboard=unnamed[plus]` does it for every delete action as well, so `d` or even `x`. The `nnoremap x "_x` makes `x` copy the deleted character the so-called blackhole register instead of the clipboard register. And using `u` still works afterwards, so I don't see any obvious disadvantage
Sep 05 15:26:08 <MarcoHinzGitter[>	to that approach.
Sep 05 16:12:18 <JustinMKeyesGitt>	> ignore yanks that is zero or one byte large
Sep 05 16:12:23 <JustinMKeyesGitt>	Let's do that
Sep 05 16:48:33 <JustinMKeyesGitt>	@bfredl re your shada error: if it's still happening, can you see if reverting https://github.com/neovim/neovim/pull/10898 fixes it
Sep 05 16:50:41 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep  5 16:50:41 2019

**** BEGIN LOGGING AT Thu Sep  5 16:54:00 2019

Sep 05 16:54:00 *	Now talking on #neovim
Sep 05 16:54:00 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 05 16:54:00 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 05 17:07:49 <MarcoHinzGitter[>	> Let's do that
Sep 05 17:07:50 <MarcoHinzGitter[>	But hopefully for characters, not bytes. :)
Sep 05 17:07:59 <MarcoHinzGitter[>	(edited) ... that
Sep 05 17:07:59 <MarcoHinzGitter[>	But ... => ... that
Sep 05 17:08:00 <MarcoHinzGitter[>	But ...
Sep 05 17:08:34 <JustinMKeyesGitt>	I think bytes was intentional, as bfredl's choices usually are :) E.g. , someone might want to paste a multibyte char that can't be typed
Sep 05 17:09:20 <JustinMKeyesGitt>	Although why anyone would do this with `x` is a mystery
Sep 05 17:10:32 <MarcoHinzGitter[>	Ok, but then it's built-in workaround that only affects some users?
Sep 05 17:10:43 <JustinMKeyesGitt>	I can imagine someone using ctrl-k to insert a digraph, then `x` it into the clipboard, then paste it into their PhD thesis
Sep 05 17:11:15 <MarcoHinzGitter[>	In that case I'd prefer the timer approach. :P
Sep 05 17:12:30 <JustinMKeyesGitt>	yeah the timer approach could help with clipboard performance in general. The only place where it falls down is for scripts, but that choice was already made when n/vim disabled clipboard during `:global`
Sep 05 17:14:09 *	MarcoHinzGitter[ nods
Sep 05 17:14:26 <JustinMKeyesGitt>	+1 for debouncing clipboard with timers. It would need to synchronously update the clipboard just before `"+p`, and on FocusLost
Sep 05 17:16:37 <JustinMKeyesGitt>	and also on CursorMoved ++once
Sep 05 17:32:31 <MarcoHinzGitter[>	:+1:
Sep 05 19:14:39 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep  5 19:14:39 2019

**** BEGIN LOGGING AT Thu Sep  5 19:15:06 2019

Sep 05 19:15:06 *	Now talking on #neovim
Sep 05 19:15:06 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 05 19:15:06 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 05 19:15:29 <AbdelhakeemOsama>	> I guess you mean it's difficult.
Sep 05 19:15:30 <AbdelhakeemOsama>	Yeah, I would have to use a bunch of C for that with possible duplication. I considered manually making up `ufunc_T` at first but didn't go far.
Sep 05 19:15:31 <AbdelhakeemOsama>	So I'll go with the approach you said for now.
Sep 05 19:24:46 <AbdelhakeemOsama>	I mainly asked because I'm thinking of introducing support for numbered functions and I was planning to do something similar with them (i.e.: `<SNR>_1_`)
Sep 05 21:45:17 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep  5 21:45:17 2019

**** BEGIN LOGGING AT Thu Sep  5 21:45:44 2019

Sep 05 21:45:44 *	Now talking on #neovim
Sep 05 21:45:44 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 05 21:45:44 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 06 08:11:44 *	Disconnected ()
**** ENDING LOGGING AT Fri Sep  6 08:11:44 2019

**** BEGIN LOGGING AT Fri Sep  6 08:12:10 2019

Sep 06 08:12:10 *	Now talking on #neovim
Sep 06 08:12:10 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 06 08:12:10 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 06 08:42:42 <sQVe>	Is it possible to make autocomplete for commands not case sensitive? Say I want to run :PlugInstall and I write :Plugi. I'd like it to suggest PlugInstall
Sep 06 09:55:30 <sQVe>	Solved it with a augroup that toggled on CmdLineEnter / CmdLineLeave :thumbs-up:
Sep 06 13:45:16 <blueyed>	sQVe: how did you solve it?
Sep 06 13:45:58 <sQVe>	blueyed: https://github.com/sQVe/dotfiles/commit/7d751795c6ec9b69b834277c3c05e430eae54d9b
Sep 06 13:46:53 <blueyed>	sQVe: so ignorecase affects completion of commands?  Interesting!
Sep 06 13:47:24 <sQVe>	blueyed: Yes. Above solution made such a big difference for me.
Sep 06 13:47:39 <sQVe>	Now I have just write :update and it will autocomplete to :Update on tab.
Sep 06 13:47:43 <sQVe>	:thumbsup:
Sep 06 13:51:49 <blueyed>	hmm, I've thought this would be nice to have a while ago, but am using ignorecase already.. :shrug:
Sep 06 13:53:13 <ameliadolly>	Join and see the video naked I am here for free http://kortlink.no/gYs
Sep 06 13:56:14 <AbdelhakeemOsama>	WTF
Sep 06 14:09:13 <sQVe>	blueyed: Maybe you have smartcase enabled?
Sep 06 14:09:33 <sQVe>	I dont but if I would I would like to have that disabled for command line too.
Sep 06 14:10:04 <blueyed>	sQVe: it completes :update to => :Update… for me - I've rather meant that I might have been missing something back then (or it is a newer patch being merged by now)
Sep 06 14:10:48 <sQVe>	Mkay.
Sep 06 14:26:07 *	AbdelhakeemOsama sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/LxOwNRuNGSvdnRbDWEiQmiDf >
Sep 06 14:31:50 <AbdelhakeemOsama>	It runs in `macOS: clang` on Travis too
Sep 06 14:35:34 <BjrnLinseGitter[>	looks like it is not is implemented, i e `is_os('unix')` is always true . OS X is a unix though :)
Sep 06 14:38:05 *	AbdelhakeemOsama sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/DedozoTAKgYmHayiIVUPrhtc >
Sep 06 14:40:24 <BjrnLinseGitter[>	"differentiates" doesn't imply that they are mutually exclusive. One is a a subset of the other. Test that are expected to work "on unix" should also work when running under OS X.
Sep 06 14:41:06 <AbdelhakeemOsama>	Aha
Sep 06 14:42:27 <AbdelhakeemOsama>	Anyway I'll change that to `helpers.is_os('win') or helpers.is_os('mac')`
Sep 06 14:43:02 <BjrnLinseGitter[>	For our current test matrix `is_os('unix') == not is_os('win')` is a possible approximation. Though there have been cases of people building nvim on OS:s that are neither :)
Sep 06 16:42:16 *	Disconnected ()
**** ENDING LOGGING AT Fri Sep  6 16:42:16 2019

**** BEGIN LOGGING AT Fri Sep  6 16:42:40 2019

Sep 06 16:42:40 *	Now talking on #neovim
Sep 06 16:42:40 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 06 16:42:40 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 06 16:47:46 <glacambre[m]>	Does anybody know what I could do in order to understand why neovim is hanging when I run it on appveyor? It seems to stop in a particularily weird place: https://ci.appveyor.com/project/glacambre/firenvim/builds/27233746
Sep 07 11:05:28 *	Disconnected ()
**** ENDING LOGGING AT Sat Sep  7 11:05:28 2019

**** BEGIN LOGGING AT Sat Sep  7 11:05:50 2019

Sep 07 11:05:50 *	Now talking on #neovim
Sep 07 11:05:50 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 07 11:05:50 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 07 12:51:54 <BjrnLinseGitter[>	https://gist.github.com/bfredl/877084bb2b3dd026d918dda3be17d39f
Sep 07 12:52:07 <BjrnLinseGitter[>	is this a known shada failure?
Sep 07 14:03:08 <AbdelhakeemOsama>	@bfredl Never ran into it but I can see it's related to packing last used search pattern? Maybe related to https://github.com/neovim/neovim/issues/10945 ?
Sep 07 14:06:40 <AbdelhakeemOsama>	It's introduced by https://github.com/neovim/neovim/pull/10898 :|
Sep 07 14:45:03 <unixcat>	what is the vim convention of putting formatting information at the end of the file? Is there a way to insert it automatically?
Sep 07 14:45:52 <MatthieuCoudronG>	unixcat it can be at the beginning too
Sep 07 14:45:58 <unixcat>	Ah
Sep 07 14:46:00 <MatthieuCoudronG>	there is a vim-modeline plugin
Sep 07 14:46:16 <unixcat>	Cool, I'll find it. Thank you
Sep 07 14:50:53 <MatthieuCoudronG>	i don't think it adds it by default, but it provides a mapping to add one
Sep 07 17:11:12 *	Disconnected ()
**** ENDING LOGGING AT Sat Sep  7 17:11:12 2019

**** BEGIN LOGGING AT Sat Sep  7 17:11:34 2019

Sep 07 17:11:34 *	Now talking on #neovim
Sep 07 17:11:34 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 07 17:11:34 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 07 17:25:28 <AbdelhakeemOsama>	Nevermind it's not needed actually
Sep 09 09:21:29 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep  9 09:21:29 2019

**** BEGIN LOGGING AT Mon Sep  9 09:21:51 2019

Sep 09 09:21:51 *	Now talking on #neovim
Sep 09 09:21:51 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 09 09:21:51 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 09 10:14:27 <flip214>	mstruebing: set conceallevel=0 might help as well
Sep 09 14:10:26 <segeljaktGitter[>	If I call a function `foo#bar#baz()` it will source `autoload/foo/bar.vim`, but will it also source `autoload/foo.vim`?
Sep 09 14:35:05 <ShougoGitter[m]>	doesn't
Sep 09 14:42:30 <JamesMcCoyGitter>	Which can easily be confirmed by putting something like `let g:noodle = 1` in `autoload/foo.vim` and check if it's set after calling `foo#bar#baz()`
Sep 09 15:54:16 <fraktor>	I am using Neovim and am trying to install a German spellfile. When I run it, I get an error that says "E12: Command not allowed from exrc/vimrc in current dir or tag search: au WinEnter *^Iif &ft == "netrw"|call s:NetrwInsureWinVars()|endif".
Sep 09 16:00:05 <fraktor>	Well, nevermind... I was able to figure it out.
Sep 09 17:01:14 <chasoteGitter[m]>	any of you folks use ALE and coc.nvim? There are a couple clojure linters I want to try that only currently work with ALE. Can I have ALE solely used for that without it butting heads with coc.nvim? My dream situation is to have ALE/linters off by default and then have a keyboard shortcut to turn it on to run the linter and then turn it back off when I'm done with it.
Sep 09 17:02:47 <chasoteGitter[m]>	(edited) ... it.  ... => ... it. That way I get all my coc.nvim functionality the whole time whether I'm using the linters or not. ...
Sep 09 17:29:12 <LeoNerd>	Folks: OSC 52. Thoughts?
Sep 09 17:29:23 <LeoNerd>	I.e. "interact with terminal clipboard directly using escape sequences"
Sep 09 17:29:47 <LeoNerd>	Good thing, bad thing? I'm fed up of folks having to fiddle with X11 forwarding and Xlib and other such crap, just to get clipboard working; doubly so over ssh and other such fun
Sep 09 17:30:00 <LeoNerd>	OSC 52 would avoid all of that mess
Sep 09 17:45:34 <BjrnLinseGitter[>	LeoNerd: Neovim is certainly open to support it. But someone has to step up and do the work :)
Sep 09 17:45:57 <LeoNerd>	Yeah.. hrm
Sep 09 17:46:24 <LeoNerd>	That's always the fun part. I know *what* code to write just not where to write it
Sep 09 17:46:52 <LeoNerd>	"finding the bits" is always the hard part for me. Well, that and spinning up a dev env. But at least in nvim's case I have one already
Sep 09 17:46:53 <LeoNerd>	somewhere
Sep 09 17:46:54 <BjrnLinseGitter[>	BTW pango 1.44 seems to break pangoterm along with many other monospace-grid based programs.
Sep 09 17:47:08 <LeoNerd>	Oh wouldn't surprise me. I do _evil_ evil things to it
Sep 09 17:47:57 <BjrnLinseGitter[>	mostly affecting arch users. for now... Downgrading to 1.43 works for now for me.
Sep 09 17:48:21 <BjrnLinseGitter[>	also neovim-gtk and gnvim (also based on gtk) seems to be affected
Sep 09 17:48:42 <LeoNerd>	Still only on 1.42 even in debian/unstable currently
Sep 09 17:49:03 <LeoNerd>	If its affecting that many folks possibly upstream will provide a different fix somehow?
Sep 09 17:50:15 <BjrnLinseGitter[>	They seem to be aware they broke stuff. They claim that changing stuff in cairo for the next version might mitigate the problem.
Sep 09 17:50:37 <LeoNerd>	Mm. OK.. probably just keep an eye on it then until resolution happens
Sep 09 17:50:56 <LeoNerd>	Anyhow.. on OSC 52 - first progress would be support in libvterm/pangoterm, otherwise nvim would have nothing to talk to
Sep 09 17:50:59 <LeoNerd>	So I need to fix that
Sep 09 17:51:16 <BjrnLinseGitter[>	https://blogs.gnome.org/mclasen/2019/08/07/pango-1-44-wrap-up/ "subpixel rendering issues" they say, but those subpixels seems to quickly add up to incorrect offsets of many pixels.
Sep 09 17:51:50 <LeoNerd>	While also working with Zwegner on this reflow stuff
Sep 09 17:51:57 <LeoNerd>	Ugh.. so much to do :(
Sep 09 17:53:11 <BjrnLinseGitter[>	The relevant part to start with OSC 52 in nvim is src/nvim/tui/tui.c . If someone implements the low-level stuff for reading/emitting the control sequence stuff, I could help to wire it up with the rest of nvim.
Sep 09 17:53:57 <JustinMKeyesGitt>	OSC 52 is tracked by https://github.com/neovim/neovim/issues/3344
Sep 09 17:55:05 <JustinMKeyesGitt>	I would guess `tui/input.c:handle_background_color()` and its related patches (git blame) would be the pattern to follow for handling OSC 52
Sep 09 17:56:18 <LeoNerd>	Well, first I need to have something to actually test with ;)
Sep 09 17:59:06 <LeoNerd>	and first I need to write myself a `tclip`; modeled on `xclip`
Sep 09 18:09:23 <LeoNerd>	WTF xterm your config is bizarre...
Sep 09 18:09:48 <LeoNerd>	To use OSC 52 you have to enable it with `allowWindowOps` (fair enough), and then remove it from the list of `disallowedWindowOps`
Sep 09 18:10:01 <LeoNerd>	A config option containing a comma-separated list of things that are not enabled.
Sep 09 18:10:49 *	LeoNerd learns of push/poptitle stack also; shall have to implement that
Sep 09 18:11:15 <BjrnLinseGitter[>	yah, I had to try three different suggested magic incantations to make xterm use ESC for meta
Sep 09 18:12:48 <LeoNerd>	Annoying that it has this list because Id on't think I can write an xresources config file that just removes a couple of items from it
Sep 09 18:12:53 <LeoNerd>	So I'll have to ocntinue to list all the other values :(
Sep 09 18:13:03 *	LeoNerd hugs vim's set foo-=bar
Sep 09 18:14:38 <BjrnLinseGitter[>	indeed, you need set foo+=bar and set foo-=bar, otherwise you won't get the default of newly added flags.
Sep 09 18:51:49 <JustinMKeyesGitt>	LeoNerd: FYI, Nvim implements title-stacking ('title' + 'titlestring' options)
Sep 09 19:02:23 <LeoNerd>	@justinmk: title stack is a term feature whereby e.g. nvim could push to stack to save the value, so when it exits it pops the old one to restore
Sep 09 19:03:28 <BjrnLinseGitter[>	yes, we are using it :)
Sep 09 19:04:43 <LeoNerd>	Ah ok
Sep 09 20:34:33 <LeoNerd>	Righty. I don't yet have OSC 52 in libvterm/pangoterm but I at least now have a `tclip` program, which works the same as `xclip` but over OSC 52 to the terminal
Sep 09 20:34:35 <LeoNerd>	So that's a start
Sep 09 20:41:48 <BjrnLinseGitter[>	LeoNerd: did libvterm 0.1 change handling of screen resize in anyway? some of the test failures with libvterm 0.1 PR is in tests involving screen resize, but not coloring really.
Sep 09 20:43:25 <BjrnLinseGitter[>	like, is more of the screen cleared by libvterm after resize than before?
Sep 09 20:44:09 <BjrnLinseGitter[>	some regions are unexpectedly filled with `bg=black, fg=black` which used to have text (from before the resize) before
Sep 09 21:02:30 <blueyed>	@BjrnLinse have you tried git-bisecting this in libvterm?
Sep 09 21:10:54 <BjrnLinseGitter[>	blueyed: I would like to hear LeoNerd first if it is an intentional change
Sep 09 21:13:54 <BjrnLinseGitter[>	seems we upgraded to master recently in that PR and not to 0.1, maybe that is wrong
Sep 09 21:14:27 <BjrnLinseGitter[>	i e we are getting some of the reflow changes which will require further nvim changes. Nvim 0.4 should target libvterm 0.1
Sep 09 21:21:15 <LeoNerd>	@bfredl: Shouldn't be intentional, no. Any areas of the screen that aren't affected by resize (i.e. within the min of old/new rows and cols) should remain as they were
Sep 09 21:23:15 <BjrnLinseGitter[>	LeoNerd: seems we were using an arbitrary master version and not 0.1. Restarted the build with 0.1.
Sep 09 21:24:14 <BjrnLinseGitter[>	the memory leak is still there though
Sep 09 21:24:20 <LeoNerd>	Ooh memoryleak?
Sep 09 21:28:12 <BjrnLinseGitter[>	I'll try to get a proper traceback. currently the traceback ends in vterm.c:default_malloc ..
Sep 09 21:29:35 <LeoNerd>	Hmmm
Sep 09 21:34:41 <BjrnLinseGitter[>	yah, adding -g to libvterm build didn't work, still no traceback
Sep 09 21:34:55 <BjrnLinseGitter[>	maybe a frame pointer got -fomited somewhere..
Sep 09 21:41:44 <BjrnLinseGitter[>	righty, apart from the leak, the main issue is that `vterm_state_set_palette_color(state, i, &color)` doesn't seem to work. We still get the builtin color back, not the changed one.
Sep 09 21:42:20 <BjrnLinseGitter[>	(but all issues regarding resize were fixed)
Sep 09 21:43:27 <LeoNerd>	Hrm.. for what value of i? I.e. <16 or >=16 ?
Sep 09 21:44:45 <BjrnLinseGitter[>	color 3. Maybe that is not kosher?
Sep 09 21:45:19 <LeoNerd>	Offhand I forget entirely; let me look
Sep 09 21:47:19 <LeoNerd>	0..15 are the only colours you *can* set; so colour 3 should be fine
Sep 09 21:47:37 <BjrnLinseGitter[>	mm
Sep 09 21:48:55 <LeoNerd>	The palette is stored per vterm object, so make sure you're calling it on the correct one
Sep 09 21:49:02 <LeoNerd>	But otherwise, this appears like it should work
Sep 09 21:49:11 <LeoNerd>	also pangoterm uses it.. let me see a moment if it works there
Sep 09 21:49:57 <LeoNerd>	Yup, appears to be working fine
Sep 09 21:50:11 <BjrnLinseGitter[>	yep, it is on the state of the instance.
Sep 09 21:50:32 <LeoNerd>	Are you using 0.1 release?
Sep 09 21:50:40 <BjrnLinseGitter[>	yes.
Sep 09 21:50:51 <LeoNerd>	Hmm.. soyeah, that ought to be working :/
Sep 09 21:51:23 <LeoNerd>	At this point I'd be tempted to fprintf i and color.{r,g,b} at that point in your code to see what you were setting
Sep 09 21:51:52 <BjrnLinseGitter[>	I will try manually and debug and stuff tomorrow :)
Sep 09 21:52:19 <LeoNerd>	OK
Sep 09 21:54:17 <BjrnLinseGitter[>	actually colors are broken even before that. all my <16 colors are bright cyan...
Sep 09 21:55:08 <LeoNerd>	Yeah that's probably an API mismatch
Sep 09 21:55:26 <LeoNerd>	That happened to me when I updated libvterm but hadn't yet recompiled pangoterm, so it was still using the old struct layout
Sep 09 21:55:48 <BjrnLinseGitter[>	rgb colors works though
Sep 09 21:56:02 <LeoNerd>	Hmmmm
Sep 09 21:56:10 <LeoNerd>	Are you invoking the right bits of API?
Sep 09 21:56:33 <BjrnLinseGitter[>	we shouldn't use cell.bg.rgb.red, cell.bg.rgb.green, cell.bg.rgb.blue for a cell with palette color?
Sep 09 21:56:40 <LeoNerd>	Ah, no. :)
Sep 09 21:57:01 <LeoNerd>	Those don't get set; they're a union between that and the palette index.
Sep 09 21:57:15 <LeoNerd>	You need to call `vterm_state_convert_color_to_rgb()` on it (which is a no-op if already RGB)
Sep 09 21:57:26 <BjrnLinseGitter[>	we only use `VTERM_COLOR_IS_INDEXED` in the cterm branch :P
Sep 09 21:57:58 <BjrnLinseGitter[>	lemme try
Sep 09 21:59:41 <LeoNerd>	Ahyes, I suspect you'll get "some sort of cyan" because r/g/b is unioned with the index. index is likely a small value, so that collides with the red channel and makes it almost zero, leaving green and blue to whatever inmemory junk had been there before
Sep 09 22:10:18 <BjrnLinseGitter[>	pushed a fix. Seem to be other issues though, I guess we should be using VTERM_COLOR_IS_DEFAULT_FG also for rgb colors?
Sep 09 22:10:57 <BjrnLinseGitter[>	I e to detect if the color was actually unset and not incidentally the same as Normal colors.
Sep 09 22:11:03 <LeoNerd>	Ah, yes definitely
Sep 09 22:11:53 <LeoNerd>	Before the conversion, not after. Conversion destroys that flag
Sep 09 22:12:08 <BjrnLinseGitter[>	indeed.
Sep 09 22:12:54 <BjrnLinseGitter[>	also the code assumes 'termguicolors' cannot be set after setup... Though this is not a vterm API issue :)
Sep 09 22:16:06 <BjrnLinseGitter[>	we should also be able to set a bit in the attr struct to TUI that the color is indexed, for pass through of palette colors even in true color mode
Sep 09 22:17:57 <LeoNerd>	Mm?
Sep 09 22:19:19 <BjrnLinseGitter[>	I mean, if the program inside `:terminal` uses the 255 or 16 palette, we can pass through these colors unmodified as indicies, even if the rest of nvim uses rgb colors.
Sep 09 22:20:02 <LeoNerd>	Yah, that was the original idea
Sep 09 22:20:08 <LeoNerd>	This API is for youguys :) pangoterm doesn't care
Sep 09 22:28:26 <BjrnLinseGitter[>	now everything is working except for a nvim-layer issue and that mysterious leak of 64 bytes in every nvim instance.
Sep 09 22:28:49 <BjrnLinseGitter[>	maybe we are initializing some "global" state ahead of time somewhere, and doesn't deinitialize it.
Sep 09 22:31:50 <BjrnLinseGitter[>	no, it is 64 bytes that are leaked between every `vterm_new` and `vterm_free`
Sep 09 22:40:58 <BjrnLinseGitter[>	LeoNerd: vt->tmpbuffer is allocated but never freed
Sep 09 22:43:52 <LeoNerd>	Ahh oops
Sep 09 22:44:04 <LeoNerd>	That sounds like an easy fix anyhow
Sep 09 22:44:37 <BjrnLinseGitter[>	yeah, we can fix it a neovim/libvterm branch for now
Sep 09 22:44:50 <BjrnLinseGitter[>	it mostly matters for testing with ASAN
Sep 09 22:45:21 <LeoNerd>	I expect the fix is just  if(vt->tmpbuffer) vterm_allocator_free(vt, vt->tmpbuffer);  at the right place
Sep 09 22:45:42 <ShalokShalom>	do i get this right: lua5.1 is required, 5.2 is not possible?
Sep 09 22:46:09 <BjrnLinseGitter[>	lua5.1 is supported
Sep 09 22:46:20 <BjrnLinseGitter[>	lua5.2 might work by accident, but is not supported, and might break any plugin
Sep 09 22:46:51 <ShalokShalom>	https://github.com/neovim/neovim/blob/master/CMakeLists.txt#L382
Sep 09 22:46:58 <ShalokShalom>	thats bad
Sep 09 22:47:28 <ShalokShalom>	could you just offer an AppImage or such?
Sep 09 22:47:28 <BjrnLinseGitter[>	lua x.y is not backwards compatible
Sep 09 22:47:32 <ShalokShalom>	sad
Sep 09 22:47:48 <ShalokShalom>	we use 5.2 since that is what every app in our repo can use
Sep 09 22:48:03 <BjrnLinseGitter[>	if you are used to semver, think of lua 5.1,5.2,5.3  as if it were lua 6.0, 7.0, 8.0
Sep 09 22:48:29 <ShalokShalom>	mvp, wireshark pretty much any lua app has different support ranges
Sep 09 22:48:43 <ShalokShalom>	boah, thats super annoying
Sep 09 22:48:51 <ShalokShalom>	even more messed up as Python
Sep 09 22:49:08 <BjrnLinseGitter[>	and we do offer an appimage, with luajit statically linked in :)
Sep 09 22:49:13 <ShalokShalom>	oh fine
Sep 09 22:49:23 <ShalokShalom>	hope I can build fvim with that :p
Sep 09 22:49:28 <BjrnLinseGitter[>	should be on releases page
Sep 09 22:51:10 <ShalokShalom>	thanks
Sep 09 22:52:18 <BjrnLinseGitter[>	no problem!
Sep 09 23:24:31 <ShalokShalom>	hi
Sep 09 23:25:17 <ShalokShalom>	your CMakeList/Makefile looks for lua in /usr/bin/lua while its /usr/bin/lua5.1
Sep 09 23:27:12 <ShalokShalom>	 /usr/bin/lua is our distributions standard lua5.2
Sep 09 23:29:20 <JustinMKeyesGitt>	what change do you suggest?
Sep 09 23:30:44 <ShalokShalom>	No, I do not suggest a change
Sep 09 23:30:50 <ShalokShalom>	I ask for one solution
Sep 09 23:31:05 <ShalokShalom>	How to change it locally
Sep 09 23:33:33 <JustinMKeyesGitt>	this is handled by https://github.com/neovim/neovim/blob/master/cmake/FindLua.cmake , and typically you tell it where to find lua via `LUA_INCLUDE_DIR`
Sep 09 23:34:06 <ShalokShalom>	oh, a build trigger?
Sep 09 23:34:08 <ShalokShalom>	thanks a lot
Sep 09 23:34:48 <JustinMKeyesGitt>	see also https://github.com/justinmk/neovim/blob/e5d5fc0857935b4f67058a6a2dcfbc573331e3f6/CMakeLists.txt#L381-L391
Sep 09 23:37:02 <ShalokShalom>	well, 5.2 and 5.1 are both in the same dir
Sep 09 23:37:13 <ShalokShalom>	the issue is, that it assumes that lua = 51
Sep 09 23:37:29 <JustinMKeyesGitt>	what is "it"?
Sep 09 23:37:32 <ShalokShalom>	Uploaded file: https://uploads.kiwiirc.com/files/5a5e0ac6ea70c682468c7b31a603e352/Screenshot_20190909_233718.png
Sep 09 23:37:38 <JustinMKeyesGitt>	SuSE uses lua 5.2 for nvim package
Sep 09 23:37:48 <ShalokShalom>	cmake
Sep 09 23:37:59 <ShalokShalom>	Ah yeah?
Sep 09 23:38:12 <ShalokShalom>	I just got told this is unsupported, so I rebuild 4 packages :P
Sep 09 23:38:17 <JustinMKeyesGitt>	lua 5.2 "should" work, since suse uses it and we have their patches AFAIK
Sep 09 23:38:25 <ShalokShalom>	aha, I see
Sep 09 23:38:27 <ShalokShalom>	-.-
Sep 09 23:38:30 <ShalokShalom>	thanks a lot
Sep 09 23:38:48 <JustinMKeyesGitt>	it is unsupported in that we don't test against it...
Sep 09 23:38:49 <ShalokShalom>	http://dpaste.com/31V0VKT#line-93
Sep 09 23:38:53 <ShalokShalom>	i see
Sep 09 23:39:09 <ShalokShalom>	i guess I have made a packaging issue here
Sep 09 23:39:30 <ShalokShalom>	lpeg is also build by myself
Sep 09 23:40:36 <ShalokShalom>	can you see the issue?
Sep 09 23:46:15 <JustinMKeyesGitt>	you need 'lpeg', 'bit', etc. packages available to whatever Lua interpreter you're targeting. Via either LuaRocks or your system package manager.
Sep 09 23:46:32 <JustinMKeyesGitt>	Maybe mcepl can say how they handle this on suse
Sep 09 23:46:38 <ShalokShalom>	i build them
Sep 09 23:46:42 <ShalokShalom>	lpeg at least
Sep 09 23:46:50 <mcepl>	JustinMKeyesGitt: what's the question?
Sep 09 23:46:56 <ShalokShalom>	bit is also not in the pkgbuild of arch and it seems to work
Sep 09 23:47:01 <JustinMKeyesGitt>	great. does require('lpeg') work in the lua repl?
Sep 09 23:47:05 <ShalokShalom>	mcepl see me link
Sep 09 23:47:08 <ShalokShalom>	sec
Sep 09 23:47:27 <JustinMKeyesGitt>	mcepl: are you packainge lpeg/bit/etc? Or is bit not needed on lua 5.2?
Sep 09 23:47:36 <JustinMKeyesGitt>	*packaging
Sep 09 23:48:00 <mcepl>	we use system lua packages from openSUSE
Sep 09 23:48:03 <ShalokShalom>	they build it on 5.1
Sep 09 23:48:08 <mcepl>	this is the standard openSUSE neovim SPEC https://build.opensuse.org/package/view_file/editors/neovim/neovim.spec?expand=1
Sep 09 23:48:38 <mcepl>	this (currently unsucesful) attempt to make universal packages both for openSUSE and Fedora/RHEL https://build.opensuse.org/package/view_file/home:mcepl:neovim/neovim/neovim.spec?expand=1
Sep 09 23:48:51 <ShalokShalom>	Uploaded file: https://uploads.kiwiirc.com/files/79a9457d6fd6eaaaf3696ed4ce57bf7b/Screenshot_20190909_234838.png
Sep 09 23:49:04 <JustinMKeyesGitt>	mcepl: for some reason i thought you were using lua 5.2, but i see lua51 in that spec
Sep 09 23:49:05 <ShalokShalom>	thanks
Sep 09 23:49:09 <mcepl>	yes, we build on 5.1 (preferably LuaJIT), but on Fedora we built with their system Lua (which is 5.3, I believe)
Sep 09 23:49:15 <ShalokShalom>	thats such a mess
Sep 09 23:49:50 <mcepl>	ShalokShalom: true for the multi-platform SPEC, but I think the system one is more or less reasonable.
Sep 09 23:50:02 <mcepl>	(patches welcome!)
Sep 09 23:50:11 <JustinMKeyesGitt>	it's a mess because distros are weird about Lua, and can't seem to fathom having multiple versions on the same system
Sep 09 23:50:12 <ShalokShalom>	our distro uses 5.2
Sep 09 23:50:19 <mcepl>	JustinMKeyesGitt: I had to be multi-Lua because of Fedora
Sep 09 23:50:34 <ShalokShalom>	I just spend a bit to build all for 5.1, just to discover that it "should" work anyways
Sep 09 23:50:47 <mcepl>	JustinMKeyesGitt: openSUSE is perfectly capable of havbing mutliple Luas on one system.
Sep 09 23:50:49 <ShalokShalom>	why not write the CMake in such a way that all three are working
Sep 09 23:50:57 <mcepl>	(everything is prefixed)
Sep 09 23:51:10 <ShalokShalom>	that would make it much more accessible
Sep 09 23:51:18 <JustinMKeyesGitt>	ShalokShalom: because Lua 5.1 is  a different language than Lua 5.2/5.3
Sep 09 23:51:22 <ShalokShalom>	i know
Sep 09 23:51:29 <ShalokShalom>	it seems you build all three anyways
Sep 09 23:51:42 <mcepl>	ShalokShalom: Lua is (unfortunately) not like Python, Perl, or any other reasonable language in this regard.
Sep 09 23:51:42 <ShalokShalom>	and other distros will do so as well
Sep 09 23:51:58 <ShalokShalom>	Python is reasonable in this regard?
Sep 09 23:52:17 <mcepl>	Yes, Python 3 is more or less compatible for 9 minor versions these days.
Sep 09 23:52:32 <mcepl>	and there are pretty sucessful dual-Python programs.
Sep 09 23:52:35 <ShalokShalom>	aha.. these days
Sep 09 23:52:35 <JustinMKeyesGitt>	We will eventually side-step the issue by inlining whatever Lua modules we want, and avoiding distro's packages entirely.
Sep 09 23:52:49 <ShalokShalom>	while it was a major break back then?
Sep 09 23:52:58 <mcepl>	ShalokShalom: and it was always prefectly compatible for all Python 2:* versions.
Sep 09 23:53:01 <ShalokShalom>	JustinMKeyesGitt that would be awesome
Sep 09 23:53:03 <JustinMKeyesGitt>	Lua is an embedded language, and using a system packager for it is pointless
Sep 09 23:53:27 <ShalokShalom>	that would be double awesome, since then I can put neovim easier into the community repos
Sep 09 23:53:27 <mcepl>	JustinMKeyesGitt: that is not awesome ... we will have to unbundle these packages anyway (I will do it for lpeg certainly)
Sep 09 23:54:01 <JustinMKeyesGitt>	mcepl: that makes no sense, that would be like "unbundling" buffer.c
Sep 09 23:54:14 <JustinMKeyesGitt>	or various Vimscript runtime plugins
Sep 09 23:54:53 <ShalokShalom>	Lua should not be a hard depend, anyways
Sep 09 23:54:54 <JustinMKeyesGitt>	we already inline the "inspect" module, as well as modules that we've written ourselves. There's no reason lpeg can't be treated the same
Sep 09 23:55:07 <ShalokShalom>	or is it system-critical?
Sep 09 23:55:10 <JustinMKeyesGitt>	what are you basing that on?
Sep 09 23:55:19 <JustinMKeyesGitt>	core code is written in Lua
Sep 09 23:55:24 <ShalokShalom>	oh i see
Sep 09 23:55:27 <ShalokShalom>	then ofc
Sep 09 23:55:28 <mcepl>	will you guarantee timely security updates for all embedded components? Where you are around any distributrion when fixing a security bug for embedded library?
Sep 09 23:56:06 <BjrnLinseGitter[>	mcepl: we are distributing fully statically linked binaries today :)
Sep 09 23:56:12 <mcepl>	(I was around Debian when the legendary libz bug happened .... )
Sep 09 23:56:15 <JustinMKeyesGitt>	security updates for Lua modules?
Sep 09 23:57:10 <JustinMKeyesGitt>	these will be treated like any security problem in Vim/Nvim: we will backport patches to the stable tag
Sep 09 23:57:15 <mcepl>	BjrnLinseGitter[: yes, it is a fashion these days to have statically linked binaries ... it will take many high-profile security dissasters before this fashion goes away.
Sep 09 23:57:18 <ShalokShalom>	i would hearty welcome such changes
Sep 09 23:57:55 <BjrnLinseGitter[>	mcepl: distributing a nvim binary that people can run at all seems like a good idea.
Sep 09 23:57:59 <ShalokShalom>	mcepl ppl should just not code stuff in imperative style, which could be functional..
Sep 09 23:58:18 <BjrnLinseGitter[>	the update frequency is like, literally nightly
Sep 09 23:58:20 <ShalokShalom>	BjrnLinseGitter[: perfect, imho
Sep 09 23:58:27 <BjrnLinseGitter[>	and stable whenever there is a critical bug
Sep 09 23:58:38 <mcepl>	BjrnLinseGitter[: yes, it is a good copmromise forthose who are not well maintained platforms (e.g., Windows)
Sep 09 23:59:13 <BjrnLinseGitter[>	and for the looong tail of various random linux distros (as long as it is glibc at least)
Sep 09 23:59:47 <ShalokShalom>	like ours
Sep 10 00:00:14 <mcepl>	BjrnLinseGitter[: yes, on not well maintained platforms
Sep 10 00:00:24 <mcepl>	but it is a compromise
Sep 10 00:00:28 <ShalokShalom>	especially since maintaining thousands of own packages lets you think twice if 12 new dependencies are worth one neovim
Sep 10 00:00:42 <ShalokShalom>	especially since vim offers similar benefits for most
Sep 10 00:00:59 <ShalokShalom>	mcepl all is a compromise
Sep 10 00:01:04 <mcepl>	and yes, hopefuilly, neovim is not usually an Internet facing server
Sep 10 00:01:08 <BjrnLinseGitter[>	mcepl: just as dynamic linking is compromise. It works well until it fails miserably.
Sep 10 00:01:58 <mcepl>	(although, I am waiting for somebody to make aweb server in VimScript)
Sep 10 00:02:19 <ShalokShalom>	I think the answer to that is obviously Flatpak or so
Sep 10 00:02:22 <ShalokShalom>	Habitat maybe
Sep 10 00:02:27 <BjrnLinseGitter[>	mcepl: some guys at vim-jp (japanese community) are working on this
Sep 10 00:02:37 <ShalokShalom>	then you can eat the Cake and .. eat it again
Sep 10 00:02:37 <BjrnLinseGitter[>	or at least did a year ago, for the last vimconf
Sep 10 00:03:10 <mcepl>	ShalokShalom: Flatpak is exactly the same as a statically linked binary, who will take of its compoentns?
Sep 10 00:03:43 <ShalokShalom>	i mean in terms of isolation
Sep 10 00:03:54 <mcepl>	*tale care of its copmonents
Sep 10 00:04:16 <mcepl>	perhaps (and SELinux)
Sep 10 00:05:25 <ShalokShalom>	And Habitat has a server
Sep 10 00:05:30 <ShalokShalom>	habitat.sh
Sep 10 00:05:35 <BjrnLinseGitter[>	Sometimes component caretaking breaks stuff. Like pango 1.44 shared library update broke existing apps using pango for monospace rendering
Sep 10 00:05:38 <ShalokShalom>	in Rust
Sep 10 00:07:28 <mcepl>	yes, and some maintainers idiots (my current hot candidates are pytest maintainers breaking API every other version)
Sep 10 00:07:34 <mcepl>	*are idiots
Sep 10 00:08:39 <BjrnLinseGitter[>	now, there should be a magic incantation to link pangoterm to the .so for pango 1.43, while keeping the rest of the system using 1.44 ...
Sep 10 00:08:53 <LeoNerd>	That's what -R is for
Sep 10 00:09:00 <LeoNerd>	and setting LD_RUNPATH on the resultant binary
Sep 10 00:09:00 <BjrnLinseGitter[>	Though pinning the system wide package to 1.43 works. for now.
Sep 10 00:09:34 <BjrnLinseGitter[>	I already got it to work with LD_LIBRARY_PATH, but that is ugly.
Sep 10 00:10:06 <BjrnLinseGitter[>	I would need to reset it in the shell inside pangoterm, so that it is not picked up by other gtk apps
Sep 10 00:14:23 <ShalokShalom>	is this thing with inlined lua packages on track?
Sep 10 00:21:49 <JustinMKeyesGitt>	there's no ticket for it currently
Sep 10 00:41:13 <unixcat>	does anyone here using SpaceVim know how to set autoindent and smartindent in init.toml?
Sep 10 00:41:30 <unixcat>	The SpaceVim channel on Freenode and Gitter both seem to be dead.
Sep 10 00:43:29 <ShalokShalom>	thanks that you made me aware of SpaceVim
Sep 10 00:43:37 <unixcat>	np :)
Sep 10 02:01:36 <ShalokShalom>	Is anybody interested in a full blown IDE with 100% Vim support?
Sep 10 02:01:44 <ShalokShalom>	You could help here: https://bugreports.qt.io/browse/QTCREATORBUG-20743
Sep 10 02:08:29 <JustinMKeyesGitt>	I'm certainly interested, but I don't know what you expect by linking to that issue. https://github.com/sassanh/qnvim is the main repo
Sep 10 02:09:01 <JustinMKeyesGitt>	Also personally I'm more interested in IntelliJ/VSCode/VS/Eclipse integration.
Sep 10 02:11:15 <astronavt>	rip sublime developer community :(
Sep 10 02:11:33 <astronavt>	but vs code would be a great frontend for neovim
Sep 10 03:40:28 <JustinMKeyesGitt>	@bfredl should `bufpos + relative!=win` be an error?
Sep 10 03:57:59 <henninb>	i have installed the plugin for prettier for nvim, is there a way to disable markdown for the plugin. when I save a large markdown file prettier pegs my cpu.
Sep 10 04:34:14 <HirokazuHataGitt>	If you use vim-prettier, you can disable markdown if you reject ‘markdown’ in setting.
Sep 10 04:34:15 <HirokazuHataGitt>	https://github.com/prettier/vim-prettier#install
Sep 10 10:21:20 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep 10 10:21:20 2019

**** BEGIN LOGGING AT Tue Sep 10 10:21:44 2019

Sep 10 10:21:44 *	Now talking on #neovim
Sep 10 10:21:44 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 10 10:21:44 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 10 10:54:49 <daGrevis>	how can I revert the behaviour of gx mapping?
Sep 10 10:55:21 <daGrevis>	it opened the link under cursor in BROWSER. now it tries to download the content of link first and only then in opens saved page locally.
Sep 10 11:00:52 <daGrevis>	https://github.com/vim/vim/issues/4738
Sep 10 12:26:43 <ashfinal>	:help fold
Sep 10 22:51:48 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep 10 22:51:48 2019

**** BEGIN LOGGING AT Tue Sep 10 22:52:12 2019

Sep 10 22:52:12 *	Now talking on #neovim
Sep 10 22:52:12 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 10 22:52:12 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 11 11:12:47 *	Disconnected ()
**** ENDING LOGGING AT Wed Sep 11 11:12:47 2019

**** BEGIN LOGGING AT Wed Sep 11 11:13:12 2019

Sep 11 11:13:12 *	Now talking on #neovim
Sep 11 11:13:12 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 11 11:13:12 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 11 12:49:17 <mcepl>	HirokazuHataGitt: do not be sorry, thank you very much (partially, I had another problem that blooming python-language-server doesn't work with too new python-jedi).
Sep 11 12:50:24 <mcepl>	HirokazuHataGitt: could you advise on proper form of LSPRename function (https://is.gd/ytXmoh is apparently wrong), please?
Sep 11 13:29:04 <ShalokShalom>	hi there
Sep 11 13:30:25 <ShalokShalom>	your trigger LUA_INCLUDE_DIR=/usr/bin/ is supposed to switch the lua directory
Sep 11 13:30:45 <ShalokShalom>	sadly, all my lua versions life in the same directory, so how to choose 5.1 specifically?
Sep 11 13:32:03 <BjrnLinseGitter[>	something like `LUA_INCLUDE_DIR=/usr/include/lua5.1/` ?
Sep 11 13:32:24 <ShalokShalom>	its in usr/bin
Sep 11 13:32:31 <BjrnLinseGitter[>	both lua.h cannot literally be in the same directory..
Sep 11 13:32:33 <ShalokShalom>	no separate folder
Sep 11 13:32:48 <ShalokShalom>	and how to choose which bin?
Sep 11 13:33:13 <BjrnLinseGitter[>	libraries can be in the same folder, but LUA_INCLUDE_DIR sounds like the dir for .h files
Sep 11 13:33:51 <ShalokShalom>	i dont know
Sep 11 13:34:27 <BjrnLinseGitter[>	LUA_INCLUDE_DIR should literally be the dir where lua.h is present (looking at our `FindLua.cmake` )
Sep 11 13:34:27 <ShalokShalom>	Neovim looks up in /usr/bin
Sep 11 13:35:04 <ShalokShalom>	Some other person in this channel told me this is the right trigger to manipulate the binary
Sep 11 13:35:19 <BjrnLinseGitter[>	in /usr/bin it would find a `lua` or `luajit` binary in order to run our lua build scripts, it is not the same thing
Sep 11 13:35:37 <ShalokShalom>	Uploaded file: https://uploads.kiwiirc.com/files/2b5b4c53944afa6e8846117930abc4b8/pasted.txt
Sep 11 13:35:52 <ShalokShalom>	This is exactly what I say
Sep 11 13:36:05 <BjrnLinseGitter[>	we even specifically fixed our build scripts to work with at least lua 5.2, even if nvim binary itself is expected to link to lua 5.1
Sep 11 13:36:37 <ShalokShalom>	So?
Sep 11 13:36:38 <ShalokShalom>	When?
Sep 11 13:36:42 <ShalokShalom>	Yesterday?
Sep 11 13:37:10 <BjrnLinseGitter[>	but what is your lua 5.1 binary located? `/usr/bin/lua5.1` ?
Sep 11 13:38:13 <ShalokShalom>	yes
Sep 11 13:38:30 <BjrnLinseGitter[>	I think it is `LUA_PRG` env var
Sep 11 13:38:57 <BjrnLinseGitter[>	so `LUA_PRG` should be set to `/usr/bin/lua5.1`,
Sep 11 13:40:33 <ShalokShalom>	could you help me with the exact command?
Sep 11 13:40:34 <ShalokShalom>	CMake Error: The source directory "/home/joe/Dokumente/Packages/neovim/src/-LUA_PRG=/usr/bin/lua5.1" does not exist.
Sep 11 13:41:01 <ShalokShalom>	Uploaded file: https://uploads.kiwiirc.com/files/2d3e67385951a31a129af52f43694039/Screenshot_20190911_134048.png
Sep 11 13:41:24 <BjrnLinseGitter[>	Missing a "D" after the "-" there
Sep 11 13:41:33 <ShalokShalom>	ok
Sep 11 13:41:46 <ShalokShalom>	D stands for what?
Sep 11 13:41:57 <ShalokShalom>	I am not very used with building
Sep 11 13:42:09 <BjrnLinseGitter[>	change env var
Sep 11 13:42:23 <ShalokShalom>	Same error as before
Sep 11 13:42:26 <ShalokShalom>	5.1 not found
Sep 11 13:42:48 <BjrnLinseGitter[>	though as your pkgbuild depends on "luajit", you could use "/usr/bin/luajit"
Sep 11 13:43:03 <ShalokShalom>	ok
Sep 11 13:44:14 <ShalokShalom>	seems to build ^^
Sep 11 13:46:59 <ShalokShalom>	It gives me some warnings
Sep 11 13:47:13 <ShalokShalom>	One is that there is no backup file in the packet: etc/xdg/nvim/sysinit.vim
Sep 11 13:47:34 <ShalokShalom>	wohee it works :D
Sep 11 13:47:38 <ShalokShalom>	thanks a lot
Sep 11 13:47:52 <BjrnLinseGitter[>	no problem :)
Sep 11 13:48:11 <BjrnLinseGitter[>	did you base it on the existing AUR pkgbuild?
Sep 11 13:48:25 <BjrnLinseGitter[>	etc/xdg/nvim/sysinit.vim is not something that has been changed recently
Sep 11 13:49:02 <ShalokShalom>	yes, I did base it on the existing AUR pkgbuild
Sep 11 13:49:19 <ShalokShalom>	Its just a totally different, independent distribution
Sep 11 13:49:23 <ShalokShalom>	So I had to port it
Sep 11 13:49:28 <ShalokShalom>	And I am very bad at it :D
Sep 11 13:49:54 <ShalokShalom>	So it is supposed to work with 5.2 as well=
Sep 11 13:50:09 <ShalokShalom>	Since that would need less packages in the user repository
Sep 11 13:50:20 <BjrnLinseGitter[>	I don't have this etc/xdg/nvim/sysinit.vim file either, probably nothing to worry about
Sep 11 13:50:22 <ShalokShalom>	I will build fvim in the end
Sep 11 13:50:25 <ShalokShalom>	ok, fine
Sep 11 13:50:28 <ShalokShalom>	thanks
Sep 11 13:50:31 <BjrnLinseGitter[>	but if you already have luajit then use that
Sep 11 13:50:43 <ShalokShalom>	sure
Sep 11 13:50:52 <ShalokShalom>	luajit is not running on 5.2?
Sep 11 13:51:13 <ShalokShalom>	hnn, ah you mean it dont run on 5.1 right now?
Sep 11 13:51:16 <mcepl>	ShalokShalom: LuaJIT is an alternative interpreter compatible with 5.1
Sep 11 13:51:18 <BjrnLinseGitter[>	5.1 + a few extensions from 5.2
Sep 11 13:51:25 <ShalokShalom>	I see.
Sep 11 13:51:36 <ShalokShalom>	So I dont need to build 5.2
Sep 11 13:51:41 <ShalokShalom>	Just luajit?
Sep 11 13:51:47 <BjrnLinseGitter[>	I think it is binary compatible with lua51-xxx binary packages
Sep 11 13:51:51 <ShalokShalom>	Since that one is already in the userreps, that would be awesome
Sep 11 13:51:55 <BjrnLinseGitter[>	yes.
Sep 11 13:51:56 <ShalokShalom>	I see, cool ^-^
Sep 11 13:52:00 <ShalokShalom>	Thats great
Sep 11 13:53:17 <BjrnLinseGitter[>	just curious, what is this distribution?
Sep 11 13:53:36 <ShalokShalom>	KaOS
Sep 11 13:54:08 <ShalokShalom>	Here I link you the website, since there are multiple distros with this name: https://kaosx.us/
Sep 11 13:54:11 <ShalokShalom>	KDE focused
Sep 11 13:54:18 <ShalokShalom>	Thanks a lot for helping me :D
Sep 11 13:54:22 <BjrnLinseGitter[>	I see
Sep 11 13:54:36 <ShalokShalom>	:)
Sep 11 13:54:58 <ShalokShalom>	I go on and build fvim now, has anybody tried this one yet?
Sep 11 13:55:08 <ShalokShalom>	Or the Qt Creator implementation?
Sep 11 13:56:05 <BjrnLinseGitter[>	no, I only use gtk UI:s (and gtk terminals) :)
Sep 11 13:58:21 <ShalokShalom>	I see ^^
Sep 11 13:58:50 <ShalokShalom>	thanks a lot for helping me
Sep 11 13:59:03 <BjrnLinseGitter[>	you're welcome :)
Sep 11 13:59:31 <ShalokShalom>	do you know the Dirk Hohndel talk?
Sep 11 13:59:49 <ShalokShalom>	the from gtk to qt https://www.youtube.com/watch?v=gGZyVSOnqm0
Sep 11 14:01:10 <BjrnLinseGitter[>	I've heard about it. But somehow gtk works better in practice.
Sep 11 14:01:28 <BjrnLinseGitter[>	C rather than C++ seems nice when binding to other languages
Sep 11 14:01:40 <ShalokShalom>	I see
Sep 11 14:01:40 <LeoNerd>	+1
Sep 11 14:01:53 <ShalokShalom>	QT has the burden that it gets badly integrated
Sep 11 14:02:02 <ShalokShalom>	Most distros put it on top of a GTK stack
Sep 11 14:02:09 <ShalokShalom>	That this cant work is obvious
Sep 11 14:02:27 <BjrnLinseGitter[>	like compiling gnvim (using rust-gtk) takes less than a minute, but go-neovim took 40+ min just to build go-qt bindings.
Sep 11 14:02:47 <BjrnLinseGitter[>	And I think that is more on qt than go....
Sep 11 14:03:11 <ShalokShalom>	I guess thats more about this specific implementation
Sep 11 14:04:12 <BjrnLinseGitter[>	well it needs to compile c++ code for every c++ function in qt, because Go does not have a c++ ffi, nor does most other languages.
Sep 11 14:04:37 <ShalokShalom>	Ah, you use QtWidgets
Sep 11 14:04:40 <BjrnLinseGitter[>	things like https://github.com/JuliaInterop/Cxx.jl is yet an exception, not the norm :)
Sep 11 14:05:01 <ShalokShalom>	QML is JavaScript
Sep 11 14:05:23 <ShalokShalom>	QtWidgets is not very much used these days
Sep 11 14:05:42 <BjrnLinseGitter[>	well you need to ask gonvim about that.
Sep 11 14:05:44 <ShalokShalom>	No hardware acceleration, no mobile support and the languages
Sep 11 14:06:23 <BjrnLinseGitter[>	if you write an app in rust or go, maybe you don't want to write a lot of js in addition, unless you have choosen to go the Electron Way.
Sep 11 14:06:36 <ShalokShalom>	The binding allows for both
Sep 11 14:06:42 <ShalokShalom>	And its dev is super nice ^^
Sep 11 14:08:51 <ShalokShalom>	Yeah, it is written in Widgets
Sep 11 14:15:12 <ShalokShalom>	BjrnLinseGitter[ You dont need to write in JS
Sep 11 14:15:26 <ShalokShalom>	I am just saying it is a completely different integration.
Sep 11 14:21:03 <ShalokShalom>	https://en.wikipedia.org/wiki/List_of_language_bindings_for_Qt_5
Sep 11 14:24:16 <BjrnLinseGitter[>	ShalokShalom: right but either way you need to write code in the target language or a FFI to the target language
Sep 11 14:24:49 <BjrnLinseGitter[>	perhaps the QML API surface is smaller, but then it might miss some functionality of qtwidget that gonvim wants.
Sep 11 14:25:05 <ShalokShalom>	It is declarative, in the first place
Sep 11 14:25:25 <ShalokShalom>	Which also means more functional/shorter
Sep 11 14:25:29 <ShalokShalom>	As functional code tends to be
Sep 11 14:44:57 <BenoitdeChezelle>	LeoNerd: I have a `alias :q=exit` in my shell to avoid this kind of problem 😁
Sep 11 14:58:57 <LeoNerd>	:)
**** BEGIN LOGGING AT Wed Sep 11 15:47:01 2019

Sep 11 15:47:01 *	Now talking on #neovim
Sep 11 15:47:01 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 11 15:47:01 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 11 16:13:44 <DanielReillyGitt>	hi, i'm using neovim to program in rust.  does anyone know how to prevent `<` character from automatically inserting/pairing a `>` character?
Sep 11 16:18:59 <KillTheMuleGitte>	@d_k_reilly_twitter (Neo)vim does not do this automatically, check your plugins
Sep 11 16:29:17 <DanielReillyGitt>	@KillTheMule thanks, seems to only happen for rust, and i have no rust specific addons, i'll look further.  ty
**** ENDING LOGGING AT Wed Sep 11 16:33:19 2019

**** BEGIN LOGGING AT Wed Sep 11 16:33:28 2019

Sep 11 16:33:28 *	Now talking on #neovim
Sep 11 16:33:28 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 11 16:33:28 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 11 16:35:32 <crose>	When I use Nvim as a manpager, it displays an error message for some commands.
Sep 11 16:35:36 <crose>	For example, `$ MANPAGER='nvim +Man!' man git-credential-cache` makes Nvim print `man.vim: command error (7) man -w git-credential-cac: No manual entry for git-credential-cac`.
Sep 11 16:35:40 <crose>	Is this a known issue?
Sep 11 17:08:59 <ShalokShalom>	Who wants Vim in a full IDE?
Sep 11 17:09:01 <ShalokShalom>	https://github.com/sassanh/qnvim/issues/11
Sep 11 17:29:48 <mcepl>	<ShalokShalom> QT has the burden that it gets badly integrated
Sep 11 17:29:48 <mcepl>	<ShalokShalom> Most distros put it on top of a GTK stack
Sep 11 17:30:08 <mcepl>	ShalokShalom: that sounds very strange to me. Qt quite definitively is not on the top of Gtk.
Sep 11 17:30:30 <ShalokShalom>	The GTK stack here is the base system, which is optimized for GTK
Sep 11 17:30:56 <mcepl>	OK, this so much doesn't make sense, that I will rather let it be.
Sep 11 17:31:37 <ShalokShalom>	OK, imagine thousands of packages build on top of thousands of packages, since this is what a distribution is
Sep 11 17:31:53 <ShalokShalom>	GTK plus GNOME on top of the rest of the system
Sep 11 17:31:58 <ShalokShalom>	You optimize that
Sep 11 17:32:15 <ShalokShalom>	Then you remove Gnome, put KDE on top and... what?
Sep 11 17:32:28 <ShalokShalom>	You have the base system already adjusted towards Gnome
Sep 11 17:32:32 <ShalokShalom>	You cannot change that
Sep 11 17:32:52 <ShalokShalom>	This is why every distribution focused on one Toolkit and desktop environment
Sep 11 17:33:46 <ShalokShalom>	Instead of building 4, 5, 6 DEs half baked on one base, we build 1 DE, together with a always optimized stable basis. Hope this clears things up :)
Sep 11 17:38:17 <BjrnLinseGitter[>	gnome seems to work fine on arch, with the arch base being no desktop at all.
Sep 11 17:38:42 <BjrnLinseGitter[>	not sure what the "optimization" would be, there are apps/libs that work with either gtk/glib/etc or qt?
Sep 12 10:08:34 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep 12 10:08:34 2019

**** BEGIN LOGGING AT Thu Sep 12 10:08:59 2019

Sep 12 10:08:59 *	Now talking on #neovim
Sep 12 10:08:59 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 12 10:08:59 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 12 11:08:13 <blueyed>	Should we recommend reporting bugs at Vim directly in the issue template for when "- `vim -u DEFAULTS` (version: ) behaves differently?" is "no"?
Sep 12 11:10:34 <blueyed>	@JamesMcCoy I've meant to bump the required version in the PR, but then @BjrnLinse (fixed and) merged it already.
Sep 12 11:10:39 <blueyed>	(libvterm)
Sep 12 11:59:34 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep 12 11:59:34 2019

**** BEGIN LOGGING AT Thu Sep 12 11:59:58 2019

Sep 12 11:59:58 *	Now talking on #neovim
Sep 12 11:59:58 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 12 11:59:58 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 12 14:54:54 <vejetaryenvampir>	Is there a plugin or setting for async writing via sshfs?
Sep 12 15:05:13 <LeoNerd>	That would just be async writing in general. `sshfs` is mostly invisible to nvim, because it's just part of the filesystem
Sep 12 15:05:43 <LeoNerd>	I sometimes have wanted nvim to be able to async write though, because it'd be nice to at least keep control of the cursor and move around and read maybe other files while I wait for the super-slow sshfs-to-other-side-of-the-world to finish
Sep 12 15:05:48 <vejetaryenvampir>	Yeah, I meant async writing.
Sep 12 15:05:57 <vejetaryenvampir>	I know there's no relation to sshfs.
Sep 12 15:05:58 <LeoNerd>	That wouldn't need to be sshfs-specific though. Could be just as helpful on NFS or whatever
Sep 12 15:06:26 <BjrnLinseGitter[>	write to a /tmp path and issue a `jobstart("scp")` async job? (not the same thing, but should get the job done)
Sep 12 15:06:28 <vejetaryenvampir>	So, do you have any solutution?
Sep 12 15:06:45 <vejetaryenvampir>	BjrnLinseGitter[: Sorry, I didn't understand.
Sep 12 15:06:56 <LeoNerd>	Eh; that entirely defeats the point of sshfs though :)
Sep 12 15:07:10 <LeoNerd>	Really, nvim just needs to be able to asynchronise writing to the filesystem
Sep 12 15:07:17 <vejetaryenvampir>	Yeah, I know.
Sep 12 15:07:21 <BjrnLinseGitter[>	it solves the problem of having it "async", I assumed that was the important part.
Sep 12 15:07:24 <LeoNerd>	I forget if libuv is around; if so that should be trivial
Sep 12 15:07:52 <LeoNerd>	If not then in practice it's threadpooling because any other option suckcs :(
Sep 12 15:07:59 <vejetaryenvampir>	Is there any solution or not? I'm confused.
Sep 12 15:08:35 <BjrnLinseGitter[>	sure, someone can implement `:&w file` with libuv (I think that is the async task syntax from the workers PR, like `:&grep` )
Sep 12 15:08:41 <LeoNerd>	I don't fully get the question. There are definitely solutions - a program in general should be able to implement this just fine
Sep 12 15:08:54 <LeoNerd>	I don't know offhand if nvim has already written the code to allow it, or if someone must first go write it
Sep 12 15:09:19 <BjrnLinseGitter[>	`:w /tmp/somepath` and `jobstart("scp /tmp/somepath host:/the/real/path")` is the workaround that works now. Judge for yourself if you consider it a solution or not.
Sep 12 15:09:33 <LeoNerd>	.oO( It's days like today when I want DNIX )
Sep 12 15:10:03 <BjrnLinseGitter[>	(wrapped in a plugin of course,  I have one myself but using `silent !scp` because network is fast :)
Sep 12 15:10:28 <vejetaryenvampir>	My network is not fast. :/
Sep 12 15:11:04 <LeoNerd>	The point is the convenience of just being able to `nvim path/to/file` off the regular filesystem, with tab completion in your shell, then be able to `:w` from nvim
Sep 12 15:11:09 <LeoNerd>	No having to think about remote paths
Sep 12 15:11:28 <BjrnLinseGitter[>	sure, but such a plugin could just as well use `jobstart`, this was just what I happened to have
Sep 12 15:11:41 <LeoNerd>	I could justabout accept having to spell it `:&w` but if I have to think about remote filenames or hosts or whatever, that's too much
Sep 12 15:13:06 <BjrnLinseGitter[>	tough my usecase/plugin had to think about remote paths anyway, because the operation is really "save and send python file to remote host and source that file inside a :terminal already running ipython on the remote host"
Sep 12 15:13:12 <LeoNerd>	Would adding it into core nvim be possible? By defualt spell it `:&w` but maybe an option to allow all writes to become async?
Sep 12 15:13:12 <BjrnLinseGitter[>	it is layers of glue all the way down :)
Sep 12 15:13:28 <BjrnLinseGitter[>	it is for sure possible
Sep 12 15:13:39 <LeoNerd>	OK that's less of a question and more a feature-request
Sep 12 15:13:44 <BjrnLinseGitter[>	someone just has to wrap the async libuv function and make the interface nice.
Sep 12 15:14:41 <LeoNerd>	https://github.com/neovim/neovim/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+async+write  -- I don't currently see an issue for it
Sep 12 15:15:01 <BjrnLinseGitter[>	actually `FileWriteCmd` could perhaps do it already, using `:lua vim.loop` :)
Sep 12 15:15:37 <LeoNerd>	I have no comment to make on how to implement it; just as long as I can `:&w` or maybe `:set asyncwrite | :w`
Sep 12 15:16:21 <BjrnLinseGitter[>	feel free to make an issue
Sep 12 15:16:25 *	LeoNerd already writing
Sep 12 15:16:38 <LeoNerd>	I'm just doing that asynchronously while also chatting here  ;)
Sep 12 15:17:12 <BjrnLinseGitter[>	literal concurrency :]
Sep 12 15:17:37 *	LeoNerd <== who added futures and async/await to Perl, lets not forget ;)
Sep 12 15:18:58 <vejetaryenvampir>	So, should I open an issue?
Sep 12 15:19:17 <LeoNerd>	https://github.com/neovim/neovim/issues/11005
Sep 12 15:19:40 <vejetaryenvampir>	Nice, thanks.
Sep 12 18:53:36 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep 12 18:53:36 2019

**** BEGIN LOGGING AT Thu Sep 12 18:54:02 2019

Sep 12 18:54:02 *	Now talking on #neovim
Sep 12 18:54:02 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 12 18:54:02 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 12 19:30:38 <PeppepGitter[m]>	Hey. I'm trying to set up nvim as an alias in .bash_profile on a Mac. I'm not admin, so I'm using the pre-built binaries. Using alias nvim="./nvim-osx64/bin/nvim"  works, but only in the home folder. I've tried setting the alias to the full path (/Users/username/nvim-osx64/nvim" and "./$HOME/nvim-osx64/bin/nvim" but neither work, I get "-bash: ./Users/myusername/nvim-osx64/bin/nvim: No such file or directory"
Sep 12 19:31:20 <PeppepGitter[m]>	But "cd $HOME/nvim-osx64/bin" works
Sep 12 19:56:15 <PeppepGitter[m]>	Nevermind, it worked with zsh. The joys of using a University computer without root, brew etc
Sep 12 20:16:46 <d42>	If you want absolute path start it with / instead of ./
Sep 12 20:16:51 <d42>	:v
Sep 13 07:15:49 *	Disconnected ()
**** ENDING LOGGING AT Fri Sep 13 07:15:49 2019

**** BEGIN LOGGING AT Fri Sep 13 07:16:13 2019

Sep 13 07:16:13 *	Now talking on #neovim
Sep 13 07:16:13 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 13 07:16:13 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 15 22:38:27 *	Disconnected ()
**** ENDING LOGGING AT Sun Sep 15 22:38:27 2019

**** BEGIN LOGGING AT Sun Sep 15 22:38:53 2019

Sep 15 22:38:53 *	Now talking on #neovim
Sep 15 22:38:53 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 15 22:38:53 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 16 00:19:18 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep 16 00:19:18 2019

**** BEGIN LOGGING AT Mon Sep 16 00:19:45 2019

Sep 16 00:19:45 *	Now talking on #neovim
Sep 16 00:19:45 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 16 00:19:45 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 16 09:05:08 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep 16 09:05:08 2019

**** BEGIN LOGGING AT Mon Sep 16 09:05:35 2019

Sep 16 09:05:35 *	Now talking on #neovim
Sep 16 09:05:35 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 16 09:05:35 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 16 09:21:28 <BjrnLinseGitter[>	@zgpio you want `-i NONE` then
Sep 16 09:22:59 <zgpioGitter[m]>	👍
Sep 16 09:38:15 <AntonKochkovGitt>	Are there any release notes?
Sep 16 09:43:32 <JustinMKeyesGitt>	release notes are always in the tagged commit message
Sep 16 10:23:09 <AntonKochkovGitt>	ah, thank you
Sep 16 13:32:37 <segeljaktGitter[>	:tada:
Sep 16 13:37:11 <boxscape>	wondering how people can live with editors that create trailing whitespace when you press enter multiple times..
Sep 16 13:37:29 <boxscape>	(actually not sure if you can turn it on in vim, but I'm glad it doesn't)
Sep 16 15:45:11 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep 16 15:45:11 2019

**** BEGIN LOGGING AT Mon Sep 16 15:45:39 2019

Sep 16 15:45:39 *	Now talking on #neovim
Sep 16 15:45:39 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 16 15:45:39 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 17 10:23:00 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep 17 10:23:00 2019

**** BEGIN LOGGING AT Tue Sep 17 10:23:27 2019

Sep 17 10:23:27 *	Now talking on #neovim
Sep 17 10:23:27 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 17 10:23:27 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
Sep 17 10:29:41 <whereistejas>	hey, folks! I want neovim to show that it in "normal" mode like it shows that it is in "insert" mode
Sep 17 10:29:54 <whereistejas>	How do I do that?
Sep 17 10:44:48 <HirokazuHataGitt>	whereistejas: You can show current vim mode in the statusline.
Sep 17 10:44:49 <HirokazuHataGitt>	https://stackoverflow.com/questions/45270065/show-mode-in-statusline-in-vim
Sep 17 10:44:52 <BjrnLinseGitter[>	whereistejas: you could use statusline plugin that show every mode, like lightline
Sep 17 10:45:45 <whereistejas>	HirokazuHataGitt: BjrnLinseGitter[: I ended up installing vim-airline
Sep 17 11:04:50 <blueyed>	LeoNerd: are you aware of https://github.com/neovim/neovim/issues/11038?  (there appears to be debug printing with the libvterm 0.1 tarball used by homebrew)
Sep 17 11:05:10 <LeoNerd>	Ah yeah I saw the issue
Sep 17 11:05:14 <LeoNerd>	Was just about to look into it
Sep 17 11:19:41 <blueyed>	LeoNerd: looks like the tarball was not created from a clean working dir?
Sep 17 11:21:52 <blueyed>	ok, I've seen https://github.com/neovim/neovim/issues/11031#issuecomment-532136373 - thanks for looking into it.
Sep 17 11:22:29 <LeoNerd>	Yep, a bug in my `make dist` target :(
Sep 17 11:22:41 <LeoNerd>	Or rather, a bug in my applying it
Sep 17 11:33:52 <LeoNerd>	libvterm-0.1.1 at http://www.leonerd.org.uk/code/libvterm/
Sep 17 11:38:27 <BjrnLinseGitter[>	:sparkles:
Sep 17 12:29:51 <blueyed>	LeoNerd: LeoNerd thanks!  is this pushed to bzr already?  What's you take on switching to Git btw?
Sep 17 12:56:16 <LeoNerd>	blueyed: It's pushed to my RELEASE-0.1 branch. Currently I've been doing the reflow development work on mainline so not releaseable there yet. I should have done that on a feature branch really.
Sep 17 13:00:26 <blueyed>	LeoNerd: is this a local branch only thenß]
Sep 17 13:26:59 <LeoNerd>	blueyed: it's at http://bazaar.leonerd.org.uk/c/libvterm.RELEASE-0.1/
Sep 17 13:32:51 <blueyed>	LeoNerd: why not (also) on Launchpad?  This would allow to have all the branches in a single repo (I am using https://github.com/felipec/git-remote-bzr).
Sep 17 13:33:17 <blueyed>	LeoNerd: or do you have a repo with all branches on bazaar.leonerd.org?
Sep 17 13:33:28 <LeoNerd>	Hmm. Unsure if LP does multiple branches. In any case this is a bit of a one-off special; usually I'd keep releases from mainline and do unstable dev on branches
Sep 17 13:33:50 <LeoNerd>	bazaar.lou is the primary upstream
Sep 17 13:34:01 <blueyed>	(not so important I guess, since I can add it as separate remote, but it certainly makes the bzr experience more unpleasant ;))
Sep 17 13:34:15 <LeoNerd>	It just lives behind my home VDSL line, so I prefer to point external folks at LP for official releases and so on
Sep 17 13:34:39 <LeoNerd>	Though at this point most folks should be using the release tarballs anyhow
Sep 17 13:35:06 <blueyed>	..which are still hosted on your vdsl then, no?
Sep 17 13:35:38 <LeoNerd>	Nope - they're on LP or www.lou which lives on my digitalocean VM
Sep 17 13:36:28 <LeoNerd>	www.lou is a mirror of home.lou which _does_ live at home. :)
Sep 17 18:42:58 <Research>	Is there builtin functionality/a plugin for editing remote buffers in nvim?
Sep 17 18:43:14 <Research>	e.g. opening a buffer over ssh
Sep 17 19:51:39 <doubleloop[m]>	Research: editing over ssh is implemented in for example in mirror.vim (https://github.com/zenbro/mirror.vim) although this plugin is designed for particular use case
Sep 17 19:53:50 <Research>	well my goal was to use it for remote note taking
Sep 17 19:54:45 <LeoNerd>	I usually just use sshfs for that
Sep 17 19:54:57 <LeoNerd>	Advantage is that it isn't specific to my editor; so any local filesystem tools work just fine
Sep 17 19:57:16 <Research>	I thought about just having a couple special commands like :NoteAdd and :NoteEdit for quickly managing a handful of notes
Sep 17 19:58:06 <Research>	LeoNerd, would mounting/unmounting sshfs whenever needed be feasible?
Sep 17 19:58:50 <LeoNerd>	Hrm, adhoc mount,.. not sure. I usually just start/stop it when required
Sep 17 20:00:04 <BjrnLinseGitter[>	there is also `:e scp://hostname/path/to/file` (via netrw, included by default)
Sep 17 20:00:16 <LeoNerd>	Yah, that also exists
Sep 17 20:00:19 <Research>	It would be nice to implement it so I don't have to think about mounting it first
Sep 17 20:00:39 <LeoNerd>	Basically you want a per-user automounter for sshfs
Sep 17 20:00:42 <Research>	oh that sounds really straightforward
Sep 17 20:01:24 <Research>	I wonder if scp would be easier to just plug in and use since it doesn't need a mount point?
Sep 17 20:12:11 <oats>	hi there, for anyone using coc.nvim, is there a way to disable linting entirely? I prefer to use ALE for linting, and I don't want them to conflict.
Sep 17 20:13:32 <LeoNerd>	(It's questions like that which amuse me, about the great variety of terminology in computing projects. Using ALE for linting with coc.)
Sep 17 20:15:30 <oats>	hehe
Sep 17 20:30:10 <jaawerth>	oats: it'll depend on which CoC extension/languagueserver you're using. the various coc plugins have their own sets of config options depending on how they were written
Sep 17 20:30:24 <oats>	jaawerth: ah ok, thanks :)
Sep 17 20:30:37 <jaawerth>	I haven't put much time into getting them to play nice together, but one gotcha I do know about is https://github.com/neoclide/coc.nvim/wiki/F.A.Q#why-vims-location-list-not-work-sometimes
Sep 17 20:35:31 <Research>	I know LanguageServer-neovim has a flag for disabling all linting
Sep 17 20:37:50 <FranciscoLopesGi>	oats: https://github.com/neoclide/coc.nvim/blob/master/data/schema.json#L28
Sep 17 20:41:36 <FranciscoLopesGi>	or https://github.com/neoclide/coc.nvim/blob/master/doc/coc.txt#L282
Sep 17 20:45:59 <jaawerth>	ahh good call. that'd just restrict CoC's role to completion only right?
Sep 17 20:47:12 <jaawerth>	well nah that's ignoring the other various features that don't relate to reporting on diagnostics so I shouldn't say that
Sep 17 20:47:15 <jaawerth>	anyway, good call lol
Sep 17 20:52:47 <FranciscoLopesGi>	diagnostics relates to linting, not completion
Sep 17 22:43:51 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep 17 22:43:51 2019

**** BEGIN LOGGING AT Tue Sep 17 22:44:16 2019

Sep 17 22:44:16 *	Now talking on #neovim
Sep 17 22:44:16 *	Topic for #neovim is: Register with NickServ to talk | Vim fork focused on extensibility and usability -- https://github.com/neovim/neovim -- Help sustain Neovim: https://salt.bountysource.com/teams/neovim -- Gitter: https://gitter.im/neovim/neovim
Sep 17 22:44:16 *	Topic for #neovim set by jamessan!~jamessan@debian/developer/jamessan (Thu Sep 27 03:36:33 2018)
**** ENDING LOGGING AT Tue Sep 17 22:58:03 2019

**** BEGIN LOGGING AT Tue Sep 17 22:58:03 2019

