**** BEGIN LOGGING AT Sat Aug 31 11:21:34 2019

Aug 31 11:21:34 *	Now talking on #bash
Aug 31 11:21:34 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Aug 31 11:21:34 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Aug 31 11:21:34 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Aug 31 11:26:54 <lesshaste>	I have 401 files called primdemo2-0 to primdemo2-400 . How can I delete primdemo2-200+ that is all of them with the number 200 or more as the suffix?
Aug 31 11:27:22 <lesshaste>	actually they are called primdemo2-0.png to primdemo2-400.png
Aug 31 11:37:26 <manARMy>	https://paste.debian.net/1098134/
Aug 31 11:37:32 <manARMy>	Hello
Aug 31 11:38:04 <lesshaste>	hi
Aug 31 11:38:20 <manARMy>	Could I write that better?
Aug 31 11:48:34 <voldial>	I have a very expensive cat. It's |'ing lines to someone who thinks about each line for a long time. Can the cat detect that someone has lines already buffered and does not need any more? I want the cat to stop sending and go to sleep until someone is ready.
Aug 31 11:49:57 <manARMy>	voldial: What breed?
Aug 31 11:50:09 <manARMy>	man dd ... fullblock   bs
Aug 31 11:54:41 <voldial>	manARMy: longhair postgres
Aug 31 11:55:40 <manARMy>	voldial: do you have dd if=fullblock?
Aug 31 11:55:54 <manARMy>	iflag=fullblock
Aug 31 11:56:31 <manARMy>	Otherwise it's a 5 line C program.
Aug 31 11:57:05 <voldial>	I'm reading that now... that's specific to the blocksize dd is reading from. my cat is looking up strings in a big pg database... I dont want it to keep quering when the | has more than X items in it (optimally just 1 or 2)
Aug 31 11:57:45 <manARMy>	I understand. iflag=fullblock means dd won't pass the buffer until it's full.
Aug 31 11:57:50 *	voldial will drop the cat now
Aug 31 11:58:06 <manARMy>	* cat lands on paws. *
Aug 31 11:59:02 <voldial>	this is really "cat file | grep something" where file is practically infinite, and grep hands the result to a long running process which must finish before it starts on the next line. is dd useful here?
Aug 31 11:59:36 <manARMy>	process file | dd iflag=fullblock bs=$(( 1024 * 1024 * 128 )) | grep something
Aug 31 12:00:08 <manARMy>	This helps the CPU cache.
Aug 31 12:00:22 <voldial>	but... mumble (hands flailing) I need to hand grep lines, not some part of a line...
Aug 31 12:01:25 <manARMy>	My example means that only "process" or "grep" is on the CPU cache at any given time.
Aug 31 12:01:40 <manARMy>	Just the one.
Aug 31 12:02:38 <lesshaste>	I have 500 files in a directory and some of them are duplicates. They are called prime-0.png to prime-499.png. I can see they are duplicated by running md5sum for example on them.
Aug 31 12:02:47 <lesshaste>	How can I delete the duplicate files so I am left with only one copy of each?
Aug 31 12:03:46 <manARMy>	lesshaste I would: 1. backup   2. rename them
Aug 31 12:04:18 <pj>	voldial: why not just run all of that in the background so it doesn't block further processing?
Aug 31 12:04:45 <voldial>	manARMy: I'm lost, but I'll try it. you picked a bs=128M, that almost never will align with the newline... so you must realize that... ah... it does not matter... for ref: cat inf_file_of_lines | tr '\n' '\0' | xargs -0 -I '{}' /usr/bin/expensive_calculator '{}'
Aug 31 12:06:10 <voldial>	pj: run which processes in the bg? I dont know how to detach "cat inf_file_of_lines" and still have it pipe... I want that cat to stop reading that file until the pipe is empty
Aug 31 12:06:49 <lesshaste>	manARMy, could you explain more? How does that remove the duplicates?
Aug 31 12:07:18 <pj>	voldial: also this does sound like uuoc
Aug 31 12:07:24 <pj>	!uuoc > voldial
Aug 31 12:07:24 <greybot>	voldial: Useless Use Of Cat (cat foo | grep bar). See https://mywiki.wooledge.org/BashFAQ/119 and http://www.iki.fi/era/unix/award.html#cat
Aug 31 12:07:29 <manARMy>	lesshaste: mv MD5abcd MD5abcd   overwrite
Aug 31 12:08:10 <manARMy>	lesshaste: Need to note the "stat" file numbers before hand.
Aug 31 12:08:24 <pj>	voldial: anyways, I mean to just background the whole thing as a group (run it in a subshell and background it).
Aug 31 12:08:32 <voldial>	lesshaste: find yourdir -type f -exec https://bpaste.net/show/T05p {} \;
Aug 31 12:08:34 <zztop>	for forever running services like vnc server, i have a bash script that does `while(1) run_the_thing`, so if the program crashes or whatever, bash will start it again, is this reliable?
Aug 31 12:09:17 <voldial>	(oops) lesshaste: find yourdir -type f -exec https://bpaste.net/show/T05p {} . \;
Aug 31 12:09:27 <manARMy>	zztop: Could in theory damage storage.
Aug 31 12:09:37 <pj>	zztop: seeing as that's not bash syntax, I would say it's not going to be reliable.
Aug 31 12:09:41 <zztop>	manARMy: how?
Aug 31 12:09:48 <voldial>	lesshaste: backup first.
Aug 31 12:09:57 <zztop>	pj: it's just pseudo code, even CS books use pseudo code
Aug 31 12:10:03 <manARMy>	zztop: I myself use the cron daemon to restart
Aug 31 12:10:21 <voldial>	pj: uuoc?
Aug 31 12:10:27 <zztop>	manARMy: well, that while(1) thing has been suggested by someone here time ago, btw
Aug 31 12:10:32 <pj>	voldial: read the factoid.
Aug 31 12:10:38 <zztop>	manARMy: how that can damage storage?
Aug 31 12:10:59 <manARMy>	After write 10000 times to one sector HDD damage
Aug 31 12:11:14 <voldial>	pj: ah. no I was just using cat as a example. my real app isnt getting fed by the cat:)
Aug 31 12:11:44 <pj>	zztop: well if the wrapper script is killed then it won't "run_the_thing" if it dies.  I prefer using cron for better reliability.
Aug 31 12:11:45 <zztop>	manARMy: what?!?! do you know how that thing works? bash will run that program once, and only when the program crashes  the while(1) will do a second cycle!
Aug 31 12:12:19 <zztop>	pj: yeah, that's a point. Someone is telling me i should use systemd
Aug 31 12:12:37 <pj>	systemd is not a bad idea either.
Aug 31 12:13:21 <voldial>	lemme know if you want someone to tell you otherwise.
Aug 31 12:13:26 <pj>	voldial: anyways, you can do something like: `cat foo | bar &' and then your script will carry on after that line and not have to wait for it to complete.
Aug 31 12:13:33 <pj>	!& > voldial
Aug 31 12:13:33 <greybot>	voldial: If you put the control operator & at the end of a command, e.g. ''command args &'', the shell executes the command in the background in a subshell. The shell does not wait for the command to finish, and the return status is 0. Pid of the last backgrounded command is available via the special variable $!
Aug 31 12:14:22 <voldial>	pj: thx, ya I understand that. the problem is the real cat will eat my cpu buffering results that are not needed yet.
Aug 31 12:16:05 <pj>	oh ok, I thought you were just worried about it blocking your script.
Aug 31 12:16:32 <voldial>	ya, I think the dd fullblock thing is right. testing
Aug 31 12:27:15 <esselfe>	how do I disable a shell builtin (kill)
Aug 31 12:29:03 <voldial>	heh. I didnt know there were 2 killers
Aug 31 12:30:12 <pj>	write a function to replace it and hope they don't use the kill binary instead.
Aug 31 12:30:20 <voldial>	esselfe: alias kill="/bin/kill"
Aug 31 12:30:25 <geirha>	esselfe: you can enable and disable builtins with the enable builtin, but why would you want to disable the builtin kill?
Aug 31 12:30:48 <esselfe>	voldial: thanks
Aug 31 12:31:15 <pj>	and yeah, this sounds like a misdirected sense of someone trying to secure their system.
Aug 31 12:31:27 <esselfe>	geirha: because my IRC bot is executing it with ^sh, but it shouldn't be able to kill itself
Aug 31 12:31:44 <geirha>	o_O
Aug 31 12:32:04 <voldial>	your bot is executing local commands;/? e gads.
Aug 31 12:32:30 <pj>	fix the bot, don't cripple your system.
Aug 31 12:32:54 <voldial>	is it for RC?
Aug 31 12:34:43 <esselfe>	voldial: it's running system() calls within a vm
Aug 31 12:35:10 <voldial>	right. why not ssh/
Aug 31 12:35:50 <voldial>	it's fw punching?
Aug 31 12:36:51 <geirha>	so it'll be easy to break your bot in other words
Aug 31 12:37:01 <geirha>	disabling kill just moves the goal post a few centimetres
Aug 31 12:38:54 <pj>	so you have a sh command for your bot that spawns a shell and can execute anything including killing the bot itself?  wow.
Aug 31 12:40:21 <voldial>	!help
Aug 31 12:40:21 <greybot>	I can do: !faq {number|string}, !pf {number|string}, !learn key value, !meta key, !metaurl key, !forget key, !searchkeys string, !factstats, !faqstats, !faqpages, !date, !version. For help with Bash builtins, use "help command" in bash.
Aug 31 12:40:30 <pj>	actually if you really want to be able to run shell commands from your bot, I would recommend doing it in a sandbox like shbot does.  In fact, the code for shbot is publicly available, I think.
Aug 31 12:40:32 <pj>	!shbot
Aug 31 12:40:33 <greybot>	shbot runs each session in a new VM as root. Feel free to play with the bot in #evalbot. | Original: http://www.vidarholen.net/contents/evalbot/ | geirha's fork: https://github.com/geirha/shbot | current triggers: /msg shbot triggers
Aug 31 12:43:35 <voldial>	!shbot whereis kill
Aug 31 12:43:49 <voldial>	:(
Aug 31 12:44:29 <pj>	# whereis kill
Aug 31 12:44:31 <shbot>	pj: bash: whereis: command not found
Aug 31 12:44:55 <voldial>	shbot isnt bash;)?
Aug 31 12:45:16 <pj>	of course it is, what makes you think whereis is bash?
Aug 31 12:45:18 <nil>	no, whereis isn't bash
Aug 31 12:45:26 <voldial>	eh. my mistake. thought that was builtin
Aug 31 12:45:44 <geirha>	# type -a kill
Aug 31 12:45:45 <shbot>	geirha: kill is a shell builtin
Aug 31 12:45:45 <shbot>	geirha: kill is /bin/kill
Aug 31 12:46:14 <voldial>	# pidof shbot
Aug 31 12:46:16 <shbot>	voldial: bash: pidof: command not found
Aug 31 12:46:47 <pj>	voldial: shbot does not run in the sandbox, there is nothing to kill.
Aug 31 12:46:55 <geirha>	the bot runs on the host, the commands it runs in a VM it spawns each time
Aug 31 12:47:25 <pj>	# ps uax
Aug 31 12:47:29 <shbot>	pj: USER      PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
Aug 31 12:47:29 <shbot>	pj: root        1 89.2  2.3  12000  2900 ?        S    10:47   0:03 /bin/bash4 /init
Aug 31 12:47:29 <shbot>	pj: etc... ( http://ix.io/1TSV )
Aug 31 12:47:35 <voldial>	ah.
Aug 31 12:48:03 <pj>	there you can see everything that is actually running in the VM ^^^^
Aug 31 12:48:49 <voldial>	# file /init
Aug 31 12:48:50 <shbot>	voldial: /init: Bourne-Again shell script, ASCII text executable
Aug 31 12:49:00 <voldial>	# cat /init
Aug 31 12:49:03 <shbot>	voldial: #!/bin/bash4
Aug 31 12:49:03 <shbot>	voldial: shopt -s extglob
Aug 31 12:49:03 <shbot>	voldial: etc... ( http://ix.io/1zFc )
Aug 31 12:49:33 <voldial>	I like it
Aug 31 12:50:12 <voldial>	# ls /bin
Aug 31 12:50:14 <shbot>	voldial: '['         bunzip2    echo       iconv       mksh      rm        tsort
Aug 31 12:50:14 <shbot>	voldial:  adu        bzcat      ed         id          mktemp    rmdir     tty
Aug 31 12:50:14 <shbot>	voldial: etc... ( http://ix.io/1Cnn )
Aug 31 12:50:26 <pj>	voldial: feel free to continue to play around with the bot in PM.
Aug 31 12:51:14 <voldial>	I'll stop :) back to work
Aug 31 15:11:51 <mknod>	Hello. Has anyone else had problems using ffmpeg in process substitution?
Aug 31 15:13:36 <lopid>	!ffmpeg
Aug 31 15:13:37 <greybot>	http://mywiki.wooledge.org/BashFAQ/089 -- I'm using a loop which runs once per line of input but it only seems to run once; everything after the first line is ignored?
Aug 31 15:13:50 <mknod>	this works: ffmpeg -i music.m4a -f singlejpeg - > /dev/null
Aug 31 15:14:13 <mknod>	this DOESN'T work: cat <(ffmpeg -i music.m4a -f singlejpeg -) > /dev/null
Aug 31 15:16:20 <twkm>	in one stdout is redirected, in the other it is a pipe.
Aug 31 15:20:24 <mknod>	twkm, I can't remember when was the last time I wrote a line of Bash but I'm pretty confident that these two examples above should yield the same result
Aug 31 15:20:47 <twkm>	yet [repeat:] in one stdout is redirected, in the other it is a pipe.
Aug 31 15:22:21 <mknod>	I'm failing to understand the obvious
Aug 31 15:23:19 <twkm>	#ffmpeg may know.
Aug 31 15:24:10 <mknod>	I'm considering it, though Bash is equally involved here
Aug 31 15:24:50 <twkm>	nope.
Aug 31 15:25:20 <twkm>	apart from you choosing redirection vs a pipe and bash obeying you.
Aug 31 15:25:55 <twkm>	it is ffmpeg that decides whether it likes one and/or the other.
Aug 31 15:30:05 <lopid>	same would happen in another shell
Aug 31 15:30:53 <mknod>	let's see if the ffmpeg folks know what's a process substitution at all
Aug 31 15:32:04 <lopid>	they might get asked it a lot
Aug 31 15:32:49 <twkm>	so ask them about bash sytax because it is too hard to ask about whether a pipe matters?  okay, whatever.
Aug 31 15:36:10 <twkm>	in any case, be kind to them and define "not work".
Aug 31 15:36:20 <mknod>	I did.
Aug 31 15:36:27 <mknod>	it just "hangs".
Aug 31 15:50:18 <mknod>	[15:44:14]  <@durandal_1707>	mknod: from where you got that line?
Aug 31 15:50:19 <mknod>	[15:46:11]  <@durandal_1707>	i first time see that
Aug 31 15:50:19 <mknod>	[15:46:52]  <@durandal_1707>	which shell is that?
Aug 31 15:50:25 <mknod>	see my point now?
Aug 31 15:53:40 <mknod>	btw, ffmpeg seems to hang as soon as it's run in background
Aug 31 15:55:19 <lopid>	it's reading from stdin?
Aug 31 15:56:05 <mknod>	lopid, just found out that it was the issue :)
Aug 31 15:56:08 <twkm>	because you provided them with bash syntax, not the result of that syntax.
Aug 31 15:56:10 <mknod>	< /dev/null solved it
Aug 31 15:56:32 <lopid>	…which is given in the faq posted right at the start
Aug 31 15:57:30 <mknod>	lopid, the author must consider refining the title then
Aug 31 15:57:55 <lopid>	you didn't read it because of the title?
Aug 31 15:58:34 <mknod>	I did read it but moved away quickly.
Aug 31 16:35:52 <guardian>	hello, what's the proper syntax to make "command_a || command_b" happen in background? Is it { command_a || command_b; }& ?
Aug 31 16:36:13 <mknod>	yup
Aug 31 16:37:12 <guardian>	thanks
Aug 31 16:44:17 <lesshaste>	what does || do?
Aug 31 16:44:39 <lopid>	!||
Aug 31 16:44:39 <greybot>	Short-circuit control operators <http://mywiki.wooledge.org/BashSheet#Tests> A || B means "Run A. If A fails, run B." A && B means "Run A. If A succeeds, run B." Example: foobar || { echo "error" >&2; exit 1; }
Aug 31 17:02:08 <geirha>	guardian: a || b &  will also run both commands in the background
Aug 31 17:07:18 <mknod>	lopid, if you want to edit the FAQ entry
Aug 31 17:07:53 <mknod>	The -nostdin switch is another way to address this issue. More elegant in my opinion.
Aug 31 17:09:44 <lopid>	nice
Aug 31 17:09:55 <lopid>	a shame it is necessary
Aug 31 18:19:00 <classsic>	hi everybody
Aug 31 18:34:36 <a1fa>	hello.. i am trying to put a seq 0 10 into an array.. does this sound right.. ARRAY=($(seq 0 10))
Aug 31 18:35:03 <geirha>	array=( {0..10} )
Aug 31 18:36:05 <a1fa>	geirha: sorry  - i forgot to add | sort -R
Aug 31 18:36:20 <geirha>	in general though, to put the lines of a command into an array, use mapfile.   mapfile -t array < <(cmd)
Aug 31 18:36:27 <geirha>	also, use lowercase variable names
Aug 31 18:36:45 <geirha>	!faq random
Aug 31 18:36:46 <greybot>	https://mywiki.wooledge.org/BashFAQ/026 -- How can I randomize (shuffle) the order of lines in a file?  Or select a random line from a file, or select a random file from a directory?
Aug 31 18:40:25 <a1fa>	thank you
Aug 31 18:44:59 <aozt>	a1fa: you can use {10..1} to generate a list of numbers in reverse order
Aug 31 18:45:08 <aozt>	# printf %s\n {3..1}
Aug 31 18:45:10 <shbot>	aozt: 3n2n1n
Aug 31 18:45:16 <aozt>	sorry
Aug 31 18:45:18 <twkm>	depends on the version of bash.
Aug 31 18:45:20 <aozt>	# printf '%s\n' {3..1}
Aug 31 18:45:21 <shbot>	aozt: 3
Aug 31 18:45:21 <shbot>	aozt: 2
Aug 31 18:45:21 <shbot>	aozt: 1
Aug 31 18:45:42 <aozt>	maybe you will need to put in your script a run-time feature test for that
Aug 31 18:46:58 <aozt>	# if [[ $(printf '%s ' {3..1}) != "3 2 1 " ]]; then  printf >&2 'ERROR: use a newer version of bash, you!\n'; exit 1; fi
Aug 31 18:46:59 <shbot>	aozt: no output
Aug 31 18:47:05 <aozt>	2# if [[ $(printf '%s ' {3..1}) != "3 2 1 " ]]; then  printf >&2 'ERROR: use a newer version of bash, you!\n'; exit 1; fi
Aug 31 18:47:07 <shbot>	aozt: ERROR: use a newer version of bash, you!
Aug 31 18:47:07 <shbot>	aozt: logout
Aug 31 18:47:07 <shbot>	aozt: (shell exited with 1)
Aug 31 20:35:53 <fred1807>	is it safe to assume, I always better use printf, example: printf '%(%H:%I:%S)T', instead of date in my scripts?
Aug 31 20:41:47 <aozt>	fred1807: %(...)T format of printf is bash extension
Aug 31 20:42:54 <aozt>	unfortunately it cannot be used to print timestamps with nanosecond or even millisecond precision
Aug 31 20:43:38 <aozt>	yet GNU date can be used for that
Aug 31 20:44:25 <aozt>	# printf '%(%c %N)T\n'; echo vs.; date '+%c %N'
Aug 31 20:44:26 <shbot>	aozt: Sat Aug 31 18:44:25 2019 %N
Aug 31 20:44:26 <shbot>	aozt: vs.
Aug 31 20:44:26 <shbot>	aozt: Sat Aug 31 18:44:25 2019 254591389
Aug 31 20:45:52 <aozt>	%N format is extension of GNU date...
Aug 31 20:46:04 <aozt>	and %(...)T is the extension of GNU bash
Aug 31 20:46:41 <aozt>	in this battle of GNU extensions the one that is in date wins, in my opinion
Aug 31 20:48:32 <aozt>	GNU find can also print timestamps with nanosecond precision
Aug 31 20:49:11 <aozt>	# find .bashrc -printf '%a\n'
Aug 31 20:49:12 <shbot>	aozt: Sat Aug 31 18:49:11.1519999960 2019
Aug 31 20:53:48 <Soo_Slow>	does anybody there use jq with bash? Im using it to quickly verify json files with bash (jq -f ./filename.json). If there are errors - it reports them, if there is nothing wrong - command just keep going forever. Is there any way to make it stop in that case and echo "Success"? Or maybe some other flag to make it go without printing the whole json file into terminal?
Aug 31 20:57:19 *	aozt just did  echo { | jq .; echo "$?"
Aug 31 20:57:28 <aozt>	and the reported termination status was 0
Aug 31 20:58:21 <aozt>	did    echo '{"' | jq .; echo "$?"    and the status was also 0
Aug 31 20:59:10 <aozt>	it seems, at least for me, jq does not report any errors when invalid JSON data gets piped into it
Aug 31 20:59:42 <aozt>	or do you have some filter program that does some specific checks of your json files?
Aug 31 21:01:07 <Soo_Slow>	https://bpaste.net/show/DMXd aozt
Aug 31 21:01:16 <Soo_Slow>	when json contain error, it reports them
Aug 31 21:02:21 <aozt>	it seems that bpaste.net is forbidden in my country or something.  i cannot open any paste placed on this site
Aug 31 21:02:47 <Soo_Slow>	https://pastebin.com/zkXqj6iB
Aug 31 21:02:47 <pasteban>	Paste is available without ads on http://pastebin.com/raw/zkXqj6iB
Aug 31 21:03:08 <Soo_Slow>	and with 'jq "." ./brokenjson.json', output will be
Aug 31 21:03:18 <Soo_Slow>	'parse error: Expected separator between values at line 6, column 16'
Aug 31 21:03:28 <Soo_Slow>	so it DOES report errors if they happen
Aug 31 21:03:42 <aozt>	you are misusing your jq
Aug 31 21:03:50 <Soo_Slow>	why so?
Aug 31 21:04:02 <aozt>	-f option is for specifying a filter program
Aug 31 21:04:12 <Soo_Slow>	maybe
Aug 31 21:04:26 <aozt>	the filter program will be compiled, then jq will expect data on stdin and filter it
Aug 31 21:04:40 <aozt>	you are seeing compilation errors
Aug 31 21:04:52 <aozt>	the trivial filter program is  .
Aug 31 21:04:58 <Soo_Slow>	but then again - if file is fine, 'jq "." ./filename.json' will print whole json's content
Aug 31 21:05:10 <Soo_Slow>	while I just need to print something like "No errors were found"
Aug 31 21:06:00 <aozt>	i just checked, and it seems that jq (at least without of any special options) just does not check for errors in JSON data
Aug 31 21:06:28 <Soo_Slow>	but in my case it does
Aug 31 21:06:42 <Soo_Slow>	did you compile it by your own or get from some repo?
Aug 31 21:06:49 <aozt>	# echo '{ ' | jq .
Aug 31 21:06:51 <shbot>	aozt: parse error: Unfinished JSON term at EOF at line 2, column 0
Aug 31 21:07:11 <aozt>	i have jq-1.5-1-a5b5cbe
Aug 31 21:07:28 <aozt>	# jq --version
Aug 31 21:07:28 <Soo_Slow>	shbot just reported you error
Aug 31 21:07:29 <shbot>	aozt: jq-1.6-17-g61cd6db-dirty
Aug 31 21:08:11 <aozt>	it seems that reports about parsing errors is a feature that was added only recently...
Aug 31 21:08:55 <Soo_Slow>	probably
Aug 31 21:08:56 <go|dfish>	1.5 does too, it's just that it had a lot of edge cases about allowing invalid json through
Aug 31 21:09:11 <aozt>	or maybe my version has a bug because of which such invalid JSON data as { and {" are just ignored...
Aug 31 21:09:16 <go|dfish>	Soo_Slow: sounds like you just want to discard jq's output
Aug 31 21:09:23 <aozt>	# echo '{ ' | jq .; echo $?
Aug 31 21:09:25 <shbot>	aozt: parse error: Unfinished JSON term at EOF at line 2, column 0
Aug 31 21:09:25 <shbot>	aozt: 0
Aug 31 21:09:37 <aozt>	it still terminates with return status of success
Aug 31 21:09:38 <Soo_Slow>	go|dfish, only in case there are no errors. But probably
Aug 31 21:09:38 <go|dfish>	ouch
Aug 31 21:09:59 <go|dfish>	# echo '{"lol' | jq .; echo $?
Aug 31 21:10:00 <shbot>	go|dfish: parse error: Unfinished string at EOF at line 2, column 0
Aug 31 21:10:01 <shbot>	go|dfish: 0
Aug 31 21:10:07 <go|dfish>	hashtag rekt
Aug 31 21:10:59 <Soo_Slow>	# echo '{ ' | jq .&& echo $?
Aug 31 21:11:02 <shbot>	Soo_Slow: parse error: Unfinished JSON term at EOF at line 2, column 0
Aug 31 21:11:02 <shbot>	Soo_Slow: 0
Aug 31 21:11:21 <go|dfish>	looks like -e was added?
Aug 31 21:11:28 <go|dfish>	# echo '{"lol' | jq -e .; echo $?
Aug 31 21:11:30 <shbot>	go|dfish: parse error: Unfinished string at EOF at line 2, column 0
Aug 31 21:11:30 <shbot>	go|dfish: 4
Aug 31 21:12:08 <aozt>	-e affects return status in a weird way
Aug 31 21:12:15 <aozt>	# jq_stderr=$(echo '{ ' | jq . 3>&1 >/dev/null 2>&3);  if [[ -z $jq_stderr ]]; then  echo no errors;  else  echo there were errors;  fi
Aug 31 21:12:17 <shbot>	aozt: there were errors
Aug 31 21:12:25 <aozt>	# jq_stderr=$(echo '{} ' | jq . 3>&1 >/dev/null 2>&3);  if [[ -z $jq_stderr ]]; then  echo no errors;  else  echo there were errors;  fi
Aug 31 21:12:27 <shbot>	aozt: no errors
Aug 31 21:13:09 <aozt>	"no errors" = nothing was printed on stderr while jq was running
Aug 31 21:15:14 <Soo_Slow>	maybe I should send jq's output to grep and if there are no error messages (grep's output is empty) - echo 'success'?
Aug 31 21:15:37 <Soo_Slow>	(otherway print errors)
Aug 31 21:15:43 <aozt>	you can capture stderr output of jq using redirections
Aug 31 21:15:58 <Soo_Slow>	but you've just said that jq's stderr is broken, no?
Aug 31 21:17:55 <aozt>	i didn't say that stderr is broken, i noticed that jq just silently ignores some sorts of malformed JSON, at least in my version
Aug 31 21:18:46 <aozt>	it seems natural that if there are no parsing errors, then there will be no messages on stderr
Aug 31 21:20:12 <aozt>	you can capture stderr of a program using the  3>&1 >/dev/null 2>&3  sequence of redirections, then you can use -z test of [[ ... ]] command (or [ -z "$var" ], or test -z "$var")) to check if variable is empty
Aug 31 21:21:32 <aozt>	(to check if contents of the variable, the text stored in the buffer referenced by the variable, is an empty string)
Aug 31 21:25:57 <aozt>	maybe, if you want to bail out early and avoid saving all the log of errors in memory, it makes sense to read at most one byte of output
Aug 31 21:26:05 <kerframil>	wouldn't using -e then checking whether ? > 1 do?
Aug 31 21:26:12 <kerframil>	$? even
Aug 31 21:26:13 <aozt>	in bash, read -r -N1 can be used for that
Aug 31 21:26:29 <lavalike>	what is the bot command that explains that 2&>1 is position dependent in your redirections?
Aug 31 21:28:00 <aozt>	kerframil: manpage says, that jq will exit with 4 "if no valid result was ever produced"
Aug 31 21:29:14 <aozt>	kerframil: maybe some valid result will be produced, even if there will be some parsing errors.  or is this guess of mine wrong?
Aug 31 21:30:53 <kerframil>	aozt: I thought not but I'm by no means certain. I gave up upon jq because of these quirks and now use jshon. I know jq is more powerful but when it gets to that point, I would find myself reaching for something other than bash.
Aug 31 21:31:22 <kerframil>	4 does cover the invalid JSON case, at least.
Aug 31 21:31:23 <aozt>	Soo_Slow: if you trust kerframil and his suggestion to use -e option to check that the return status is 4 or not 4 (it should be 4 in case of parsing error), then you can use this method
Aug 31 21:31:58 <mknod>	Soo_Slow: never trust kerframil!
Aug 31 21:32:21 <kerframil>	well, if you do, test (( $? > 1 )), I think. 2 and 3 are both valid reasons to bail out.
Aug 31 21:32:22 <aozt>	# echo Soo_Slow: | jq -e >/dev/null 2>&1; jq_ret=$?;  if [[ $jq_ret == 4 ]]; then  echo  parsing errors;  else  echo no errors;  fi
Aug 31 21:32:23 <shbot>	aozt: no errors
Aug 31 21:32:35 <aozt>	no way
Aug 31 21:32:36 <kerframil>	along with 4.
Aug 31 21:32:43 <aozt>	# echo Soo_Slow: | jq -e . >/dev/null 2>&1; jq_ret=$?;  if [[ $jq_ret == 4 ]]; then  echo  parsing errors;  else  echo no errors;  fi
Aug 31 21:32:45 <shbot>	aozt: parsing errors
Aug 31 21:33:03 <aozt>	# echo '  "Soo_Slow:" ' | jq -e . >/dev/null 2>&1; jq_ret=$?;  if [[ $jq_ret == 4 ]]; then  echo  parsing errors;  else  echo no errors;  fi
Aug 31 21:33:05 <shbot>	aozt: no errors
Aug 31 21:33:41 <kerframil>	# echo '  "Soo_Slow:" ' | jq -e . &>/dev/null; (( $? > 1 )) && echo "errors"
Aug 31 21:33:43 <shbot>	kerframil: no output
Aug 31 21:33:47 <kerframil>	hmm
Aug 31 21:34:15 <kerframil>	well, that sucks.
Aug 31 21:34:44 <aozt>	"Soo_Slow:" is valid JSON, it is a string in double quotes
Aug 31 21:35:23 <kerframil>	oh, so it doesn't need an array or object then. ok.
Aug 31 21:35:34 <kerframil>	jshon would reject that.
Aug 31 21:36:37 <kerframil>	anyway, 1 is definitely the not-necessarily-bad exit status value.
Aug 31 21:37:06 <aozt>	Soo_Slow: ok, if you think it is safe for you to do that,   ... | jq -e . &>/dev/null;  (($? > 1)) && echo errors    is not the worst approach, it seems
Aug 31 21:37:21 <Soo_Slow>	uuhhhh
Aug 31 21:37:22 <Soo_Slow>	thanks :D
Aug 31 21:38:06 <aozt>	Soo_Slow: when using $?, it's recommended to instantly save it to some variable
Aug 31 21:39:04 <aozt>	because checks like   if [[ $? == 3 ]] || [[ $? == 4 ]]; then ... fi   will NOT WORK with $? because of natural properties of $?
Aug 31 21:39:42 <Soo_Slow>	didnt know
Aug 31 21:40:59 <aozt>	you should typically immediately assign the status returned by $? to some variable, preferably on the same line where the command is called (to avoid inserting by mistake another command between the command status of which you want to save and the assignment of $? to a variable)
Aug 31 21:41:03 <kerframil>	how about wrapping it? jq() { command jq -e "$@"; (( $? < 1 )); }
Aug 31 21:41:40 <kerframil>	er, (( $? < 2 )), sorry
Aug 31 21:42:20 <kerframil>	then if jq ... should work as expected. hopefully.
Sep 02 08:51:42 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep  2 08:51:42 2019

**** BEGIN LOGGING AT Mon Sep  2 08:52:09 2019

Sep 02 08:52:09 *	Now talking on #bash
Sep 02 08:52:09 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 02 08:52:09 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 02 08:52:09 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 02 09:05:49 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep  2 09:05:49 2019

**** BEGIN LOGGING AT Mon Sep  2 09:06:12 2019

Sep 02 09:06:12 *	Now talking on #bash
Sep 02 09:06:12 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 02 09:06:12 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 02 09:06:12 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 02 09:06:16 <pj>	Kira: as best as I can tell it dates back to the original bourne shell (/bin/sh).  Some googling shows these explanations: https://superuser.com/questions/57575/what-is-the-origin-of-the-unix-dollar-prompt https://unix.stackexchange.com/questions/291729/why-is-the-default-symbol-for-a-user-shell-and-the-default-symbol-for-a-root
Sep 02 09:07:43 <Kira>	ah, I saw the one on superuser.com, but not the one on unix stackexchange.
Sep 02 09:08:10 <Kira>	Looks like the one at unix stackexchange provides a better explanation.
Sep 02 09:09:52 <xeon>	regex question: how to match 0 to (up to) 5 spaces?
Sep 02 09:15:03 <stockholm>	so i have a bash script started from systemd as a service, and inside that script i do while true; do ...; find . | entr -dn "directory changed"; done. My problem is that my startup script is really slow (1:30min - systemctl timeout) to restart. i thought it might have been entr not dying when receiving TERM, but can it be the while; do; done loop restats the entr process that i keep seeing?
Sep 02 09:16:57 <xeon>	regex question: how to match as many as possible but at most 5 spaces?
Sep 02 09:27:20 <osse>	xeon: usually something like   x \{0,5}y
Sep 02 09:37:54 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep  2 09:37:54 2019

**** BEGIN LOGGING AT Mon Sep  2 09:38:17 2019

Sep 02 09:38:17 *	Now talking on #bash
Sep 02 09:38:17 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 02 09:38:17 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 02 09:38:17 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 02 09:50:18 <stockholm>	geirha: the while loop wont the restart the pileline over and over again, though, will it?
Sep 02 09:50:39 <geirha>	no
Sep 02 09:50:44 <stockholm>	geirha: can i end the pipeline?
Sep 02 09:51:11 <geirha>	if you run it in the background, and wait for it with wait, a TERM signal will interrupt it immediately
Sep 02 09:51:23 <geirha>	In that case you'll want to set a trap that kills the pipeline on exit though
Sep 02 09:52:25 <stockholm>	i can sure run it in the background... currently i dont. how do i set a trap for the pipeline? catch it's PID and send it a term?
Sep 02 09:52:28 <stockholm>	TERM
Sep 02 09:53:20 <geirha>	yeah
Sep 02 09:53:21 <stockholm>	i use a trap for TERM already for other cleanup, i would need to set a new one in each loop, right?
Sep 02 09:53:47 <geirha>	no, one will do
Sep 02 09:53:58 <geirha>	*once
Sep 02 09:55:23 <stockholm>	hu? the PID inside the loop with change each time.
Sep 02 09:55:52 <geirha>	yes, but you store it in the same variable each time, which the trap can access
Sep 02 09:56:26 <geirha>	trap 'if [[ $pid ]]; then kill "$pid"; fi' EXIT
Sep 02 10:18:26 <CrtxReavr>	I need a way to print lines with less than 3 commas with sed preferable.
Sep 02 10:20:36 <survietamine>	no idea why sed, but you can ask in its channel
Sep 02 10:20:52 <CrtxReavr>	grep then?
Sep 02 10:20:56 <CrtxReavr>	I'm easy I ugess.
Sep 02 10:20:57 <CrtxReavr>	guess
Sep 02 10:22:51 <pj>	grep is easy, sed probably is as well: grep -v ',.*,.*,'
Sep 02 10:24:22 <CrtxReavr>	Thanks.
Sep 02 10:24:36 <CrtxReavr>	I was hell-bent on trying to escape the comas.
Sep 02 10:29:51 <Patsie>	sed -n '/,.*,.*,/p'
Sep 02 10:31:40 <RastaBusta2x>	schedule it every 15 minutes needs xcowsay installed https://www.datafilehost.com/d/1ec1001f
Sep 02 10:34:22 <geirha>	awk -F, 'NF <= 3'
Sep 02 10:37:44 <Soliton>	for certain interpretations of less than.
Sep 02 11:06:22 <wuseman>	CrtxReavr: for sed as asked:
Sep 02 11:06:26 <wuseman>	# echo "a,b,c,d,e,f,g,h" |  sed 's/,/\n/3;P;d'
Sep 02 11:06:28 <shbot>	wuseman: a,b,c
Sep 02 11:06:34 <wuseman>	echo "a,b,c,d,e,f,g,h" |  sed -r 's/([^,]+,)([^,]+,)([^,]+).*/\1\2\3/'
Sep 02 11:06:47 <wuseman>	or echo "a,b,c,d,e,f,g,h" |  sed -r 's/(([^,]+,){2}([^,]+)).*/\1/'
Sep 02 11:08:20 <Soliton>	# echo ",b,c,d,e,f,g,h" |  sed -r 's/(([^,]+,){2}([^,]+)).*/\1/'
Sep 02 11:08:22 <shbot>	Soliton: ,b,c,d
Sep 02 11:09:37 <Soliton>	none of those are portable, btw.
Sep 02 11:12:28 <pj>	or with pure bash: while IFS= read -r line; do [[ $line == ,*,*, ]] || echo "$line"; done < filename
Sep 02 11:12:32 <pj>	untested ^^^^
Sep 02 11:15:45 <wuseman>	hehe
Sep 02 11:16:04 <wuseman>	the most simple one I think is
Sep 02 11:16:08 <wuseman>	# echo "b,c,d,e,f,g,h" | sed 's/,[^,]*//3g'
Sep 02 11:16:09 <shbot>	wuseman: b,c,d
Sep 02 11:16:14 <wuseman>	sed ftw !!!
Sep 02 11:17:05 <wuseman>	last is for gnu/sed
Sep 02 11:24:37 <b0tanik>	.7
Sep 02 11:39:32 <geirha>	what, the awk isn't simple enough?
Sep 02 11:40:06 <wuseman>	If it would work, sure
Sep 02 11:40:18 <wuseman>	# echo "a,b,c,d,e,f,g,h" | awk -F, 'NF <= 3'
Sep 02 11:40:19 <shbot>	wuseman: no output
Sep 02 11:40:40 <geirha>	the line has more than 3 commas, so it shouldn't print
Sep 02 11:42:27 <survietamine>	hehe
Sep 02 11:43:19 <geirha>	# printf '%s\n' a,b a,b,c a,b,c,d | awk -F, 'NF <= 3'
Sep 02 11:43:21 <shbot>	geirha: a,b
Sep 02 11:43:21 <shbot>	geirha: a,b,c
Sep 02 11:53:50 <survietamine>	# printf '%s\n' a,b a,b,c a,b,c,d | sed 's/,[^,]*//3g'
Sep 02 11:53:51 <shbot>	survietamine: a,b
Sep 02 11:53:51 <shbot>	survietamine: a,b,c
Sep 02 11:53:51 <shbot>	survietamine: a,b,c
Sep 02 11:54:21 <geirha>	mh, printing the lines that fit, vs modifying the lines to fit
Sep 02 11:54:41 <survietamine>	yeah, that's why I answered "no idea why sed'
Sep 02 11:54:49 <survietamine>	imho, it's not proper tool
Sep 02 11:54:56 <wuseman>	nope
Sep 02 12:03:58 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep  2 12:03:58 2019

**** BEGIN LOGGING AT Mon Sep  2 12:04:25 2019

Sep 02 12:04:25 *	Now talking on #bash
Sep 02 12:04:25 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 02 12:04:25 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 02 12:04:25 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 02 12:54:33 <andre144k>	hi all.. anyone know a shortcut to change insde "mc" active folder to folder from other window-side?
Sep 02 12:54:53 <andre144k>	so that both folders are same?
Sep 02 12:57:04 <jan6>	!nabq
Sep 02 12:57:04 <greybot>	Not a #bash question. We're no experts in that software or OS; consider asking the channel or mailing list with experts on that topic (eg. ##linux #openssh #ubuntu #zsh #systemd).
Sep 02 12:59:08 <jan6>	andre144k: ^ not a bash question, ##linux MIGHT know, but they're not the "correct" channel either, but at least they're a general channel, mc has nothing to do with bash or shells tho, so definitely doesn't belong here ,P
Sep 02 12:59:44 <andre144k>	yes i knw - i thougt maybe someone knows :)
Sep 02 13:56:00 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep  2 13:56:00 2019

**** BEGIN LOGGING AT Mon Sep  2 13:56:26 2019

Sep 02 13:56:26 *	Now talking on #bash
Sep 02 13:56:26 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 02 13:56:26 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 02 13:56:26 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 02 15:05:25 <fred1807>	is there a global way (gnu/posix/osx/linux) to test if time is am or pm ?
Sep 02 15:06:51 <jan6>	use logic and reasoning? ;P
Sep 02 15:07:39 <twkm>	not everwhere believes in am vs pm.
Sep 02 15:08:31 <kerframil>	which time ... the current time? an arbitrary time?
Sep 02 15:09:14 <twkm>	but something like shopt -s nocasematch; case $(date +%X) in *AM*) ...;; *PM*) ...;; *) ...;; esac might work for you.
Sep 02 15:09:45 <Patsie>	# date +%X
Sep 02 15:09:46 <shbot>	Patsie: 13:09:45
Sep 02 15:10:02 <Patsie>	I guess taht falls under the *) category then :)
Sep 02 15:10:03 <kerframil>	# date +%r
Sep 02 15:10:04 <shbot>	kerframil: 01:10:03 PM
Sep 02 15:10:06 <twkm>	thus my first response and the *).
Sep 02 15:11:06 <jan6>	# date +%p
Sep 02 15:11:07 <twkm>	now one might say, idgaf, in which case you might LC_TIME=en_US for date.
Sep 02 15:11:08 <shbot>	jan6: PM
Sep 02 15:11:11 <jan6>	;P
Sep 02 15:11:26 <jan6>	%p is locale-specific, but otherwise nice
Sep 02 15:13:43 <jan6>	# if test "$(date +%H)" -gt 12 ; then echo "PM" ; else echo "AM" ; fi
Sep 02 15:13:44 <shbot>	jan6: PM
Sep 02 15:14:11 <Patsie>	-ge 12
Sep 02 15:14:16 <jan6>	[[ instead of "test" ]] for bash could be better, but still
Sep 02 15:14:18 <jan6>	that too
Sep 02 15:15:15 *	jan6 doesn't know midnight/day am-pm-ness ;P
Sep 02 15:19:56 <kerframil>	[[ would be worse without qualifying the base.
Sep 02 15:20:08 <kerframil>	# [[ 08 -gt 12 ]]
Sep 02 15:20:09 <shbot>	kerframil: bash: [[: 08: value too great for base (error token is "08")
Sep 02 15:20:36 <kerframil>	so, test ain't so bad there.
Sep 02 15:49:54 <kurahaupo>	# declare -i h ; printf -v h '10#%(%H)T' ; if ((h<12)) ; then echo morning ; else echo afternoon ; fi
Sep 02 15:49:55 <shbot>	kurahaupo: afternoon
Sep 02 15:56:12 <kurahaupo>	# declare -i h ; TZ=NZ printf -v h '10#%(%H)T' ; if ((h<12)) ; then echo morning ; else echo afternoon ; fi
Sep 02 15:56:13 <shbot>	kurahaupo: afternoon
Sep 02 15:58:53 *	kurahaupo glares at shbot for its TZ handling; it's early morning in NZ right now.
Sep 02 15:59:19 <Soliton>	looks like shbot doesn't travel much.
Sep 02 15:59:21 <twkm>	perhaps no zoneinfo.
Sep 02 16:00:32 <kurahaupo>	# find /usr/share/zoneinfo -type f -printf x | wc -c
Sep 02 16:00:33 <shbot>	kurahaupo: find: '/usr/share/zoneinfo': No such file or directory
Sep 02 16:00:34 <shbot>	kurahaupo: 0
Sep 02 16:01:42 <twkm>	# locale -a | wc -l
Sep 02 16:01:43 <shbot>	twkm: 6
Sep 02 16:02:47 <jan6>	# locale -a | grep -Ev 'POSIX|C' | wc -l
Sep 02 16:02:48 <shbot>	jan6: 4
Sep 02 16:04:12 <twkm>	<http://ix.io/OBU>
Sep 02 16:05:08 <jan6>	yep, german, english, estonian, norse, it seems (not certain of the last one, but probably norse)
Sep 02 16:06:21 <Soliton>	norwegian
Sep 02 16:06:57 <twkm>	mainly i meant to show that it is a quite small install, in keeping with no obvious tzinfo.
Sep 02 16:07:11 <jan6>	right
Sep 02 16:07:16 <twkm>	6 vs typically hundreds if not trimmed.
Sep 02 16:07:28 <Achylles>	how do I use this stow command for symlinking? Always get these slashes errors
Sep 02 16:07:35 <Achylles>	stow -vt /tmp/other/ ~vagner/.stumpwm.d/compton.conf
Sep 02 16:07:51 <Achylles>	stow: ERROR: Slashes are not permitted in package names
Sep 02 16:07:54 <Soliton>	check the documentation.
Sep 02 16:08:07 <jan6>	# TZ=GMT-3 date
Sep 02 16:08:08 <shbot>	jan6: Mon Sep  2 17:08:07 GMT 2019
Sep 02 16:08:10 <jan6>	# TZ=GMT-7 date
Sep 02 16:08:11 <shbot>	jan6: Mon Sep  2 21:08:10 GMT 2019
Sep 02 16:08:17 <jan6>	that still works tho ;P
Sep 02 16:09:02 <twkm>	Achylles: surely that's not hard to understand.  packages are not paths.
Sep 02 16:09:48 <kurahaupo>	# TZ=XXX-12YYY,M9.5,M4.1 date +%F,%T,%z,%Z # do SysV-style TZ strings still get fully interpreted?
Sep 02 16:09:49 <shbot>	kurahaupo: 2019-09-03,02:09:48,+1200,XXX
Sep 02 16:10:20 <kurahaupo>	# TZ=XXX-12YYY,M8.5,M4.1 date +%F,%T,%z,%Z # really!?
Sep 02 16:10:22 <shbot>	kurahaupo: 2019-09-03,03:10:21,+1300,YYY
Sep 02 16:10:28 <kurahaupo>	yay! it really works!
Sep 02 16:12:38 <jan6>	wait what? what sorcery is this!? ;P
Sep 02 16:15:53 <twkm>	it describes the zone tagnames and gmt offset along with when it changes from a to b time -- ''man timezone'' might describe it more fully.
Sep 02 16:16:38 <kurahaupo>	jan6: Name Offset [dstname [dstoffset]] [,autumnswitchdate,springswitchdate]
Sep 02 16:17:40 <kurahaupo>	where the switch dates are given as M month.week-of-month[.day-of-week] or one of several others that I don't recall just now
Sep 02 16:17:46 <twkm>	well, end is required but start isn't.  stdoffset[dst[offset][,start[/time],end[/time]]]
Sep 02 16:20:26 <kurahaupo>	jan6: TZ=NZST-12NZDT,M8.5,M4.1 means 12 hours ahead of UTC during winter, labelled "NZST", and one more hour ahead during summer, labelled "NZDT", where summer starts on the last Sunday of September, and ends on the first Sunday of April.
Sep 02 16:20:30 <twkm>	Achylles: perhaps you wanted cp.
Sep 02 16:21:09 <jan6>	nice
Sep 02 16:21:11 <kurahaupo>	(the default switch is 2am Sunday)
Sep 02 16:21:20 <Achylles>	twkm, not really. I am trying to learn how to make symlinks with stow
Sep 02 16:21:41 <twkm>	stow isn't a general symlink'ing tool.
Sep 02 16:21:56 <kurahaupo>	ln -s ?
Sep 02 16:22:49 <twkm>	it is a private repo manager, so you "install" a particular package which stow does by symlink'ing the various components.
Sep 02 16:23:37 <Achylles>	twkm, kurahaupo  https://invidio.us/watch?v=zhdO46oqeRw
Sep 02 16:23:58 <twkm>	a'la, ln -s /path/to/package/bin/foo /install/location/bin/ && ln -s /path/to/package/lib/libfoo.a /install/location/lib/ && ...
Sep 02 16:25:45 <twkm>	watch a video?  hahahaha.
Sep 02 16:25:52 <kurahaupo>	twkm: I'd hate to see that on top of (underneath?) /etc/alternatives :-(
Sep 02 16:27:09 <twkm>	certainly one generally would not mix them.
Sep 02 16:28:20 <twkm>	each has a way for mere users to use the tooling.
Sep 02 16:30:57 <twkm>	Achylles seems to think stow is just automated ln -s (so far so good, but ...) where a path can be named where a package name is expected.
Sep 02 16:32:09 <kurahaupo>	That said, some of the things in my $HOME/bin go like: frub -> ../projects/frubnosticator/bin/frub and $HOME/projects/frubnosticaor/bin -> .GIT/bin and $HOME/projects/frubnosticator/.GIT -> ../../git/frubnosticator
Sep 02 16:33:10 <kurahaupo>	and then there's the two layers of local git repo - the "stable" and the "dev"
Sep 02 16:33:55 <kurahaupo>	which I switch between by changing the .GIT symlink
Sep 02 16:35:20 <twkm>	Achylles: but the textual notes ... note that no pathname is used except as a -t argument.
Sep 02 16:36:29 <Achylles>	twkm, I found the issue
Sep 02 16:36:31 <twkm>	e.g., ''stow -vt ~/Remote name...''  nowhere is there a ''stow ... path/name/here''.
Sep 02 16:36:55 <Achylles>	it links only folders and not files
Sep 02 16:37:02 <Achylles>	not single files
Sep 02 16:37:42 <twkm>	packages, which might mean directories are linked or files depending on the state of the target.
Sep 02 16:38:10 <Achylles>	yes. packages means folders. LOL
Sep 02 16:38:45 <twkm>	each package is certainly a directory under the stow toplevel, yes.  but that package might be only files.
Sep 02 16:43:54 <twkm>	e.g., ./name/ might contain only files which would be symlink'd into ~/Remote/, or it might (usuallly would) contain a complete (sub)tree composed of files and directories, which if the directories are not present under ~/Remote/ the directory is symlink'd otherwise just the files are.
Sep 02 16:46:07 <twkm>	(and if the target directory is a symlink it is removed, created as a directory, then the current package's files as well as the original package's files are symlink'd)
Sep 02 16:48:14 <Achylles>	twkm, I have found here that the command does not work in tmux, but non-tmux env
Sep 02 16:49:21 <twkm>	not too surprising.
Sep 02 16:50:43 <kurahaupo>	Achylles: Which shell are you running inside tmux? Which shell do you run otherwise? Do you start your shells as "login shells", or not, so that they always (or never) read .profile/.bash_profile
Sep 02 16:52:06 <kurahaupo>	Do you set your PATH differently in .bashrc vs .bash_profile?
Sep 02 17:04:13 <Achylles>	kurahaupo, I do not have .bash_profile
Sep 02 17:04:22 <kurahaupo>	or a .profile?
Sep 02 17:04:23 <Achylles>	I do .profile
Sep 02 17:05:43 <Achylles>	kurahaupo, if [ -f "$HOME/.bashrc" ]; then
Sep 02 17:05:58 <Achylles>	. "$HOME/.bashrc"
Sep 03 10:14:12 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep  3 10:14:12 2019

**** BEGIN LOGGING AT Tue Sep  3 10:14:37 2019

Sep 03 10:14:37 *	Now talking on #bash
Sep 03 10:14:37 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 03 10:14:37 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 03 10:14:38 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 03 10:26:01 <floppydh>	what are opinions on: instead of quitting on errors in longer running scripts, print the error and pause the script, so that the user can fix the problem and then continue with the remaining things
Sep 03 10:30:52 <twkm>	depends.
Sep 03 10:37:54 *	pj remembers "Abort/Retry/Ignore"
Sep 03 10:39:15 <pj>	it would be pretty easy to write a function that does that.
Sep 03 10:40:14 <geirha>	though I'd avoid making that feature default behavior
Sep 03 10:49:40 <floppydh>	apparently this has fallen out of fashion
Sep 03 10:50:00 <floppydh>	I guess in favor of automation
Sep 03 10:51:41 <geirha>	yeah, instead, when it fails, you're supposed to go to stackoverflow and copy/paste the first answer you find
Sep 03 10:55:48 <pj>	geirha: I would write it as a wrapper that has to be called for each individual command where you want it.
Sep 03 11:23:27 <xqo>	':' //; exec "`npm bin`/babel-node" "$0" "$@" this is the second line of a shell-script (first line is #!/bin/sh). how can I include the arg: --presets @babel/env ?
Sep 03 11:24:51 <xqo>	when I put it in the first parentheses, exec thinks the path to the executable includes the arg. if I include it in any later parantheses, the binary doesnt run as if the args were included
Sep 03 11:25:17 <geirha>	exec "$(npm bin)/babel-node "$0" --presets @babel/env "$@"
Sep 03 11:28:17 <xqo>	geirha devops/setup-env: line 2: exec: /Users/olve/github/fileconverter/backend/node_modules/.bin/babel-node devops/setup-env: cannot execute: No such file or directory
Sep 03 11:28:25 <xqo>	the paths are correct though
Sep 03 11:31:40 <geirha>	so it didn't work from the start?
Sep 03 11:32:27 <geirha>	also, why isn't it using npx?
Sep 03 11:33:24 <geirha>	but anyway, the weird part is passing "$0" there. Almost as if it's written as a hybrid between javascript and sh
Sep 03 11:33:57 <xqo>	i want to run javascript as shell-scripts like: $> devops/setup-env. I can call the files as expected if I do: ':' //; exec "`npm bin`/babel-node" "$0" "$@"
Sep 03 11:34:15 <geirha>	eww
Sep 03 11:34:18 <xqo>	however babel-node doesnt read its config file for some reason, so I need to call with the --presets @babel/env arg
Sep 03 11:34:30 <xqo>	if I want to use modern syntax in the js
Sep 03 11:35:25 <geirha>	so maybe that option should be before "$0" then
Sep 03 11:36:15 <xqo>	i tried now, the binary acts as if the arg doesnt exist
Sep 03 11:36:39 <geirha>	ok? what is the "binary" in this context?
Sep 03 11:36:50 <igemnace>	you sure you don't want to use an npm script instead? that'd just be a "babel-node --presets @babel/env" line
Sep 03 11:37:24 <xqo>	node_modules/.bin/babel-node is the executable. npm bin prints the path of the .bin directory
Sep 03 11:38:30 <Soliton>	your error above shows wrong quoting. babel-node and $0 should be separate arguments.
Sep 03 11:39:05 <geirha>	':' //; exec npx babel-node --presets @babel/env "$0" "$@"
Sep 03 11:39:17 <geirha>	still sounds like a bad idea
Sep 03 11:43:56 <xqo>	still didnt work. guess i'll just use npm scripts
Sep 03 11:48:54 <xqo>	thanks anyway!
Sep 03 12:54:47 <pyzozord>	hi what's the easiest one liner to feed some string std in to other program? Like i want to run single line of javscripn in node.js from bash
Sep 03 12:55:01 <pyzozord>	"console.log('hi')" | node doesnt work :(
Sep 03 12:55:47 <lopid>	echo "string" | command
Sep 03 12:56:02 <pyzozord>	lopid: thought so, just double checking that im not worng, thanks!
Sep 03 12:56:03 <kurahaupo>	your_command <<<some_string
Sep 03 12:56:04 <personaNonSpot>	google search
Sep 03 12:56:22 <kurahaupo>	pyzozord: ^^
Sep 03 12:57:00 <kurahaupo>	pyzozord: "console.log" is Javascript (ECMAscript), which is a completely different language from the Shell.
Sep 03 12:57:01 <personaNonSpot>	 /join #bash
Sep 03 12:57:11 <kurahaupo>	personaNonSpot: you're already here
Sep 03 12:57:23 <personaNonSpot>	oh sorry
Sep 03 12:57:32 <kurahaupo>	personaNonSpot: hi, welcome
Sep 03 12:57:44 <lopid>	node interprets javascript
Sep 03 12:57:57 *	lopid makes a bold claim
Sep 03 12:58:15 <han-solo>	`echo 'console.log("hellow orld")' | node ` # workz too
Sep 03 12:59:17 <kurahaupo>	pyzozord: when you write thingA | thingB both things have to be programs (possibly with arguments); "echo" is a program that writes its arguments to stdout.
Sep 03 13:13:20 <oskie>	I need to create a pseudo tty device, that basically just sits there and does nothing - just emulating a terminal for a program. Any suggestions?
Sep 03 13:13:49 <kurahaupo>	oskie: do you need to feed it any input, or record output?
Sep 03 13:14:17 <oskie>	kurahaupo: no
Sep 03 13:16:04 <oskie>	I need to run a program called winexe. If I do "winexe </dev/null" the program won't work. But I can't give it stdin, becaue it is used for other purposes
Sep 03 13:16:41 <Soliton>	!faketty
Sep 03 13:16:41 <greybot>	Quick way to make programs believe that they're reading/writing from/to a terminal: function faketty { script -qfc "$(printf "%q " "$@")" /dev/null; }
Sep 03 13:17:01 <kurahaupo>	oskie: the utility "script" is probably what you want
Sep 03 13:18:05 <oskie>	nice, thanks!
Sep 03 13:19:46 <oskie>	strange, for some reason it did not work. Well, I'll have to investigate the winexe code.
Sep 03 13:20:56 <wwilliam>	Hello is this OK or it can be improve?
Sep 03 13:20:57 <wwilliam>	http://paste.debian.net/hidden/845b3e0d/
Sep 03 13:23:32 <Soliton>	!check
Sep 03 13:23:32 <checkbot>	Soliton: Looks good to me
Sep 03 13:25:49 <Soliton>	at least no shell injection so that's a plus.
Sep 03 13:26:23 <wwilliam>	OK should work?
Sep 03 13:26:24 <Soliton>	find -exec with {} not the last argument looks questionable.
Sep 03 13:26:38 <wwilliam>	it goes into another bigger "script"
Sep 03 13:27:48 <Soliton>	also some weird sleep in there.
Sep 03 13:28:11 <wwilliam>	that while has to run forever
Sep 03 13:28:34 <wwilliam>	so i let it rest 5 mins until new shs show to proccess them.
Sep 03 13:30:25 <wwilliam>	{} always have to be last? on that find?
Sep 03 13:31:33 <wwilliam>	the thing is that $2 is a script that needs that copy there and then the last arg for $2 has to be index.txt
Sep 03 13:34:03 <wwilliam>	for x  in ./*copy*;do  "$2" prod test "$x" "$3";done
Sep 03 13:34:04 <Soliton>	well, it's not -exec + so it's fine.
Sep 03 13:34:10 <wwilliam>	may be that better?
Sep 03 13:34:42 <Soliton>	if you don't actually go through a dir hierarchy, sure.
Sep 03 13:34:49 <wwilliam>	I dont
Sep 03 13:35:17 <wwilliam>	I just cd and then the file *copy* should be there.
Sep 03 13:35:49 <Soliton>	then use for loop + glob, yes.
Sep 03 13:37:27 <wwilliam>	oh issue if i use that for loop + glob i get results with ./  i need to remove that from the result or $2 will fail.
Sep 03 13:38:54 <Soliton>	so remove it from the glob...
Sep 03 13:39:08 <wwilliam>	oh ok thanks
Sep 03 13:39:50 <wwilliam>	Thank you Soliton for your time and knowledge all good now I will use that.
Sep 03 13:39:50 <Soliton>	sounds like a bug in that other script though.
Sep 03 13:40:28 <Soliton>	sure. it does seem like you're starting to understand what you're doing. :-)
Sep 03 13:41:01 <wwilliam>	Which other script? $2?
Sep 03 13:41:08 <wwilliam>	Well that one is not mine.
Sep 03 13:41:11 <Soliton>	yes.
Sep 03 13:41:17 <wwilliam>	I have to call it in mine.
Sep 03 13:41:47 <wwilliam>	I will post the whole thing........one moment please
Sep 03 13:41:48 <Soliton>	if it take file paths it should just work. if it needs the basename or whatever it should do that.
Sep 03 13:53:33 <wwilliam>	this is the whole thing with the for loop and glob.
Sep 03 13:54:31 <wwilliam>	http://paste.debian.net/hidden/f59ea33a/
Sep 03 13:55:42 <phreaky>	Hey guys I need some help with jq tool. How the f*** do I use script variable which serves as a dynamic key to get the value from a dictionary ?
Sep 03 13:56:15 <Soliton>	!jqcreate
Sep 03 13:56:16 <greybot>	To create JSON strings with variable assignments: jq -nc --arg bar "$bar" '{foo:$bar}' ;# compare with awk -v awkvar="$bashvar"
Sep 03 13:56:30 <Soliton>	that shows how to hand a variable to jq.
Sep 03 13:59:00 <kurahaupo>	phreaky: where is your "dictionary" currently stored?
Sep 03 13:59:03 <phreaky>	Soliton, first thanks for the fast reply second , doesn't that serve the purpose when you have a variable as a key within the JSON itself ?
Sep 03 13:59:06 <wwilliam>	problem you are right soliton I need to go through a dir hierarchy. :( that for loop no good.
Sep 03 13:59:42 <Soliton>	phreaky: what else do you mean with dynamic key?
Sep 03 14:00:03 <phreaky>	kurahaupo, I fetch it with curl so it has something like this { ns1_key1: value, ns1_key2: value, ns2_key1: value, ns2_key2: value }
Sep 03 14:00:28 <phreaky>	first I filter all the keys by `ns1_` and then I want to get the values for all the `ns1_*` keys
Sep 03 14:00:39 <phreaky>	so I have a loop
Sep 03 14:01:06 <phreaky>	for key in $( echo ${object} | jq  'to_entries | .[] | select(.key|test("NS1_.")) | .key'  )
Sep 03 14:01:20 <phreaky>	and I Want to have something like:
Sep 03 14:02:10 <phreaky>	printf "${key}: $(echo ${object} | jq '.${key})'"
Sep 03 14:02:27 <phreaky>	but it constantly bitches about syntax error
Sep 03 14:05:36 <wwilliam>	will this work?
Sep 03 14:05:38 <wwilliam>	for x in "$1"/CMOD????????/*Copy01_1_1; do "$2" PROD isfortest "$x" "$3"
Sep 03 14:06:14 <wwilliam>	!work > wwilliam
Sep 03 14:06:14 <greybot>	wwilliam: In this context, the word "work" is misleading. We're here looking for solutions, not hacks. Be specific about what you need, and try to let go of how you think it should be done.
Sep 03 14:07:46 <Soliton>	# var=key1; jq -r --arg key "$var" '.[$key]' <<< '{ "key1":"value1", "key2":"value2" }'
Sep 03 14:07:48 <shbot>	Soliton: value1
Sep 03 14:08:23 <wwilliam>	;done
Sep 03 14:09:24 <Soliton>	phreaky: show json and desired output. that's some terrible example code.
Sep 03 14:12:34 <phreaky>	Soliton,  let me assimilate this :) . Much appreciated
Sep 03 14:13:59 <kurahaupo>	wwilliam: if the second argument to your function or script is the name of a program to run, then sure, it'll work by running that program
Sep 03 14:14:36 <wwilliam>	Yes "$2" is the location and name of a "program"
Sep 03 14:14:50 <wwilliam>	Thank you kurahaupo
Sep 03 14:16:48 <Soliton>	!faq 1 > phreaky: in case that for loop was not just a terrible example
Sep 03 14:16:48 <greybot>	phreaky: in case that for loop was not just a terrible example: https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
Sep 03 14:22:26 <phreaky>	ok it worked but in a different way
Sep 03 14:22:32 <phreaky>	thank you allll
Sep 03 14:22:38 <phreaky>	and you Soliton specifically
Sep 03 14:34:00 <kurahaupo>	wwilliam: The clarification "location and name" is unnecessary. Most programs that take a "filename" from the user simply pass it through to the kernel unmodified, where it will always be interpreted as a path. So unless specified otherwise or required by context, the "name of a file" should be understood to mean any path that refers to the file, not just the last component of such a path, nor any putative "full path". Likewise, the "name of a
Sep 03 14:34:37 <wwilliam>	ah cool thank you for the clarification kurahaupo
Sep 03 14:34:57 <geirha>	your message cut off at:  Likewise, the "name of a
Sep 03 14:34:59 <Soliton>	cut off at: the "name of a
Sep 03 14:35:05 <kurahaupo>	Likewise, the "name of a command" can be any of the various names of an executable file, excluding those names consisting of only a single path component, or it may be a single path component naming an executable file within a directory that's included in $PATH.
Sep 03 14:35:35 <ansyeb>	hi. what exactly does this block mean? https://bpaste.net/show/B74P
Sep 03 14:35:52 <Soliton>	!local
Sep 03 14:35:52 <greybot>	local [option] name[=value]. Same as using declare in a function. Define a variable as local to restrict to a function and the function's children. Good practice to prevent littering your global scope with temp vars. Less impact in an isolated script.
Sep 03 14:36:43 <geirha>	ansyeb: it stores the first argument in local variable action, second in local variable name, and the remaining arguments it mashes into a string assigned to local variable args
Sep 03 14:37:01 <ansyeb>	ok. thx
Sep 03 14:37:05 <kurahaupo>	ansyeb: it's the start of a function definition, where it accepts 2 fixed positional parameters (action and name) and then an arbitrary number of parameters that will be joined together as "args". Unless you're writing for posix sh, args would usually be better defined as an array.
Sep 03 14:37:24 <kurahaupo>	local args=("$@")
Sep 03 14:37:50 <geirha>	since posix doesn't define local, we better hope it's not an sh script
Sep 03 14:37:50 <Soliton>	the function keyword wouldn't be portable anyway.
Sep 03 14:38:08 <kurahaupo>	ansyeb: also, use EITHER the "function" keyword, OR the "()", NOT BOTH
Sep 03 14:38:10 <geirha>	ah yes, function AND () is a bashism
Sep 03 14:38:24 <kurahaupo>	geirha: d'oh, good point
Sep 03 14:38:41 <wwilliam>	!arrays > wwilliam
Sep 03 14:38:41 <greybot>	wwilliam: An array maps numbers to strings. Bash 4 also has associative arrays (maps strings to strings). http://mywiki.wooledge.org/BashSheet#Arrays http://mywiki.wooledge.org/BashFAQ/005 http://wiki.bash-hackers.org/syntax/arrays
Sep 03 14:39:02 <geirha>	wwilliam: please query the bot in private instead
Sep 03 14:39:08 <kurahaupo>	wwilliam: you don't need ">myname" if you just want to read it yourself
Sep 03 14:39:10 <geirha>	e.g. /query greybot !arrays
Sep 03 14:39:23 <wwilliam>	ah thank you.
Sep 03 14:39:45 <oskie>	is there anything equivalent to /dev/null but that blocks forever when read from - or like /dev/zero, but which doesn't produce any data when read?
Sep 03 14:40:06 <kurahaupo>	oskie: a disconnected fifo will do that
Sep 03 14:41:24 <oskie>	kurahaupo: hmm, true
Sep 03 14:41:35 <kurahaupo>	oskie: yourcmd < <( sleep 1000000000000000000 ; echo The end of the world is nigh! )
Sep 03 14:42:55 <oskie>	kurahaupo: interesting, that seems to have worked
Sep 03 14:44:04 <geirha>	read -r query < /dev/comcast
Sep 03 14:44:48 <kurahaupo>	oskie: actually, that sleep is about 6× too long for "the end of the world", when the sun will grow and engulf this planet
Sep 03 14:45:01 <oskie>	:)
Sep 03 14:45:33 <kurahaupo>	file a bug, and it will be fixed in a release sometime before then
Sep 03 14:46:51 <kurahaupo>	(aka, the Sun Microsystems response to a Y10k bug report)
Sep 03 15:51:04 <ansyeb>	hi. and what exactly is the meaning of: https://bpaste.net/show/GjOU ?
Sep 03 15:52:57 <geirha>	it's an option parsing loop, parsing only a single option -a, which takes an argument
Sep 03 15:53:06 <geirha>	!faq options
Sep 03 15:53:07 <greybot>	https://mywiki.wooledge.org/BashFAQ/035 -- How can I handle command-line options and arguments in my script easily?
Sep 03 16:05:38 <jamie_1>	hey, im having some real fun with some nested loops... im trying to make a function i can call in a loop and then call a loop inside of it to specify further.  how would i do something to the effect of creating the beginning of a call in the first loop like xpath "/Configuration/SpecifiedConfiguration[@name='$1']/" then in the nested loop do for x in "${furthdef[@]" do funcBase/Value[@name='$1']    and both
Sep 03 16:05:44 <jamie_1>	have an array
Sep 03 16:05:57 <knstn>	you can iterate over a string in bash, using pe string length?
Sep 03 16:06:53 <jamie_1>	well i need the main loop to run 5 times with the nestedloop to run 4 times every loop
Sep 03 16:07:03 <jamie_1>	im trying to get a list of configs from an xml file
Sep 03 16:23:08 <Soliton>	no idea what the question is. is there some issue with the nested loop?
Sep 03 16:28:54 <wwilliam>	What is this mean again?
Sep 03 16:28:56 <wwilliam>	for ((1; 1; 1)); do
Sep 03 16:29:44 <Soliton>	!cfor
Sep 03 16:29:44 <greybot>	C-style for loop: for (( expr; expr; expr )); do COMMANDS; done # Each expr is done in a math context. Example: for ((i=1; i<=n; i++)); do echo "$i"; done. Use in place of the non-working: for i in {1..$number}
Sep 03 16:31:21 <wwilliam>	Thank you soliton and how can i do that bash syle?
Sep 03 16:31:54 <Soliton>	that is bash. perhaps more readable as: while true; do ...
Sep 03 16:31:56 <han-solo>	just that
Sep 03 16:32:01 <jamie_1>	okay so i did get a way that i think should work.... https://pastebin.com/raw/6GGMY33m
Sep 03 16:32:09 <wwilliam>	Ok Thank you.
Sep 03 16:33:32 <jamie_1>	i have always had a bit of a challenge when it comes to wraping my head around nested loops
Sep 03 16:36:36 <rafasc>	jamie_1: using descriptive variable names instead of x and y helps.
Sep 03 16:37:15 <jamie_1>	rafasc: yeah... im working on that one, that was more psudocode than anything else, have yet to test it
Sep 03 17:26:44 <wwilliam>	I am getting this bash: line 14: syntax error: unexpected end of file
Sep 03 17:27:05 <greycat>	somewhere in the first 14 lines of the script, which is probably the whole script, there is a syntax error.  a missing closing element.  find it.
Sep 03 17:27:28 <wwilliam>	http://paste.debian.net/hidden/a2642aa0/
Sep 03 17:27:28 <greycat>	could be a quote or fi or done or esac or a closing curly brace or anything
Sep 03 17:27:32 <greycat>	!check
Sep 03 17:27:34 <checkbot>	wwilliam: Line 1: dest is referenced but not assigned. Line 1: rnaxa is referenced but not assigned. Line 1: shdndr is referenced but not assigned. See https://shellcheck.net/?id=cb24454 for all 6 issues.
Sep 03 17:28:19 <wwilliam>	the shellcheck dont show anything
Sep 03 17:28:26 <wwilliam>	the whole thing here:
Sep 03 17:28:30 <greycat>	Then read the script line by line until you find it.
Sep 03 17:28:47 <greycat>	In some cases, an editor with syntax highlighting can help you find it.
Sep 03 17:29:02 <greycat>	But if that doesn't work, don't waste TIME on it.  Just read the god damned words with your eyes.
Sep 03 17:29:04 <wwilliam>	im using vim with colors
Sep 03 17:29:34 <Soliton>	for x in *.sh ; do echo "$x" >> "$5"
Sep 03 17:29:42 <Soliton>	missing ; done
Sep 03 17:30:07 <greycat>	Is that the entire loop?  If so, you can replace it with a single printf command.
Sep 03 17:30:19 <Soliton>	yeah, indeed.
Sep 03 17:30:44 <wwilliam>	thans
Sep 03 17:30:59 <wwilliam>	how greycat ?
Sep 03 17:31:11 <Soliton>	printf %s\\n *.sh
Sep 03 17:31:13 <greycat>	printf '%s\n' *.sh >> "$5"
Sep 03 17:32:05 <wwilliam>	thank you I will change
Sep 03 17:32:50 <wwilliam>	Ok changed running again.
Sep 03 17:36:35 <wwilliam>	I found something odd in shellcheck it does not check the commands of the here file
Sep 03 17:36:46 <knstn>	I started reading python. Can someone explain me, why understand it so easily, compared to bash?
Sep 03 17:36:57 <greycat>	that's expecting a lot
Sep 03 17:37:04 <wwilliam>	Oh OK.
Sep 03 17:37:07 <wwilliam>	sorry.
Sep 03 17:39:29 <_1balck_jack>	hi
Sep 03 17:42:10 <kerframil>	wwilliam: you could write the routine as a function then convey it with declare -f or by way of an export, although the latter might be difficult in this case. either way, that would allow for shellcheck to scrutinise it.
Sep 03 17:42:37 <wwilliam>	ughh
Sep 03 17:42:48 <wwilliam>	Thanks anyway.
Sep 03 17:42:49 <kerframil>	?
Sep 03 17:42:57 <wwilliam>	i didnt understand.
Sep 03 17:43:00 <greycat>	if this is related to a thing from a week or two ago, I believe the function or mini-script is being run via sudo, in which case there is a concern that sudo might strip the exported function from the environment
Sep 03 17:43:02 <kerframil>	I see.
Sep 03 17:43:23 <wwilliam>	Yes greycat this is the continuation of that
Sep 03 17:47:50 <kerframil>	for instance: myfunc() { the code goes here instead; }; printf '%s\n' "$(declare -f myfunc)" 'myfunc "$@"' | sudo bash -s ...
Sep 03 17:48:13 <greycat>	that's getting a little carried away, IMHO
Sep 03 17:48:35 <kerframil>	<shrug>. it addresses his complaint.
Sep 03 17:48:43 <greycat>	true
Sep 03 17:49:39 <greycat>	Also, I wouldn't use a command substitution there; just { declare -f myfunc; echo 'myfunc "$@"'; } | sudo bash -s ...
Sep 03 17:50:05 <kerframil>	ah, yes.
Sep 03 17:53:28 <_1balck_jack>	hi
Sep 03 19:20:42 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep  3 19:20:42 2019

**** BEGIN LOGGING AT Tue Sep  3 19:21:06 2019

Sep 03 19:21:06 *	Now talking on #bash
Sep 03 19:21:06 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 03 19:21:06 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 03 19:21:06 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 03 19:21:25 <cha18>	pretty sure you link me this page every time I come here
Sep 03 19:21:40 <cha18>	I'll read it
Sep 03 19:21:48 <greycat>	Stop writing for i in $(...) and we'll stop repeating our response to that.
Sep 03 19:22:52 <docmax>	i have to work with while and "shift"
Sep 03 19:23:07 <docmax>	https://superuser.com/questions/186272/check-if-any-of-the-parameters-to-a-bash-script-match-a-string
Sep 03 19:23:11 <greycat>	because...?
Sep 03 19:23:19 <greycat>	!homework
Sep 03 19:23:19 <greybot>	"I have to count the lines in a file. But I'm not allowed to use wc. And I'm not allowed to use grep. And I have to type it in using a teletype. With no paper in it. In the dark. Left-handed."
Sep 03 19:23:37 <docmax>	lol
Sep 03 19:25:15 <scx>	Is this correct? https://pastebin.com/ku28JUBJ
Sep 03 19:25:15 <pasteban>	Paste is available without ads on http://pastebin.com/raw/ku28JUBJ
Sep 03 19:25:35 <Soliton>	!check
Sep 03 19:25:35 <checkbot>	scx: Line 1: Use ./*glob* or -- *glob* so names with dashes won't become options. See https://shellcheck.net/?id=cb31535
Sep 03 19:26:33 <Soliton>	perhaps * was meant to be .
Sep 03 19:27:06 <scx>	ok, anything except that (find .)?
Sep 03 19:27:11 <koala_man>	scx: looks good
Sep 03 19:27:24 <KodiakIT>	So, maybe it's me being less than entirely all-there atm, but I can't seem to figure out exatly how to make the syntax of this basic bash parallelism in bash gel with what I need to do with sqlite: https://gist.github.com/KodiakIT/b2e5807e7b119098a371eb93ae8152ce (excuse the title/desc, I should be initalizing a full repo shortly)
Sep 03 19:27:44 <scx>	koala_man: thanks
Sep 03 19:29:45 <koala_man>	KodiakIT: what about it?
Sep 03 19:32:08 <KodiakIT[m]>	Koala_man: well namely building the array/getting it to loop (and probably some checks whether the DB is locked before attempting initialize or populate, etc, etc)
Sep 03 19:32:30 <Soliton>	!check
Sep 03 19:32:30 <checkbot>	KodiakIT: Line 60: array is referenced but not assigned. Line 61: n is referenced but not assigned. Line 59: maxjobs appears unused. Verify use (or export if used externally). See https://shellcheck.net/?id=cb31950
Sep 03 19:32:39 <cha18>	greycat: If I know what the output of the command is and it doesn't vary, I'm not understanding why the for loop is bad. the command feeding the loop is modified by `cut` and `grep` so there isn't going to be unexpected blank lines
Sep 03 19:33:09 <greycat>	If you know what the output of the command is, and it does not vary, then you don't need to RUN the command.  Just hard-code the string(s) or the list you wish to use in the script.
Sep 03 19:34:03 <KodiakIT[m]>	Soliton: I put it through shell check before coming here, I know the not-quite-pseudo-code for the parallelism isn't actually syntactically valid bash.
Sep 03 19:34:38 <Soliton>	what is the syntax error?
Sep 03 19:34:58 <cha18>	it occasionally varies but I know the outputs. "list vms", maybe there are 3, or 4 if I duplicated a vm recently, so it should be run
Sep 03 19:34:58 <koala_man>	that part actually looks fine, except for it using the wrong variable name
Sep 03 19:35:14 <Soliton>	if you left out the array assignment then no idea how you expect help with it.
Sep 03 19:36:09 <greycat>	cha18: there's still no reason to do things *wrong*.  Just read the results into an array and iterate over the array, *or* read the results with a while read loop.
Sep 03 19:37:05 <greycat>	mapfile -t vms < <(command that lists vms one per line); for i in "${vms[@]}"; do ...; done
Sep 03 19:37:45 <KodiakIT[m]>	That's just it, at this point it's only being populated by `initialize_db` as a result of `find`, so what should I just take a segment of SQL say `SELECT (id, canonical_path) files (canonical_path, name) LIMIT 8` and iterate over that?
Sep 03 19:38:06 <greycat>	whyinthehellareyouwritingthisinbash
Sep 03 19:38:33 <docmax>	how can i check if there are no command-arguments?
Sep 03 19:38:39 <Soliton>	!$#
Sep 03 19:38:39 <greybot>	$# expands to the number of arguments, not counting $0.
Sep 03 19:38:40 <greycat>	if (($# == 0))
Sep 03 19:38:53 <docmax>	tjx
Sep 03 19:38:54 <docmax>	thx
Sep 03 19:39:04 <iwkse>	al2o3-cr: yes
Sep 03 19:39:21 <al2o3-cr>	mind a PM?
Sep 03 19:39:28 <_1BLACK_JACK_>	NICE
Sep 03 19:39:35 <iwkse>	sure np
Sep 03 19:39:39 <al2o3-cr>	ok
Sep 03 19:39:59 *	ChanServ gives channel operator status to greycat
Sep 03 19:40:04 <KodiakIT[m]>	Also when I tried to query the sqlitedb (even when it just ended with the `find -exec initialize_db_row`) as it was populating there were errors complaining that the DB was locked, which I assume, given that there's no error handling on the initialize function, means those weren't written to the DB?
Sep 03 19:40:13 *	greycat sets quiet on *!~jack@2405:205:120c:bcbb:2c52:d5ad:26ab:b8af
Sep 03 19:40:25 *	greycat removes channel operator status from greycat
Sep 03 19:41:29 <docmax>	if [[ "$*" == *YOURSTRING* ]]  also nice
Sep 03 19:41:40 <greycat>	Terrible.
Sep 03 19:41:51 <KodiakIT[m]>	also, greycat: if that was directed at me: I'm trying to keep it as stripped down simple & portable as I can make it (while first having it y'know, working)
Sep 03 19:41:57 <greycat>	But since you don't care what I say, I'll just stop saying anything to you.
Sep 03 19:42:00 <Soliton>	!bobby > KodiakIT[m]
Sep 03 19:42:00 <greybot>	KodiakIT[m]: https://xkcd.com/327/ # https://mywiki.wooledge.org/CodeInjection # https://mywiki.wooledge.org/BashWeaknesses # Don't write database code in bash. Use perl, python, etc.; any language with an appropriate database API.
Sep 03 19:42:27 <Soliton>	!$* > docmax
Sep 03 19:42:27 <greybot>	docmax: The difference between $@ and $*: "$@" (quoted) expands to each positional parameter as its own argument: "$1" "$2" ... while "$*" expands to the single argument "$1c$2c..." where c is the first character of IFS. You almost always want "$@". The same goes for arrays: "${array[@]}" or "${array[*]}". Unquoted $* and $@ are undefined; DO NOT use.
Sep 03 19:42:37 <docmax>	greybot: sorry, just searching for the shortest possible... no much for else...
Sep 03 19:42:42 <docmax>	if else
Sep 03 19:43:06 <Soliton>	are you golfing?
Sep 03 19:43:34 <Soliton>	do you care if the code is correct?
Sep 03 20:25:45 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep  3 20:25:45 2019

**** BEGIN LOGGING AT Tue Sep  3 20:26:12 2019

Sep 03 20:26:12 *	Now talking on #bash
Sep 03 20:26:12 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 03 20:26:12 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 03 20:26:12 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 03 20:26:45 <docmax>	case --ram=4g) ... can i extract the "4g" to the case command?
Sep 03 20:28:45 <twkm>	yes.
Sep 03 20:28:57 <docmax>	twkm: can you tell me how?
Sep 03 20:29:22 <mknod>	docmax, are you sure you want to hardcode this?
Sep 03 20:30:12 <docmax>	no something like case ram=?) echo ?
Sep 03 20:30:52 <docmax>	command --ram=4g
Sep 03 20:31:36 <docmax>	then: case --ram=?) my command ?   (my command 4g)
Sep 03 20:34:07 <docmax>	i think i got it
Sep 03 20:34:33 <docmax>	case --ram=*) echo "${i#*=}"
Sep 03 20:34:49 <docmax>	output: 4g
Sep 03 20:35:14 <docmax>	right?
Sep 03 20:41:01 <kerframil>	yes.
Sep 03 20:42:09 <kerframil>	assuming you were iterating with $i and meant case $i in.
Sep 03 20:42:34 <mnrmnaugh>	eschwartz r u triggered yet? https://0x0.st/zJs5.txt
Sep 03 20:43:05 <kerframil>	# set -- --ram=4g; for i; do case $i in --ram=*) echo "${i#*=}" ;; esac; done
Sep 03 20:43:06 <shbot>	kerframil: 4g
Sep 03 20:43:48 <mnrmnaugh>	i can never friggin remember which side is which... #%#%
Sep 03 20:44:32 <greycat>	on the US keyboard, # is to the left, % to the right
Sep 03 20:45:13 <eschwartz>	mnrmnaugh: I saw your nick, so yes
Sep 03 20:45:30 <mnrmnaugh>	HAH, touche
Sep 03 20:50:32 <eschwartz>	I will however admit this is surprisingly inventive and yet superficially clean.
Sep 03 20:51:37 <docmax>	help
Sep 03 20:51:47 <docmax>	    case "$1" in    -r=*|--ram=*)       ram=(-m ${i#*=})
Sep 03 20:52:06 <docmax>	does not give me what is given in "*"
Sep 03 20:53:33 <docmax>	what my fault... never mind
Sep 03 20:53:37 <docmax>	wait
Sep 03 21:17:49 <dendazen>	just saw this code __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
Sep 03 21:17:58 <dendazen>	is this really a good way to do it?
Sep 03 21:18:02 <greycat>	!faq location
Sep 03 21:18:04 <greybot>	https://mywiki.wooledge.org/BashFAQ/028 -- How do I determine the location of my script?  I want to read some config files from the same place.
Sep 03 21:20:57 <oxalis>	!dirname
Sep 03 21:20:57 <greybot>	dirname(1) removes the filename part of a pathname (/a/b/c -> /a/b). A parameter expansion can do it cleaner and *much* faster: "${path%/*}". Beware the difference for arguments without /
Sep 03 21:22:33 <greycat>	"What you're attempting to do is impossible and wrong-headed, and you should rethink your entire goal set, and oh by the way, you could have optimized it."
Sep 03 21:23:26 <dendazen>	is that for me?
Sep 03 21:23:37 <greycat>	*plonk*
Sep 03 21:24:17 <pj>	dendazen: well it's code you ran across so I suppose it's just indirectly for you.
Sep 03 21:24:46 <greycat>	If he ran over it, he didn't do a thorough enough job, because it's still there.
Sep 03 21:24:47 <dendazen>	Oh, sorry, I didn't create it, just stumbled on it
Sep 03 21:25:02 <greycat>	I suggest fire.
Sep 03 21:25:09 <dendazen>	Someone's code
Sep 03 21:25:26 <dendazen>	But it confused me, but I am no bash expert
Sep 03 21:25:38 <dendazen>	So i thought i'd ask here.
Sep 03 21:25:40 <pj>	dendazen: but to answer your original question, there really isn't a good way to do that, but that's one of the more creative ways I've seen.
Sep 03 21:27:12 <pj>	there are various ways to break it, though, just one being: bash < /path/to/scriptname
Sep 03 21:27:14 <greycat>	It has been my experience over the years that FAQ 28 deniers are never worth a second attempt to educate.  They are beyond my reach.
Sep 03 21:28:06 <learning_2_learn>	greycat: How many years of experience you have in bash, just asking out of curiosity.
Sep 03 21:28:06 <dendazen>	I am not a denier of that FAQ.
Sep 03 21:28:27 <dendazen>	I mean that was the first line of that bash
Sep 03 21:28:36 <greycat>	Well, the first time I ever used it was probably in ... 1991 or 1992, ish?  I was extremely ignorant at the time, of course.
Sep 03 21:28:38 <dendazen>	the second one was even worse imo
Sep 03 21:28:41 <dendazen>	__root="${__dir}/../../../.."
Sep 03 21:28:52 <greycat>	The first time I ever really *did* anything with it would be 1993.
Sep 03 21:28:59 <eschwartz>	_dir=$(readlink -f "${BASH_SOURCE[0]}"); _dir=${dir%/*} # generally more efficient at least
Sep 03 21:30:02 <learning_2_learn>	greycat: Cool.'
Sep 03 21:30:05 <pj>	efficiency is the least of the problems, unless you're competing for the most efficient way to have a broken script.
Sep 03 21:32:06 <eschwartz>	Well, step 2 is "anyone who uses bash < ./thescript gets a kick in the butt and told they are unsupported in the strongest possible terms", but I acknowledge that solution isn't for everyone :)
Sep 03 21:32:26 <linux_dream>	how would I block all websites containing "game" in their name?  I mean I know how to edit the hosts file, but in bash, what would be the command to check whether a website contains "game" in its name?
Sep 03 21:32:37 <greycat>	!os > linux_dream
Sep 03 21:32:37 <greybot>	linux_dream: Take it to your OS channel. Your issue is specific to your Operating System or Distribution.
Sep 03 21:32:53 <linux_dream>	thanks greybot
Sep 03 21:33:15 <eschwartz>	linux_dream: are you genuinely suggesting your OS executes a bash script to determine whether a website is permitted?
Sep 03 21:33:19 <pj>	the entire concept is wrong to begin with, there are many ways to run a bash script that leave bash completely unaware of the actual location of the script being run, and other ways where the result may vary from one version of bash to another.  Trying to make that crap more efficient is very much like trying to shine a turd (and yes, I'm aware that myth busters proved you can shine a turd but it's still probably not a good idea to try).
Sep 03 21:33:28 <kurahaupo>	linux_dream: if $site_name has the website name, use [[ $site_name = *game* ]]
Sep 03 21:33:47 <greycat>	kurahaupo: why are you so cruel
Sep 03 21:34:29 *	kurahaupo gets out a crewel needle
Sep 03 21:34:35 <linux_dream>	i guess im not wanting that, after all
Sep 03 21:35:01 <linux_dream>	if i use game*   then anything that starts with game will be blocked I guess
Sep 03 21:35:16 <linux_dream>	but that's only if the website starts that way, not if it contains it
Sep 03 21:35:21 <greycat>	linux_dream: a serious answer would be something like "set up a transparent http proxy, force traffic through it, and configure it with appropriate regex-based rules", absolutely none of which has the slightest relationship to bash
Sep 03 21:35:31 <kurahaupo>	linux_dream: pretty much yes
Sep 03 21:35:42 <linux_dream>	oh man really.  damn it that's crazy
Sep 03 21:35:48 <greycat>	also why do you hate ligaments and ligament research
Sep 03 21:35:53 <pj>	linux_dream: that's like asking how to make your toaster drive your son to work.
Sep 03 21:35:56 <Akuw_>	how can i convert Hexadecimal to Decimal ?
Sep 03 21:36:12 <koala_man>	# echo $((0x42))
Sep 03 21:36:13 <shbot>	koala_man: 66
Sep 03 21:36:13 <greycat>	Akuw_: please show sample input and tell us where you're getting it from
Sep 03 21:36:15 <linux_dream>	in what way pj ?
Sep 03 21:36:32 <pj>	linux_dream: think about it, think about it really hard.
Sep 03 21:36:46 <Akuw_>	00000000000000342BDD  that is a date
Sep 03 21:36:51 <pj>	...but not too hard, I'd hate for you to break something.
Sep 03 21:36:55 <Akuw_>	soory
Sep 03 21:36:56 <greycat>	O_o
Sep 03 21:37:09 <greycat>	that is a lot of digits
Sep 03 21:37:11 <kurahaupo>	# echo $((0x00000000000000342BDD))
Sep 03 21:37:12 <shbot>	kurahaupo: 3419101
Sep 03 21:37:21 <kurahaupo>	funny looking date
Sep 03 21:37:22 <Akuw_>	5D291F0000000146
Sep 03 21:37:39 <greycat>	Is this a puzzle?
Sep 03 21:37:40 <pj>	looks like a bra size being stuttered to me.
Sep 03 21:37:52 <kurahaupo>	Akuw_: are you sure you're not mangling the endianess?
Sep 03 21:37:53 <linux_dream>	i dont have your experience pj what i see is that i ask for something apparently very hard, near impossible, same as a toaster would drive my son to work
Sep 03 21:38:05 <linux_dream>	is that it? or did i miss the point
Sep 03 21:38:13 <kurahaupo>	# echo $((0x5D291F0000000146))
Sep 03 21:38:14 <shbot>	kurahaupo: 6712930804432896326
Sep 03 21:38:34 <kurahaupo>	that doesn't look plausible at all
Sep 03 21:38:42 <greycat>	Akuw_: what are you trying to do?
Sep 03 21:38:53 <Akuw_>	that is a log file
Sep 03 21:39:02 <greycat>	No it's not.
Sep 03 21:39:05 <Akuw_>	many recors
Sep 03 21:39:23 <Akuw_>	sorry its a trasaction file
Sep 03 21:39:31 <eschwartz>	It might have come from a log file, but it sure as heck isn't the logfile itself.
Sep 03 21:39:43 <greycat>	I don't know what that means, but it sure doesn't look like "a transaction file" to my novice eyes.
Sep 03 21:40:14 <greycat>	It looks like a tiny piece of some vast puzzle and you will not give enough information to understand it.
Sep 03 21:40:38 <learning_2_learn>	Akuw_: let's assume it's log file what you're trying to do?
Sep 03 21:40:41 <Akuw_>	4th fields separated by ; its time in seoconds UTC 01/01/1970 00:00:00 4 bytes for seconds
Sep 03 21:40:47 <eschwartz>	Obviously it is our fault for not understanding it, because we aren't cool enough to have a decoder ring
Sep 03 21:40:48 <greycat>	It isn't.
Sep 03 21:41:00 <greycat>	It is not the time in seconds since the epoch.
Sep 03 21:41:01 <Akuw_>	i have to tell if there is a salt more than one hour
Sep 03 21:41:05 <greycat>	# date +%s
Sep 03 21:41:06 <shbot>	greycat: 1567539665
Sep 03 21:41:18 <greycat>	That is the time in seconds since the epoch, in base 10.  Your two sample values are nowhere NEAR hat.
Sep 03 21:41:38 <kurahaupo>	Akuw_: if it's 4 bytes then it should be exactly 8 hexadecimal digits
Sep 03 21:41:39 <greycat>	Nor are they anywhere near EACH OTHER.
Sep 03 21:42:30 <greycat>	it's like you found two random hexadecimal numbers on the internet, from different pages, and just pasted one of each into the channel without context
Sep 03 21:42:44 <kurahaupo>	# printf -v x '%(%s)T' ; printf '%#x\n' $x
Sep 03 21:42:45 <shbot>	kurahaupo: 0x5d6ec234
Sep 03 21:43:24 <greycat>	kurahaupo: hmm.... you think maybe the first 8 chars of the second one might be a timestamp?
Sep 03 21:43:50 <kurahaupo>	maybe...
Sep 03 21:44:42 <kurahaupo>	# printf '%(%F,%T,%z)T\n' $((0x5D291F00))
Sep 03 21:44:43 <shbot>	kurahaupo: 2019-07-13,00:00:00,+0000
Sep 03 21:45:10 <kurahaupo>	Akuw_: does the middle of last month sound about the right ballpark?
Sep 03 21:45:48 <Akuw_>	kurahaupo: what?
Sep 03 21:46:23 <greycat>	He's a native Spanish speaker, I think.  "the right ballpark" might be too idiomatic.
Sep 03 21:46:26 <kurahaupo>	Akuw_: the first eight digits of the second number you quoted correspond to 13 Aug 2019
Sep 03 21:46:36 <greycat>	Jul not Aug
Sep 03 21:46:47 <kurahaupo>	oh yeah
Sep 03 21:47:08 <kurahaupo>	The date shown by shbot above ↑
Sep 03 21:47:12 <Akuw_>	i dont know another person created that
Sep 03 21:47:24 <learning_2_learn>	lol Akuw_
Sep 03 21:47:26 <Akuw_>	Long= 8 bytes
Sep 03 21:47:27 <greycat>	You don't know what your input IS?
Sep 03 21:47:48 <Akuw_>	i just have a document that explain field 4
Sep 03 21:47:56 <learning_2_learn>	Did other person left you his address or phone number to contact and ask?
Sep 03 21:48:03 <greycat>	they just dropped a random file's content on you, without even giving you its NAME, and said "here, ask random questions about this on the internet"?
Sep 03 21:48:19 <bashtux>	lol
Sep 03 21:48:52 <Akuw_>	documentation says Time_PC
Sep 03 21:48:54 <kurahaupo>	Akuw_: you're the one who said timestamps are 4 bytes, which translates to 8 hexadecimal digits. 16 hexadecimal digits is way too many
Sep 03 21:49:13 <greycat>	Akuw_: WHAT documentation?
Sep 03 21:49:25 <pj>	# d=5D291F00; printf '%(%F,%T,%z)T\n' "$((16#$d))"
Sep 03 21:49:26 <shbot>	pj: 2019-07-13,00:00:00,+0000
Sep 03 21:49:32 <pj>	another way ^^^^
Sep 03 21:49:43 <kurahaupo>	Akuw_: given that the number comes out exactly on midnight, If would count that as "convincing"
Sep 03 21:49:49 <Akuw_>	Time in seconds from 01/01/1970 00:00:00 UTC 4 bytes for seconds from 01/01/1970
Sep 03 21:50:05 <greycat>	Akuw_: what is the NAME of the documentation you are READING?  Where did it COME FROM?
Sep 03 21:50:22 <Akuw_>	is a custom file
Sep 03 21:50:22 <greycat>	Akuw_: what is the NAME of the FILE you are reading?  Where did it COME FROM?  What are you trying to DO with it?
Sep 03 21:50:41 <kurahaupo>	Akuw_: seconds since 1/1/1970 00:00 UTC is the standard Unix timestamp format, fairly well known
Sep 03 21:50:44 <Akuw_>	i need to see if there is a salt more tnat one hour
Sep 03 21:51:05 <kurahaupo>	Akuw_: "salt" does not make sense in English
Sep 03 21:51:12 <Akuw_>	for example if time is 09:00 and next line is 10:00 then many transactions not happen
Sep 03 21:51:14 <learning_2_learn>	Akuw_: what is salt?
Sep 03 21:51:17 <Akuw_>	wait
Sep 03 21:51:47 <Akuw_>	jump
Sep 03 21:51:57 <Akuw_>	leap
Sep 03 21:52:30 <learning_2_learn>	can you please past few lines from the file where so we don't guess what's in there.
Sep 03 21:52:31 <Akuw_>	so first thing is convert time
Sep 03 21:52:36 <greycat>	well, the first number you gave us was meaningless to us, and the second number APPEARS not to contain the hour, minute or second -- only the day, month and year.  Unless it's hidden somewhere after the first 8 characters.
Sep 03 21:52:37 <Akuw_>	ok
Sep 03 21:52:54 <kurahaupo>	Akuw_: leap year, leap second, or change-of-daylight-saving?
Sep 03 21:53:29 <Akuw_>	i mean, if you have 01:00, 01:03, 01:07 tehn 03:02
Sep 03 21:53:37 <greycat>	But you DO NOT HAVE those.
Sep 03 21:53:44 <greycat>	Now show us what you DO have.
Sep 03 21:53:49 <kurahaupo>	Akuw_: you quoted 5D291F0000000146 which I suggest is 5D291F00 timestamp and 00000146 unique sequence ID
Sep 03 21:54:11 <kurahaupo>	# echo $((16#146))
Sep 03 21:54:12 <shbot>	kurahaupo: 326
Sep 03 21:55:10 <kurahaupo>	Akuw_: does 326 log entries seem a plausible number?
Sep 03 21:55:33 <fafab_45>	hi
Sep 03 21:55:36 <greycat>	do you actually think he understands that question?
Sep 03 21:56:11 <Akuw_>	https://paste.debian.net/1098623/
Sep 03 21:56:13 <learning_2_learn>	greycat: are you sys admin or programmer?
Sep 03 21:56:28 <Akuw_>	check paste
Sep 03 21:56:34 <greycat>	you only showed us one line?
Sep 03 21:56:55 <learning_2_learn>	Akuw_: why only one line?
Sep 03 21:57:12 <fafab_45>	I have a problem with my terminal. I suspect that it is linked to my bash profiles/configuration but I'm not sure. Is there anyone you can help me to try to understand the origin of my problem (lagging of my terminal for about 10 sec when Terminal is started for the first time)?
Sep 03 21:57:20 <greycat>	I'd really like to see what comes after 00059, whether it's 00060 or 0005A
Sep 03 21:57:41 <Akuw_>	https://paste.debian.net/1098624/
Sep 03 21:57:51 <kurahaupo>	Akuw_: are you planning to reverse engineer the entire format, or just enough to report the timestamps?
Sep 03 21:58:07 <Akuw_>	only 4th field
Sep 03 21:58:11 <rafasc>	fafab_45: have you tried using bash with --noprofile --norc?
Sep 03 21:58:20 <greycat>	00059 to 00239... so it's not a simple sequence number
Sep 03 21:58:30 <koala_man>	fafab_45: is it slow if you just run 'bash' or 'bash --login'?
Sep 03 21:58:50 <kurahaupo>	Akuw_: approximately how many lines are there in a whole day's log?
Sep 03 21:59:00 <learning_2_learn>	rafasc: what happens when you do su - $USER does it still take 10 second?
Sep 03 21:59:37 <Akuw_>	i will paste 4th row that i get using awk
Sep 03 21:59:43 <rafasc>	learning_2_learn: what you said was was probably directed to fafab_45
Sep 03 21:59:44 <greycat>	*sigh*
Sep 03 22:00:01 <Akuw_>	https://paste.debian.net/1098626/
Sep 03 22:00:10 <kurahaupo>	Akuw_: because if the answer is "millions", I would suspect that the second 4 bytes are microseconds or nanoseconds
Sep 03 22:00:15 <learning_2_learn>	rafasc: yes
Sep 03 22:00:17 <pj>	Akuw_: it might be helpful to know exactly what time those entries are appearing in the logs.
Sep 03 22:01:05 <kurahaupo>	actually now I suspect milliseconds
Sep 03 22:01:16 <Akuw_>	59.349
Sep 03 22:01:23 <fafab_45>	thanks for your answers. rafasc, I have to write it in the gnome terminal preferences,
Sep 03 22:01:24 <fafab_45>	?
Sep 03 22:01:34 <Akuw_>	number of lines
Sep 03 22:01:51 <kurahaupo>	echo hh:mm.ss.$((0x3c9))
Sep 03 22:01:58 <greycat>	60k entries per day, so very roughly 1 per second
Sep 03 22:01:58 <kurahaupo>	# echo hh:mm.ss.$((0x3c9))
Sep 03 22:01:59 <shbot>	kurahaupo: hh:mm.ss.969
Sep 03 22:02:33 <greycat>	it's *possible* that the timestamp is 8 chars for day, 8 chars for milliseconds since midnight, but you'd need to gather a LOT more data to prove it
Sep 03 22:02:36 <kurahaupo>	so millisecond resolution is probably adequate to disambiguate entries
Sep 03 22:03:05 <Akuw_>	humm i got
Sep 03 22:03:28 <kurahaupo>	The second uint32 is rolling over every second and not getting higher that 999
Sep 03 22:03:49 <kurahaupo>	at least, in those 30 lines
Sep 03 22:03:57 <pj>	it's not ms
Sep 03 22:04:19 <kurahaupo>	pj: what do reckon it is?
Sep 03 22:04:21 <pj>	I can see two sequential entries where the first four bytes are the same and the last bytes go backwards.
Sep 03 22:04:28 <pj>	so it would not make sense.
Sep 03 22:04:47 <greycat>	there are entries from multiple days here
Sep 03 22:04:52 <Akuw_>	more lines
Sep 03 22:04:53 <Akuw_>	https://paste.debian.net/1098629/
Sep 03 22:04:57 <fafab_45>	I come back
Sep 03 22:05:00 <greycat>	oh god, a FOURTH one now
Sep 03 22:05:12 <pj>	look at these two sequential entries...
Sep 03 22:05:14 <kurahaupo>	pj: lines 5&6 ?
Sep 03 22:05:15 <pj>	5D2A705D0000036C
Sep 03 22:05:16 <pj>	5D2A705D000002C8
Sep 03 22:05:24 <pj>	kurahaupo: yes
Sep 03 22:05:46 <pj>	if the last bytes are ms it would stand to reason that those entries would not be in that order.
Sep 03 22:06:04 <kurahaupo>	pj: that could just be down to parallel writing to a log with jitter
Sep 03 22:06:13 <pj>	possibly
Sep 03 22:06:34 <pj>	but I think the most reasonable thing to say is that the first four bytes are likely unixtime and just leave it at that.
Sep 03 22:06:49 <greycat>	It could be a sequence number within each calendar day, and for whatever reason, *this* file only shows a small fraction of the sequence.
Sep 03 22:07:12 <kurahaupo>	# echo $((0x3de))
Sep 03 22:07:14 <shbot>	kurahaupo: 990
Sep 03 22:07:16 <greycat>	Akuw_: So far there is NO evidence that the Hour, Minute or Second are present in this file.  Only the date.
Sep 03 22:07:32 <Akuw_>	from this  5D29BA69000001DC  --> 5D29BA69 is date time
Sep 03 22:07:38 <greycat>	It is the date only.
Sep 03 22:07:41 <Akuw_>	in epoc
Sep 03 22:08:00 <Akuw_>	then i have to convert epoc to Human readable
Sep 03 22:08:01 <fafab_45>	Finally, I rename bashrc and start again. The problem is solved. Thanks
Sep 03 22:08:11 <greycat>	# printf '%(%Y-%m-%d %H:%M:%S)T' $((16#5D29BA69))
Sep 03 22:08:12 <shbot>	greycat: 2019-07-13 11:03:05
Sep 03 22:08:15 <greycat>	Hmm.
Sep 03 22:08:29 <Akuw_>	i converted here  https://www.epochconverter.com
Sep 03 22:08:32 <pj>	# printf '%(%F,%T,%z)T\n' "$((16#)5D2A705D)"
Sep 03 22:08:33 <shbot>	pj: bash: command substitution: line 1: syntax error near unexpected token `5D2A705D'
Sep 03 22:08:33 <shbot>	pj: bash: command substitution: line 1: `(16#)5D2A705D'
Sep 03 22:08:33 <shbot>	pj: 1970-01-01,00:00:00,+0000
Sep 03 22:08:34 <Akuw_>	and got coincidence
Sep 03 22:08:35 <greycat>	Well, that's very different from the SECOND example you gave us.
Sep 03 22:08:43 <pj>	bleh
Sep 03 22:08:50 <pj>	# printf '%(%F,%T,%z)T\n' "$(16#5D2A705D)"
Sep 03 22:08:51 <shbot>	pj: bash: 16#5D2A705D: command not found
Sep 03 22:08:51 <shbot>	pj: 1970-01-01,00:00:00,+0000
Sep 03 22:08:54 <Akuw_>	i paste many lines
Sep 03 22:08:59 <kurahaupo>	# printf '%(%F %T)T.%03u\n' $((0x5D2A6DA3)) $((0x00000313))
Sep 03 22:09:01 <shbot>	kurahaupo: 2019-07-13 23:47:47.787
Sep 03 22:09:03 <pj>	# printf '%(%F,%T,%z)T\n' "$((16#5D2A705D))"
Sep 03 22:09:04 <shbot>	pj: 2019-07-13,23:59:25,+0000
Sep 03 22:09:27 <Akuw_>	hummm
Sep 03 22:09:30 <Akuw_>	let me check
Sep 03 22:09:35 <greycat>	OK, maybe the hour/minute/second *are* in there after all, and your example #2 was just a weird outlier.
Sep 03 22:09:56 <pj>	greycat: I would say so
Sep 03 22:10:03 <kurahaupo>	Akuw_: if it does turn out to be seconds & milliseconds, you owe me a beer
Sep 03 22:10:07 <pj>	he just happened to give an example that was actually at midnight for that one.
Sep 03 22:10:52 <kurahaupo>	I suspect the log rolls over at midnight, so the first few entries will magically always be just after midnight
Sep 03 22:11:03 <pj>	kurahaupo: that makes sense.
Sep 03 22:11:27 <pj>	I just wouldn't go as far as to say what the final four bytes are without further evidence.
Sep 03 22:11:38 <greycat>	I think we can ignore the last 4 bytes for this question.
Sep 03 22:11:58 <ncuxo>	Hello everyone
Sep 03 22:12:01 <kurahaupo>	Akuw_: how many processes are writing to the log concurrently?
Sep 03 22:12:20 <Akuw_>	humm, dont have that information
Sep 03 22:12:39 <Akuw_>	many things i have discovered have to discover by my self
Sep 03 22:12:42 <ncuxo>	why when I enter :
Sep 03 22:12:42 <ncuxo>	if [ -f ~/.bash_aliases ]; then
Sep 03 22:12:42 <ncuxo>	    . ~/.bash_aliases
Sep 03 22:12:42 <ncuxo>	fi
Sep 03 22:12:42 <ncuxo>	I get that the file .bash_aliases does not exist?
Sep 03 22:12:45 <kurahaupo>	it might not be milliseconds, but it does seem to be a number between 0 & 999
Sep 03 22:13:08 <pj>	kurahaupo: your jitter theory does sound plausible, but I wouldn't want to say for sure what that is.
Sep 03 22:13:23 <greycat>	Akuw_: take field 4, then take only the first 8 characters of it.  Use simple arithmetic expansion to convert it to base 10.  Subtract the previous value from the current value.  If the difference is over 3600 seconds, say something.  prev=$current, loop.
Sep 03 22:13:24 <learning_2_learn>	ncuxo: do ls ~/.bash_aliases
Sep 03 22:13:50 <Akuw_>	greycat: ok
Sep 03 22:13:54 <learning_2_learn>	if there is a file it will tell you, else you will need to create a file.
Sep 03 22:13:54 <Akuw_>	let me start
Sep 03 22:14:09 <ncuxo>	learning_2_learn:  the file is there ls finds it
Sep 03 22:14:27 <geirha>	what's the exact error message?
Sep 03 22:14:32 <kurahaupo>	ncuxo: can you paste the exact error message?
Sep 03 22:14:39 <greycat>	ncuxo: in that case, look for unprintable garbage characters in the file
Sep 03 22:14:41 <bashtux>	ncuxo: possibly permissions ?
Sep 03 22:14:53 <kurahaupo>	damnit geirha typing so fast!!!
Sep 03 22:14:55 <pj>	ncuxo: use a pastebin, show exactly what you're typing and the resulting error
Sep 03 22:15:00 <greycat>	Not in .bash_aliases ... in whatever file you pasted commands from.
Sep 03 22:15:25 <ncuxo>	I've edit the bashrc file so I can enter my aliases on a separate file
Sep 03 22:18:14 <learning_2_learn>	ncuxo: if you can show us what error you're getting we will be able to help else we will be guessing.
Sep 03 22:18:43 <ncuxo>	https://pastebin.com/SN7hTdMQ
Sep 03 22:18:44 <pasteban>	Paste is available without ads on http://pastebin.com/raw/SN7hTdMQ
Sep 03 22:19:16 <greycat>	the leading . in ./home/local/.bash_aliases is most curious
Sep 03 22:19:29 <geirha>	yeah, the error message suggests you wrote .~/.bash_aliases instead
Sep 03 22:19:59 <greycat>	or ~/.^H.bash_aliases
Sep 03 22:20:00 <geirha>	ah no, tilde won't expand there
Sep 03 22:20:19 <greycat>	or... no, that's not quite it either
Sep 03 22:20:20 <Akuw_>	i am using cat _201907013.tr | awk -F";" '{ printf '%(%F,%T,%z)T\n "$((16#$4))"'}'
Sep 03 22:20:24 <Akuw_>	but got an error
Sep 03 22:20:35 <greycat>	ncuxo: I'm back at "look for unprintable garbage or control characters in your .bashrc file"
Sep 03 22:20:48 <geirha>	ncuxo: see how those lines look with   sed -n l ~/.bashrc
Sep 03 22:20:52 <greycat>	Akuw_: the printf commands we were using are in BASH not in awk
Sep 03 22:21:07 <Akuw_>	hummmm
Sep 03 22:21:14 <greycat>	Akuw_: but you do NOT need to convert the timestamps to human-readable time.  Only convert them to base 10 so you can perform a subtraction.
Sep 03 22:21:46 <greycat>	and you didn't extract the first 8 characters, either.  you need to do that.
Sep 03 22:21:50 <Akuw_>	to convert to base 10 what i have to use?
Sep 03 22:22:05 <greycat>	# echo $((16#5D2A705F))
Sep 03 22:22:06 <shbot>	greycat: 1563062367
Sep 03 22:22:18 <greycat>	# echo $((16#5D2A7070))
Sep 03 22:22:19 <shbot>	greycat: 1563062384
Sep 03 22:22:28 <greycat>	That's in bash, not in awk.
Sep 03 22:22:35 <greycat>	If you want to do it in awk, ask #awk.
Sep 03 22:25:43 <Akuw_>	but i need to conevrt that epoc to human ?
Sep 03 22:26:36 <djph>	Akuw_: so use date
Sep 03 22:27:06 <greycat>	Akuw_: *do* you?  I thought you only cared about whether there was a 3600 second difference between two lines.
Sep 03 22:28:03 <Akuw_>	then if 1562976000 less another value  1562976003 for example
Sep 03 22:28:08 <Akuw_>	?
Sep 03 22:28:16 <greycat>	You tell us.  What are you trying to do?
Sep 03 22:29:19 <djph>	!b9 > greycay
Sep 03 22:29:19 <greybot>	greycay: All examples given by the questioner will be broken, misleading, wrong, incomplete, and/or not representative of the actual question.
Sep 03 22:29:26 <djph>	...
Sep 03 22:29:36 <djph>	^greycat, even
Sep 03 22:29:40 <djph>	:(
Sep 03 22:33:08 <kurahaupo>	djph: printf can do dates+times
Sep 03 22:33:52 <Akuw_>	greycat: let me understand, i have 2 decimals a got -->  1563062397 and 1563062391, if i substract i got 6
Sep 03 22:34:00 <Akuw_>	that means 6 what?
Sep 03 22:34:06 <Akuw_>	seconds?
Sep 03 22:34:12 <greycat>	yes
Sep 03 22:34:16 <Akuw_>	hummmm
Sep 03 22:36:38 <djph>	kurahaupo: oh? neat.
Sep 03 22:40:28 <kurahaupo>	# printf 'djph %(%F %T)T.%03u\n' $((0x5D2A6DA3)) $((0x00000313))
Sep 03 22:40:29 <shbot>	kurahaupo: djph 2019-07-13 23:47:47.787
Sep 03 22:40:51 <djph>	fun times
Sep 03 22:40:59 <greycat>	the .787 part is still speculation
Sep 03 22:49:18 <Akuw_>	i am using  sed -n '20p;41q' _RP01p1201907013.tra | awk -F";" '{ line=$4}{print line}'
Sep 03 22:50:07 <Akuw_>	but i want to use the value i got with awk to use $((16#5D2A707D))
Sep 03 22:50:25 <greycat>	You need to pick one.  Awk or bash.
Sep 03 22:50:59 <greycat>	Looks like we might have got a datestamp in the filename, finally.
Sep 03 22:51:17 <greycat>	1201907013 might be 20190701 with two extra digits fore and aft
Sep 03 22:51:19 <Akuw_>	sed -n '20p;41q' _201907013.tr | var=$(awk -F";" '{ linea=$4}')
Sep 03 22:51:24 <Akuw_>	but doesnt work
Sep 03 22:51:39 <greycat>	PICK one.  Awk or bash.
Sep 03 22:51:46 <Akuw_>	ok
Sep 04 07:55:02 *	Disconnected ()
**** ENDING LOGGING AT Wed Sep  4 07:55:02 2019

**** BEGIN LOGGING AT Wed Sep  4 07:55:27 2019

Sep 04 07:55:27 *	Now talking on #bash
Sep 04 07:55:27 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 04 07:55:27 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 04 07:55:27 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 04 07:55:31 <han-solo>	bqq: if you use it frequent enough, you won't have to memorize nomore :)
Sep 04 07:55:43 *	kurahaupo is saddened that some people think "learning key sequences is too hard" and give up; they're cursing themselves to life in the slow lane using a mouse
Sep 04 07:57:12 <kurahaupo>	annadane: The "suffix" is not a thing separate from the filename; it is *part of* the filename. When you think that way, it's completely obvious that you want filenames ending in "foo.png"
Sep 04 07:58:33 <bqq>	no, you have to constantly switch from how to type in the correct key sequences and the real task you need to be done at the time.
Sep 04 07:59:23 <kurahaupo>	bqq: not really; the fingers do the typing, the brain just sees what task is being worked on
Sep 04 07:59:31 <annadane>	kurahaupo, yeah, i know. i just can't read or use my brain apparently
Sep 04 07:59:56 <kurahaupo>	it's only seems like you have to keep switching for a relatively short time - a few months at most
Sep 04 08:00:29 <kurahaupo>	Unless you're going to die next year, those few months will be a worthwhile investment
Sep 04 08:00:53 <kurahaupo>	if you've only tried for a week before giving up, that's where the problem is
Sep 04 08:02:25 <bqq>	generally it constantly interruptted my thought flow..unless you spent considerable time getting used to it subconsciously
Sep 04 08:02:34 <kurahaupo>	annadane: it's a trap that lurks in the backs of minds that have been contaminated young by a certain operating system from Redmond WA.
Sep 04 08:03:26 <annadane>	yeah, but the main issue here is i can't read and bash quite correctly won't copy anything if it doesn't end in foo but instead foo.png
Sep 04 08:03:41 <kurahaupo>	bqq: "considerable" being a few hundred hours practice. In the context of spending tens of thousands of hours over a lifetime, that's obviously worthwhile. And it's cumulative; you get faster at learning keyboard shortcuts for other tools too
Sep 04 08:05:58 <kurahaupo>	I was fortunate that the operating system I was first exposed to used "/" to separate the "filename" from the "suffix", so I was obligated to completely unlearn that. People who learn that "." separates a suffix, have more trouble later; they never completely unlearn it, just suppress it, and it comes up as "can't read properly"
Sep 04 08:07:19 <bqq>	why suddenly my terminal freezes
Sep 04 08:10:07 <wedgie>	bqq: did you press ctrl+s ?  if so press ctrl+q to unfreeze it.
Sep 04 08:12:29 <bqq>	yes i was  trying to search..:)
Sep 04 08:14:24 <gbellinoz>	bqq: searching and copying from scrollback history in gnu screen is really easy, and just a few keys. i use it constantly.
Sep 04 08:14:24 <gbellinoz>	if you have trouble remembering keys and commands, make yourself a cheat sheet and keep it next to your monitor until you don't need it any more.
Sep 04 08:14:24 <gbellinoz>	there's a reason all of us like commands and keystrokes - after the initial investment, it ends up being a lot more efficient than point-and-click.
Sep 04 10:15:33 *	Disconnected ()
**** ENDING LOGGING AT Wed Sep  4 10:15:33 2019

**** BEGIN LOGGING AT Wed Sep  4 10:15:56 2019

Sep 04 10:15:56 *	Now talking on #bash
Sep 04 10:15:56 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 04 10:15:56 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 04 10:15:56 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 04 10:16:29 <Ingvix_>	Hey, I tried to remove a prefix from a string and then leave only the first character from the leftover string. I tried like so: 'result=${input#*$prefix::1}' but they don't seem to work together at least like that. Can this be done in one brackets or need I do them separately?
Sep 04 10:19:25 <go|dfish>	Ingvix_: separately
Sep 04 10:19:50 <Ingvix_>	Alright, thanks
Sep 04 10:26:25 <izabera>	./lib/sh/libsh.a(tmpfile.o): In function `sh_mktmpname':
Sep 04 10:26:27 <izabera>	/home/izabera/bash-5.0-rc1/lib/sh/tmpfile.c:152: warning: warning: mktemp() possibly used unsafely, use mkstemp() or mkdtemp()
Sep 04 10:26:34 <izabera>	just got this while compiling on a bsd
Sep 04 10:26:47 <izabera>	like i know it's nabq
Sep 04 10:26:55 <izabera>	but i thought this was something that glibc printed?
Sep 04 12:05:56 <_1black_jack_>	hello
Sep 04 12:14:20 <benne>	hi im trying to search for filetypes thats are stpoored in an array using a for loop but somethings wrong the script ionly searches for the first elemenrt plz h elp
Sep 04 12:14:50 <han-solo>	benne: please paste the code in a sane pastebin
Sep 04 12:14:58 <han-solo>	someone might help
Sep 04 12:15:33 <benne>	https://pastebin.com/xXLRB9s7
Sep 04 12:15:33 <pasteban>	Paste is available without ads on http://pastebin.com/raw/xXLRB9s7
Sep 04 12:16:10 <benne>	imcondfues bout arrays in bash doint feel like they work same way in other langiuages
Sep 04 12:16:56 <Soliton>	!doesntwork
Sep 04 12:16:56 <greybot>	Saying something "doesn't work" helps neither you or us. Explain the result you *want* or *expect*, what you are *doing* and *how* it is failing. Copy/paste the commands you use and the errors they produce. Consider set -x to get more information on what is happening.
Sep 04 12:17:09 <osse>	benne: that for loop doesn't iterate over the array
Sep 04 12:17:23 <osse>	benne: i think what's confusing you is how "for" works, not arrays
Sep 04 12:18:44 <han-solo>	benne: # arr=(mp4 mp3 m4v); for ext in "${array[@]}"; do printf '%s ' "$ext"; done
Sep 04 12:18:56 <Soliton>	if you want to go through all extensions you need another outer loop.
Sep 04 12:19:10 <Soliton>	!$[
Sep 04 12:19:11 <greybot>	$[...] is an obsolete, deprecated syntax for math. Don't use it. Use $((...)) instead.
Sep 04 12:20:13 <han-solo>	benne: you need *two* for loops, and that will be all
Sep 04 12:26:37 <han-solo>	benne: http://ix.io/1Ueo # should work, i guess
Sep 04 12:27:25 <ksk>	Do you have the "smart questions" factoid handy? (its not "*/~sgtatham/bugs.html")
Sep 04 12:28:20 <ksk>	got it, thanks.
Sep 04 12:34:38 <Soliton>	http://www.catb.org/~esr/faqs/smart-questions.html
Sep 04 13:02:39 <kurahaupo>	# echo han-solo: like this...;  touch foo.mp3 foo.wav foo.ogg bar.wav ; for e in mp3 wav ogg ; do printf '%s\n' *."$e" ; done
Sep 04 13:02:43 <shbot>	kurahaupo: han-solo: like this...
Sep 04 13:02:43 <shbot>	kurahaupo: foo.mp3
Sep 04 13:02:43 <shbot>	kurahaupo: etc... ( http://ix.io/1Uex )
Sep 04 13:04:37 <han-solo>	kurahaupo: ?
Sep 04 13:04:48 <kurahaupo>	han-solo: only one loop needed
Sep 04 13:05:05 <kurahaupo>	(because of the way that printf handles extra args)
Sep 04 13:05:19 <han-solo>	kurahaupo: ah, i see. :)
Sep 04 13:05:32 <han-solo>	didn't think about that. Nice
Sep 04 13:05:51 <ychaouche>	Hello #bash
Sep 04 13:06:15 <kurahaupo>	ychaouche: Greetings, welcome to #bash. Ask your question
Sep 04 13:07:36 <ychaouche>	I would like to paste a number of lines into a while or for loop to process, how can I do that ?
Sep 04 13:07:43 <ychaouche>	with <<EOF maybe ?
Sep 04 13:08:23 <han-solo>	sure
Sep 04 13:08:39 <ychaouche>	https://gist.githubusercontent.com/ychaouche/1bb068cc2c40a2a16bc5eb63cf8f1fd2/raw/4646491f0ce799e0b20d6d0506a6b75bab132c3c/gistfile1.txt
Sep 04 13:09:19 <ychaouche>	han-solo, can't figure that out ^^'
Sep 04 13:10:06 <kurahaupo>	ychaouche: while read file ; do somecmd <&3 ; done 3<&1 <<EOF ... EOF
Sep 04 13:10:38 <kurahaupo>	ychaouche: <<EOF provides input to a program; it doesn't arguments
Sep 04 13:11:26 <ychaouche>	kurahaupo, maybe "while read line" is more appropriate variable name ?
Sep 04 13:11:28 <kurahaupo>	ychaouche: to put that another way, "cat" reads its standard input, but "for" does not
Sep 04 13:11:54 <han-solo>	kurahaupo: is that `do somecmd "$file"` ?
Sep 04 13:12:17 <kurahaupo>	ychaouche: if the lines contain filenames, the I'd say "file". If they contain IP addresses, then I'd say "ipaddr"; If they contain english text, then "line".
Sep 04 13:12:28 <kurahaupo>	han-solo: yeah probably
Sep 04 13:12:31 <ychaouche>	kurahaupo, ah ok just wanted to make sure.
Sep 04 13:12:54 <han-solo>	kurahaupo: Yeah, i was wondering
Sep 04 13:13:32 <ychaouche>	kurahaupo, your solution seems to work
Sep 04 13:13:56 <han-solo>	kurahaupo: and do one need the new fd ?
Sep 04 13:14:31 <kurahaupo>	han-solo: mostly for the sake of avoiding the image-magick issue
Sep 04 13:14:45 <han-solo>	kurahaupo: oh, Okay. Good to know
Sep 04 13:14:50 <ychaouche>	so I'm using a third file descriptor in the input of the while command but I'm not explicitely affecting the part in <<EOF .. EOF as belonging to fd 3, will bash affect that by default ? (incremental fds...)
Sep 04 13:15:04 <kurahaupo>	han-solo: just always tell people to pinhole their stdin, so the redirection doesn't break things when they use more complicated cases
Sep 04 13:15:33 <han-solo>	Okay. Cool
Sep 04 13:15:44 <ychaouche>	(it also works with a random fd number like 23)
Sep 04 13:15:45 <kurahaupo>	However one could equally write: while read <&3 thingy ; do fumble "$thingy" ; done 3<<EOF ... EOF
Sep 04 13:16:00 <kurahaupo>	and in hindsight, the latter is perhaps more obvious
Sep 04 13:20:03 <han-solo>	Yeah
Sep 04 13:22:40 <kurahaupo>	One important point about <<EndMarker in the shell, which differs from other languages that provide it: the heredoc starts on the beginning of the next line; the command parsing continues until the end of the current line. Which means you can stack multiple <<EoM on a single line; the second heredoc starts on the line following the closing EndMarker of the first <<, etc
Sep 04 13:23:34 <kurahaupo>	(Perl does it this way too, but PHP does not)
Sep 04 14:35:57 <bqq>	alias you='if test "$EUID" = 0 ; then /sbin/yast2 online_update ; else su - -c "/sbin/yast2 online_update" ; fi'
Sep 04 14:36:15 <bqq>	where is this alisa coming from?
Sep 04 14:36:38 <Soliton>	some file on your hard disk.
Sep 04 14:37:34 <Soliton>	PS4='+($?) $BASH_SOURCE:$FUNCNAME:$LINENO:' bash -xlic : 2> >(grep alias)
Sep 04 14:37:37 <jtmusky_>	try "grep -rF alias /location"
Sep 04 14:37:58 <Soliton>	adjust bash options to what kind of shell you care about.
Sep 04 14:38:50 <bqq>	i grepped /etc not found
Sep 04 14:40:10 <han-solo>	bqq: which OS ?
Sep 04 14:40:24 <bqq>	opensuse
Sep 04 14:40:36 <mingdao>	clue was yast2
Sep 04 14:40:42 <han-solo>	yum whatprovieds /sbin/yast2
Sep 04 14:40:53 <han-solo>	and then look at the files, that package provides
Sep 04 14:41:05 <han-solo>	s/whatprovieds/whatprovides/
Sep 04 14:41:10 <Soliton>	or just look at the output of the command above.
Sep 04 14:41:30 <han-solo>	yep :)
Sep 04 14:41:31 <Soliton>	perhaps refine the grep.
Sep 04 14:54:02 <bqq>	Soliton: wow, that is great diagnosis tool
Sep 04 14:59:34 <bqq>	Soliton: why 2> is used instead of 1>?
Sep 04 15:01:19 <Soliton>	!xtracefd
Sep 04 15:01:20 <greybot>	In bash 4.x, the shell variable BASH_XTRACEFD allows you to specify a different file descriptor for xtrace (set -x) output. This can be useful when you want to redirect it elsewhere, without affecting the rest of stderr.
Sep 04 15:01:44 <Soliton>	set -x outputs to stderr by default.
Sep 04 15:06:15 <rajendra>	guys, whenever i enter the command from other folder: m2-cache-flush
Sep 04 15:06:21 <rajendra>	the terminal is closed
Sep 04 15:06:24 <rajendra>	https://pastebin.com/X2wA355y
Sep 04 15:06:24 <pasteban>	Paste is available without ads on http://pastebin.com/raw/X2wA355y
Sep 04 15:06:26 <rajendra>	is the script
Sep 04 15:08:31 <bqq>	Soliton: interesting that : is a valid bash command
Sep 04 15:08:47 <osse>	rajendra: the reason is the "exit 1"
Sep 04 15:08:49 <Soliton>	!:
Sep 04 15:08:49 <greybot>	: is a builtin identical to the true builtin; they do nothing and have an exit status of 0
Sep 04 15:08:52 <osse>	you might want to just return there instead
Sep 04 15:09:28 <rajendra>	I added exit 0 and return 1, still the same issue
Sep 04 15:09:35 <rafasc>	osse: but then calling it assertM2Root doesn't make much sense.
Sep 04 15:10:02 <rajendra>	that check makes sure you run that command only from M2Root which has those files
Sep 04 15:10:09 <osse>	rajendra: not the way it's written now, no
Sep 04 15:10:13 <osse>	that was for rafasc
Sep 04 15:10:23 <Soliton>	!return
Sep 04 15:10:23 <greybot>	Every Unix process returns an exit status code to its parent. This is an unsigned 8-bit integer, 0 to 255 inclusive, with 0 meaning "success" and 1-255 meaning "failure". A script returns the exit status of the last command executed, unless you call "exit" with an argument. Functions "return" an 8-bit status code also.
Sep 04 15:10:37 <osse>	rajendra: you have to communicate the error in a different way then. exit won't work since it's a function and not a separate script
Sep 04 15:10:45 <Soliton>	well, not quite what i hoped.
Sep 04 15:11:10 <Soliton>	assertM2Root || return
Sep 04 15:11:56 <bqq>	Soliton: what produced those extra ++ at the beginning?
Sep 04 15:12:13 <Soliton>	you can probably even do return 2 but that's weird...
Sep 04 15:13:07 <Soliton>	bqq: the first character of PS4 is repeated per level.
Sep 04 15:13:36 <bqq>	ah great
Sep 04 15:20:53 <rajendra>	@Soliton, so it should be assertM2Root && command ?
Sep 04 15:23:03 <rajendra>	https://pastebin.com/JbyFTeQR -> like this?
Sep 04 15:23:03 <pasteban>	Paste is available without ads on http://pastebin.com/raw/JbyFTeQR
Sep 04 15:24:53 <Soliton>	well, you still exit so no.
Sep 04 15:25:24 <rajendra>	assertM2Root -> how it should look like then
Sep 04 15:25:33 <Soliton>	you may want to add a newline to your message, btw.
Sep 04 15:25:33 <osse>	rajendra: return 1 instead of exit 1
Sep 04 16:56:05 *	Disconnected ()
**** ENDING LOGGING AT Wed Sep  4 16:56:05 2019

**** BEGIN LOGGING AT Wed Sep  4 16:56:30 2019

Sep 04 16:56:30 *	Now talking on #bash
Sep 04 16:56:30 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 04 16:56:30 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 04 16:56:30 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 04 16:58:17 <jamie_1>	Soliton: im working on it, im still a bit new to bash. I'll wrap my head around it some day XD
Sep 04 16:59:13 <learning_2_learn>	Soliton: What is best way to enumerate a file. I have file which one filepath one each line. I just wanna loop through it.
Sep 04 16:59:36 <Soliton>	!faq 1
Sep 04 16:59:36 <greybot>	https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
Sep 04 17:00:03 <greycat>	Acknowledging what bash *can't* do is important.  You can try to pass variables, including array variables, by reference, using declare -n, but be aware that this is dodgy as hell, and requires you to mangle EVERY local variable name in the function to avoid collisions.
Sep 05 09:58:43 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep  5 09:58:43 2019

**** BEGIN LOGGING AT Thu Sep  5 09:59:06 2019

Sep 05 09:59:06 *	Now talking on #bash
Sep 05 09:59:06 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 05 09:59:06 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 05 09:59:07 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 05 09:59:18 <b1tninja>	any decent editors with some sort of syntax highlighting
Sep 05 09:59:34 <b1tninja>	I am having trouble finding my syntax error, I know i'm missing a ; or \ or ' " ) somewhere
Sep 05 09:59:44 <b1tninja>	but it complains at the end of the file because of a done token
Sep 05 09:59:56 <b1tninja>	vim didn't make the problem jump out at me
Sep 05 10:01:58 <twb>	b1tninja: apt install shellcheck
Sep 05 10:06:53 <b1tninja>	man I tried to make a regex to lex some bash awhile back.... my god... think about getting the length of a variable in a string  inside an array inside a subshell and then add a comment to the end of the line
Sep 05 10:07:19 <b1tninja>	ie something like $(echo lol "${#foo}") # bar
Sep 05 10:07:40 <b1tninja>	do not envy whatever lalr/whatever
Sep 05 10:13:08 <twb>	b1tninja: it
Sep 05 10:13:13 <twb>	b1tninja: it's not regular, so a regexp cannot work
Sep 05 10:18:26 <b1tninja>	lol
Sep 05 10:20:57 <Soliton>	!cult
Sep 05 10:20:57 <greybot>	The Cult Of The Regex. This eldritch brotherhood is dedicated to the dogma that Every Problem Must Be Solved By A Regular Expression, Preferably A PCRE. They will invent ludicrous problems whose only feasible solution is a regular expression, driving all men mad.
Sep 05 10:24:32 <twb>	See also /msg fsbot jwz-fix2
Sep 05 11:17:18 <thican>	Hello everyone, might I have some help please about the binary oprator "=~", as defined in Condtional Constructs? https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Conditional-Constructs As defined too on the wiki https://wiki.bash-hackers.org/syntax/ccmd/conditional_expression#regular_expression_matching
Sep 05 11:18:04 <Riviera>	!ask
Sep 05 11:18:05 <greybot>	If you have a question, please just ask it. Don't look for topic experts. Don't ask to ask. Don't PM! Don't ask if people are awake, or in the mood to help. Just ask the question straight out, and be patient waiting for an answer. http://mywiki.wooledge.org/NetEtiquette
Sep 05 11:18:12 <thican>	Currently, on Bash version 4.4.23 implementation, the following test return falls : [[ "test/files/content.txt" =~ "^test" ]]; echo $?
Sep 05 11:18:22 <thican>	Riviera: Thanks, I am not that fast ;-)
Sep 05 11:18:39 <Riviera>	thican: quoted parts of the regex will be interpreted literally.
Sep 05 11:19:00 <Riviera>	# [[ ^test =~ "^test" ]] && echo true
Sep 05 11:19:01 <shbot>	Riviera: true
Sep 05 11:19:09 <Riviera>	# [[ test =~ ^test ]] && echo true
Sep 05 11:19:10 <shbot>	Riviera: true
Sep 05 11:19:39 <survietamine>	falls? :D
Sep 05 11:19:45 <Riviera>	# set -x; [[ $var =~ "^test" ]]
Sep 05 11:19:46 <shbot>	Riviera: + [[ '' =~ \^test ]]
Sep 05 11:20:02 <thican>	*False" ;-)
Sep 05 11:20:32 <thican>	oh, ok, I shouldn't have quote the left part, ok, I see.
Sep 05 11:20:45 <survietamine>	you said on 4.4.23, so, did you mean that it worked on previous version?
Sep 05 11:21:02 <survietamine>	the left?
Sep 05 11:21:44 <survietamine>	I believe you want to remove quotes on right part
Sep 05 11:21:45 <thican>	No, still here
Sep 05 11:21:57 <Riviera>	thican: There are issues with that with older variants of bash, the behaviour changed across versions (see the compat* shopt options if you are curious); a way o make it work across versions is to put the regex in a variable and use it unquoted in the [[ .. ]] command.
Sep 05 11:22:11 <thican>	I just gave the version as it might help people
Sep 05 11:23:17 <Riviera>	(could also be that the manpage does not address this, i never read it)
Sep 05 11:23:31 <Riviera>	(the compat*-stuff i mean)
Sep 05 11:24:33 <thican>	Well, thanks for the help.
Sep 05 11:27:50 <thican>	Well, but I might have a stupid question: if I don't quote the left part, I might have more than 2 parameters
Sep 05 11:28:18 <thican>	so I should escape the space caracter on the ERE part?
Sep 05 11:28:28 <thican>	and then, not quoting it?
Sep 05 11:28:38 <thican>	(let's try this)
Sep 05 11:31:52 <Soliton>	doesn't matter if you quote the left part or not. that part is not a regex just a string.
Sep 05 11:34:17 <tuskkk____>	how do we save all the commands ever invoked via the terminal?
Sep 05 11:36:40 <thican>	Soliton: I was referencing to the "Number of Arguments Rules" of the classic test command (which [[ ]] is its modern variant). https://wiki.bash-hackers.org/commands/classictest#number_of_arguments_rules
Sep 05 11:37:48 <thican>	But as the Wiki says this last, "Bash doesn't need to apply the normal commandline parsing rules"
Sep 05 11:38:18 <thican>	*about this last
Sep 05 11:39:35 <Soliton>	sure, you have to quote/escape as everywhere else to tell bash what belongs to one argument.
Sep 05 11:40:35 <Soliton>	i.e. [[ foo bar =~ baz ]] is not going to work.
Sep 05 11:42:04 <thican>	Then I don't understand how not quoting the ERE variable is not providing more arguments
Sep 05 11:44:01 <Soliton>	because [[ is special. unquoted expansions are not wordsplit.
Sep 05 11:44:25 <Soliton>	# type [[
Sep 05 11:44:26 <shbot>	Soliton: [[ is a shell keyword
Sep 05 11:45:49 <AlecTaylor>	hi
Sep 05 11:46:32 <AlecTaylor>	I've got a large variable. How do I modify argmax so I can use it? - Or is there something other than envsubst and sed that I can use that will replace my variable with contents?
Sep 05 11:47:00 <Soliton>	!argmax
Sep 05 11:47:00 <greybot>	The kernel constant ARG_MAX defines the maximum number of bytes that can be passed to exec(3). On Linux since libc 2.8, this value is determined dynamically based upon the system, and is not hardcoded. # http://www.in-ulm.de/~mascheck/various/argmax/
Sep 05 11:48:40 <Soliton>	perhaps you want to explain what you're trying to do.
Sep 05 11:50:39 <thican>	Thanks all, have a nice day/night.
Sep 05 11:51:24 <AlecTaylor>	Soliton: html="$(find -type d -name '.git' -exec bash -c 'GIT_DIR="$0" GIT_WORK_TREE="$0" git --no-pager log --date='iso-strict' --pretty=format:"<tr><th>%ad</th><th><p><i>${PWD##*/}</i>: %B</p></th></tr>"' {} 2>/dev/null \;)";
Sep 05 11:51:29 <AlecTaylor>	sed "s/${TABLE}/$html/" git-log.html > index.html;
Sep 05 11:51:29 <AlecTaylor>	envsubst < git-log.html > index.html
Sep 05 11:51:45 <AlecTaylor>	As you can see, I'm trying to get a nice HTML table of my git logs
Sep 05 11:52:03 <AlecTaylor>	(I've got more arguments around filtering by date and author, but you get the gist)
Sep 05 11:53:40 <Soliton>	is it intentional that you redirect find's stderr to /dev/null in the middle of the command?
Sep 05 11:54:02 <Soliton>	really weird placement.
Sep 05 11:54:20 <AlecTaylor>	Yeah, I was getting "fatal: your current branch 'master' does not have any commits yet" errors
Sep 05 11:54:48 <Soliton>	so you want to redirect stderr of git.
Sep 05 11:55:01 <Soliton>	that's not what you're doing.
Sep 05 11:55:18 <AlecTaylor>	Yeah. There's only three executions here, `find`, `bash`, and `git`
Sep 05 11:55:23 <Soliton>	i mean it happens as well this way, of course.
Sep 05 11:55:51 <Soliton>	anyway, i'd write the html to a file.
Sep 05 11:55:59 <AlecTaylor>	Anyway, in terms of using this output and streaming it to a table in a bigger HTML document, what's the trick?
Sep 05 11:56:37 <Soliton>	seems unlikely that crazy sed injection is going to work at all.
Sep 05 11:56:40 <AlecTaylor>	Okay, so I pipe to a file, and then pipe the file into envsubst?
Sep 05 11:57:16 <Soliton>	you already do that.
Sep 05 11:57:22 <AlecTaylor>	Yeah but it fails
Sep 05 11:57:32 <Soliton>	i doubt that.
Sep 05 11:57:35 <AlecTaylor>	So I was thinking instead of storing in a bash variable I would pipe it
Sep 05 11:57:42 <AlecTaylor>	Soliton: As in it reaches argmax
Sep 05 11:57:47 <Soliton>	your sed call fails.
Sep 05 11:58:02 <AlecTaylor>	Soliton: I tried sed because envsubst failed. Would prefer to just use envsubst
Sep 05 11:58:24 <Soliton>	how did envsubst fail?
Sep 05 11:59:28 <AlecTaylor>	-bash: /usr/bin/env: Argument list too long
Sep 05 12:00:03 <Soliton>	are you also allowed to disclose how you invoked it?
Sep 05 12:00:34 <AlecTaylor>	Sure, what do you need to know?
Sep 05 12:00:46 *	AlecTaylor is running Bash 5.0.11(1)-release
Sep 05 12:03:21 <Soliton>	is it really that difficult to provide relevant info? if the argument list is too long obviously i need to see the argument list.
Sep 05 12:03:48 <Soliton>	i cannot guess how in the world the argument list to envsubst would be too long.
Sep 05 12:04:00 <Soliton>	that makes no sense.
Sep 05 12:04:29 <AlecTaylor>	Just go to your repo directory and run this
Sep 05 12:04:31 <Soliton>	if it's the same as the sed call you have a single variable.
Sep 05 12:04:37 <AlecTaylor>	html="$(find -type d -name '.git' -exec bash -c 'GIT_DIR="$0" GIT_WORK_TREE="$0" git --no-pager log --date='iso-strict' --pretty=format:"<tr><th>%ad</th><th><p><i>${PWD##*/}</i>: %B</p></th></tr>"' {} \;)"; /usr/bin/env -i html="$html" PATH='/usr/local/bin' envsubst < git-log.html > index.html
Sep 05 12:05:13 <Soliton>	ok, so the env is too big, right.
Sep 05 12:05:48 <Soliton>	well, as i said put the html in a file instead.
Sep 05 12:05:58 <AlecTaylor>	Will that overcome the argmax limit?
Sep 05 12:06:17 <Soliton>	since the html will not be in the env, yes.
Sep 05 12:06:31 <Soliton>	can't use envsubst then though.
Sep 05 12:06:52 <Soliton>	what does git-log.html look like?
Sep 05 12:08:40 <AlecTaylor>	It's larger, but something like: <!DOCTYPE HTML> <html lang="en"> 	<head> 		<meta charset="utf-8" /> </head><body> <table>${TABLE} </table></body>
Sep 05 12:09:16 <AlecTaylor>	(it also has header stuff for the table, and a bunch of styling)
Sep 05 12:17:17 <Soliton>	perhaps: awk -vf=htmlfile 'BEGIN {while (getline < f) html=html $0 "\n"} {sub("\$\{TABLE\}", html)} 1' git-log.html
Sep 05 13:53:30 <Riviera>	Soliton: btw, the macOS /usr/bin/awk does not like -vf=.., it has to be -v f=..
Sep 05 13:57:07 <Soliton>	ah, i was wondering a bit about that. it was mostly a typo but it did work for me.
Sep 05 14:08:18 <trrgrnd>	hello guys
Sep 05 14:16:37 <mingdao>	trrgrnd: http://www.nohello.com/
Sep 05 14:24:40 <trrgrnd_>	exit
Sep 05 14:35:33 <fichtl>	!cult
Sep 05 14:35:33 <greybot>	The Cult Of The Regex. This eldritch brotherhood is dedicated to the dogma that Every Problem Must Be Solved By A Regular Expression, Preferably A PCRE. They will invent ludicrous problems whose only feasible solution is a regular expression, driving all men mad.
Sep 05 14:41:37 <trrgrnd>	hello guys, i'm newbie in weechat. what are you disscussing here?
Sep 05 14:47:32 <djph>	trrgrnd: bash.
Sep 05 14:49:29 <mingdao>	trrgrnd: Whenever you join a channel on FreeNode, issue /topic to get the answer to that question.
Sep 05 15:02:03 <ice9>	"ls -ld .?* | awk '{print $9}'  | xargs -I {} du -hs  {}"  why this is not showing anything?
Sep 05 15:02:31 <greycat>	!ls
Sep 05 15:02:31 <greybot>	DO NOT USE ls' output for anything. ls is a tool for interactively looking at directory metadata. Any attempts at parsing ls' output with code are broken. Globs are much more simple AND correct: ''for file in *.txt''. Read http://mywiki.wooledge.org/ParsingLs
Sep 05 15:02:42 <greycat>	What are you actually trying to do?
Sep 05 15:03:12 <ice9>	greycat, trying to list only hidden dirs and files and get this 'du'
Sep 05 15:03:18 <ice9>	their*
Sep 05 15:04:12 <survietamine>	you don't need ls
Sep 05 15:04:46 <greycat>	du -sh .[!.]*
Sep 05 15:07:54 <ice9>	thanks
Sep 05 15:10:34 <wwilliam>	is shellcheck.net down?
Sep 05 15:10:53 <greycat>	oh man, if only the internet had a web site where you could see if a site is down for everyone or just me
Sep 05 15:13:01 <survietamine>	the most well-known doesn't always work as expected
Sep 05 15:13:37 <survietamine>	example: https://downforeveryoneorjustme.com/postfix.org
Sep 05 15:14:01 <survietamine>	It doesn't look working well for http only sites
Sep 05 15:14:44 <greycat>	well, that example gives the "correct" result, or at least a result that matches my web browser's opinion, though I would need to try an outside DNS resolver to be sure
Sep 05 15:15:33 <survietamine>	that site auto removes www. in "www.postfix.org" and then it fails on postfix.org
Sep 05 15:15:57 <greycat>	your URL only had postfix.org without the www.
Sep 05 15:16:01 <survietamine>	no
Sep 05 15:16:07 <survietamine>	I typed www.postfix.org
Sep 05 15:16:15 <survietamine>	the site removed it
Sep 05 15:16:33 <survietamine>	but, I found another site that works well, ofc
Sep 05 15:16:45 <greycat>	then you should have typed it in the example you gave in IRC, but ok, yeah, now that I know what you were actually trying to *say*, you are correcgt
Sep 05 15:17:35 *	greycat exits from the shell where he could resolve IP addresses without going through the fucking corporate DNS nameservers
Sep 05 15:17:36 <survietamine>	yes, sorry, I didn't explain well.
Sep 05 15:17:41 <knstn>	You can simply install shellcheck on your machine
Sep 05 15:20:11 <wwilliam>	my shellcheck is not giving me any output
Sep 05 15:20:20 <greycat>	yay?
Sep 05 15:20:22 <survietamine>	jlol
Sep 05 15:20:33 <wwilliam>	~$ shellcheck axaftpfnlpro7_dec
Sep 05 15:20:34 <wwilliam>	afernandez@debian:~$
Sep 05 15:20:46 <wwilliam>	and i know there are bad things in there.
Sep 05 15:21:09 <greycat>	so you wanted to look for a newer version of it on the web, but your browser said "no way"?
Sep 05 15:21:36 <wwilliam>	no I just use the web page never use the install one.
Sep 05 15:21:53 <wwilliam>	so now i went to the installed one and dont work.
Sep 05 15:21:54 <greycat>	then what the hell is 09:20  wwilliam> ~$ shellcheck axaftpfnlpro7_dec
Sep 05 15:22:43 <wwilliam>	using shellcheck
Sep 05 15:30:43 <wwilliam>	ok is working now i had to use ./ at the beggining of the "script"
Sep 05 15:33:30 <survietamine>	I'm not sure about the others, but it's still vague to me.
Sep 05 15:34:37 <gl>	5
Sep 05 15:34:41 <gl>	sorry
Sep 05 16:11:38 <kaushal>	Hi
Sep 05 16:12:36 <kaushal>	I am facing this issue https://paste.centos.org/view/bb5a163d#hfekUj4mBQvUvUCxKvzecpImYJ2UIxkt
Sep 05 16:13:20 <lopid>	you are facing a url?
Sep 05 16:13:37 <kaushal>	lopid: url?
Sep 05 16:14:03 <kaushal>	lopid: Sorry i did not understand
Sep 05 16:14:09 <lopid>	it's not looking good
Sep 05 16:14:13 <kaushal>	ok
Sep 05 16:14:32 <han-solo>	url is fine, but is that ..
Sep 05 16:14:50 <kaushal>	Invalid JSON payload received
Sep 05 16:14:55 <greycat>	a URL is a Uniform Resource Locator, which is a string that tells a web user agent what information to retrieve, from what server, using what protocol
Sep 05 16:16:03 <han-solo>	kaushal: actually, this looks like a JSON issue. You are passing invalid json. '{ "thread": {    "name": "spaces/AAAAChyUB4U/threads/ESj2RJru2as"  },"text": "*"":* "" " "Nagios notification: " }'
Sep 05 16:16:37 <kaushal>	han-solo: ok
Sep 05 16:17:30 <kaushal>	han-solo: Issue in GCHAT_MSG="{ \"thread\": {    \"name\": \"$ROOM_ID\"  },\"text\": \"*\"$2\":* \"$4\" \"$5 \"Nagios notification: $6\" }"
Sep 05 16:18:05 <greycat>	kaushal: are you trying to create JSON and put it in a bash variable?
Sep 05 16:18:13 <greycat>	!jqcreate
Sep 05 16:18:13 <greybot>	To create JSON strings with variable assignments: jq -nc --arg bar "$bar" '{foo:$bar}' ;# compare with awk -v awkvar="$bashvar"
Sep 05 16:18:29 <kaushal>	ok
Sep 05 16:49:02 <foobar55>	!qefs
Sep 05 16:49:02 <greybot>	"$Quote" "$Every" "$Fucking" "$Substitution"
Sep 05 16:50:41 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep  5 16:50:41 2019

**** BEGIN LOGGING AT Thu Sep  5 16:54:00 2019

Sep 05 16:54:00 *	Now talking on #bash
Sep 05 16:54:00 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 05 16:54:00 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 05 16:54:01 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 05 16:57:16 <_1H_A_C_K_E_R_>	hi
Sep 05 16:59:43 <BenA>	That's... a username.
Sep 05 17:00:17 <greycat>	It won't be a username for long if it continues as it has been the last few days.
Sep 05 17:02:47 <_1H_A_C_K_E_R_>	i am back
Sep 05 17:03:01 *	Patsie grabs some popcorn
Sep 05 17:03:11 <Patsie>	sounds like entertainment to me
Sep 05 17:05:40 <_1H_A_C_K_E_R_>	you need popcorn with cooldrink
Sep 05 17:05:51 <_1H_A_C_K_E_R_>	lol
Sep 05 17:07:17 <_1H_A_C_K_E_R_>	this is not a movie seene
Sep 05 17:07:26 <BenA>	Oh.
Sep 05 17:07:48 <_1H_A_C_K_E_R_>	i am real hacker
Sep 05 17:08:25 <greycat>	If you don't have anything useful to say about bash, or any questions about bash, please go elsewhere.
Sep 05 17:10:36 <_1H_A_C_K_E_R_>	139.137.128.43
Sep 05 17:10:58 <greycat>	Yes, very impressive, you have mastered the /whois command.
Sep 05 17:10:59 <_1H_A_C_K_E_R_>	New York City, NY, US
Sep 05 17:11:12 <_1H_A_C_K_E_R_>	vpn
Sep 05 17:11:15 <greycat>	We all tremble before your wizardry.
Sep 05 17:13:31 <_1H_A_C_K_E_R_>	you use vpn
Sep 05 17:13:38 <_1H_A_C_K_E_R_>	lol
Sep 05 17:14:03 <mooasaurus>	why do you exist
Sep 05 17:14:36 <greycat>	Lead poisoning, perhaps.
Sep 05 17:14:47 <jtmusky_>	r/masterhacker
Sep 05 17:16:16 <mooasaurus>	too much exposure to Flint water.. I'll buy it
Sep 05 17:16:23 <_1H_A_C_K_E_R_>	don,t angry me
Sep 05 17:17:19 <hoylemd>	that apostrophe needs to lose some weight.
Sep 05 17:17:41 <_1H_A_C_K_E_R_>	i am vailent all silent
Sep 05 17:19:01 <_1H_A_C_K_E_R_>	give me some info
Sep 05 17:19:25 <greycat>	Last warning: keep discussion on topic, or be silent, or go away.
Sep 05 17:20:37 <_1H_A_C_K_E_R_>	don,t angry me
Sep 05 17:21:46 <_1H_A_C_K_E_R_>	give some info for access code
Sep 05 17:21:49 <BenA>	I approve the imminent k-line.
Sep 05 17:21:57 *	ChanServ gives channel operator status to greycat
Sep 05 17:22:04 *	greycat sets ban on *!*@2401:1400:1:1201:0:1:8a71:4627
Sep 05 17:22:06 *	greycat has kicked _1H_A_C_K_E_R_ from #bash (_1H_A_C_K_E_R_)
Sep 05 17:22:42 *	greycat removes channel operator status from greycat
Sep 05 17:24:39 <Patsie>	it was short, but somewhat entertaining... still have some popcorn left though
Sep 05 17:29:31 <greycat>	I'm vaguely curious where he got the notion that my IP is associated with New York, but I'm not about to ask him.
Sep 05 17:30:05 <Patsie>	maybe the IRC server you're connected with
Sep 05 17:30:17 <mooasaurus>	I got here late, figured he was talking about his but didn't care to check
Sep 05 17:30:28 <Patsie>	"server   : livingstone.freenode.net [New York City, NY, US]"
Sep 05 17:30:38 <greycat>	oh, that's amusing
Sep 05 17:30:43 <Patsie>	yeah, not too bright
Sep 05 17:31:03 *	ChanServ gives channel operator status to greycat
Sep 05 17:31:05 <Patsie>	whois __01H_C_K5
Sep 05 17:31:09 <Patsie>	:)
Sep 05 17:31:11 *	greycat sets ban on *!*@2a04:9dc0:c1:7::5443:df98
Sep 05 17:31:21 *	greycat has kicked __01H_C_K5 from #bash (__01H_C_K5)
Sep 05 17:32:21 <mooasaurus>	could have at least used a different not-so-obvious nick
Sep 05 17:32:33 *	greycat removes channel operator status from greycat
Sep 05 17:33:24 <__011H_A_C_K_E_R>	LOL
Sep 05 17:33:32 *	ChanServ gives channel operator status to greycat
Sep 05 17:33:41 *	greycat sets ban on *!~etrerter@*
Sep 05 17:33:45 *	greycat has kicked __011H_A_C_K_E_R from #bash (__011H_A_C_K_E_R)
Sep 05 17:34:04 <jtmusky_>	This is going to get old fast
Sep 05 17:34:20 <phy1729>	+b *!~etrerter@*
Sep 05 17:34:36 <mooasaurus>	it'll at least take him 15 minutes or so to figure out how to change his name
Sep 05 17:35:12 <greycat>	he was using ~jack a few days ago
Sep 05 17:35:45 <mooasaurus>	ah, so they've been over that hurdle
Sep 05 17:36:43 <phy1729>	could just be a different computer with a different username
Sep 05 17:38:21 <jtmusky_>	https://www.reddit.com/r/masterhacker/comments/d02ehe/give_me_the_access_code_dont_anger_me_or_ill/
Sep 05 17:38:33 *	greycat removes channel operator status from greycat
Sep 05 19:14:39 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep  5 19:14:39 2019

**** BEGIN LOGGING AT Thu Sep  5 19:15:06 2019

Sep 05 19:15:06 *	Now talking on #bash
Sep 05 19:15:06 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 05 19:15:06 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 05 19:15:06 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 05 21:45:17 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep  5 21:45:17 2019

**** BEGIN LOGGING AT Thu Sep  5 21:45:44 2019

Sep 05 21:45:44 *	Now talking on #bash
Sep 05 21:45:44 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 05 21:45:44 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 05 21:45:44 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 05 21:47:28 <markasoftware>	jsyk my project anypaste.xyz is better than remembering curl syntax for ixio upload :)
Sep 05 21:50:21 <greycat>	nobody remembers the syntax; they just make functions or aliases to do it
Sep 05 22:14:59 <disi>	any idea why `trap "printf '%s' '$(tput setaf 7)'" DEBUG` makes my centos machines play an audible bell (and `printf 37m` in white)?
Sep 05 22:15:30 <greycat>	why on earth are you using a command sub + printf, instead of just running tput in the trap
Sep 05 22:15:30 <llua>	you not understanding how quoting works
Sep 05 22:15:54 <greycat>	trap 'tput setaf 7' DEBUG
Sep 05 22:15:57 <disi>	doh, those quotes are backwards (i've been experimenting)
Sep 05 22:17:12 <disi>	also fwiw, it's actually TXT_WHITE_FG="$(tput setaf 7)" then the trap uses TXT_WHITE_FG
Sep 05 22:17:21 <disi>	anyways, i'll try dropping the printf, thanks!
Sep 05 22:17:58 <disi>	what's weird is this "works" on ubuntu/debian
Sep 05 22:17:58 <greycat>	...
Sep 05 22:19:45 <disi>	`trap 'tput setaf 7' DEBUG` has the same behavior (audible bell + 37m)
Sep 05 22:21:00 <disi>	interesting... maybe it's interacting with a different trap... disabling that (there's only 2) removes the bell too
Sep 05 22:21:11 <disi>	`trap 'tput setaf 7' DEBUG` causes a bunch of -bash: $'\E[37m': command not found
Sep 05 22:22:08 <disi>	er... nvm. but it does bell (even as the only trap)
Sep 05 22:22:28 <Achylles>	I am trying to delete all ".git" folders on a local folder with find. It works, but a few .git folders still remain. I am using this command -> find . -depth -maxdepth 14 -type d -name ".git" -exe c rm -rf {} \;
Sep 05 22:24:19 <Achylles>	it seems that find does not reach those folders which are not so deep, but about level 8 or 9
Sep 06 08:11:44 *	Disconnected ()
**** ENDING LOGGING AT Fri Sep  6 08:11:44 2019

**** BEGIN LOGGING AT Fri Sep  6 08:12:10 2019

Sep 06 08:12:10 *	Now talking on #bash
Sep 06 08:12:10 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 06 08:12:10 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 06 08:12:12 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 06 08:20:47 <geirha>	cargo $* is wrong. Should be  cargo "$@"
Sep 06 08:21:14 <geirha>	anyway, you can write a function to do it.    cargo() { command cargo "$@" | script; }
Sep 06 08:21:54 <geirha>	oh, sie left
Sep 06 08:48:15 <osse>	They're back!
Sep 06 08:49:12 <NerdyPepper>	who is
Sep 06 08:49:19 <osse>	you
Sep 06 08:49:34 <osse>	cargo() { command cargo "$@" | script; }
Sep 06 08:49:36 <NerdyPepper>	ah my bad
Sep 06 08:50:36 <NerdyPepper>	ooo TIL `command`
Sep 06 08:50:37 <NerdyPepper>	thanks osse
Sep 06 08:51:30 <han-solo>	oh, people like `rust` more than `go` ?
Sep 06 08:51:40 <han-solo>	or is it because, rust is community based
Sep 06 08:52:18 <osse>	assume the answer to your first question is "no". what is then "it" referring to in the next one?
Sep 06 08:52:25 <NerdyPepper>	i picked up rust without any prior reasoning tbh
Sep 06 08:52:51 <han-solo>	it as in "people like `rust` because"
Sep 06 08:53:32 <han-solo>	i wanted to learn on of those, ended up learning none :|
Sep 06 08:55:59 <han-solo>	s/or//
Sep 06 08:57:51 <AlecTaylor>	hi
Sep 06 08:59:54 <NerdyPepper>	o/
Sep 06 09:01:15 <geirha>	rust looks too much like c++ and go looks too much like java for my taste
Sep 06 09:01:56 <NerdyPepper>	go looks `c` ish or atleast feels like it
Sep 06 09:02:46 <AlecTaylor>	Soliton: that awk line from yesterday didn't work. To reiterate the question:
Sep 06 09:03:14 <AlecTaylor>	How do I get over this error, without changing the argmax limit? - -bash: /usr/bin/env: Argument list too long
Sep 06 09:03:25 <AlecTaylor>	What makes this error:
Sep 06 09:03:25 <AlecTaylor>	html="$(find -type d -name '.git' -exec bash -c 'GIT_DIR="$0" GIT_WORK_TREE="$0" git --no-pager log --date='iso-strict' --pretty=format:"<tr><th>%ad</th><th><p><i>${PWD##*/}</i>: %B</p></th></tr>"' {} \;)"; /usr/bin/env -i html="$html" PATH='/usr/local/bin' envsubst < git-log.html > index.html
Sep 06 09:03:33 <NerdyPepper>	ohno
Sep 06 09:03:38 <AlecTaylor>	Where the HTML file is something like: <!DOCTYPE HTML> <html lang="en">  <head>   <meta charset="utf-8" /> </head><body> <table>${TABLE} </table></body>
Sep 06 09:03:50 <Soliton>	!doesntwork
Sep 06 09:03:50 <greybot>	Saying something "doesn't work" helps neither you or us. Explain the result you *want* or *expect*, what you are *doing* and *how* it is failing. Copy/paste the commands you use and the errors they produce. Consider set -x to get more information on what is happening.
Sep 06 09:03:55 <NerdyPepper>	pastebin please
Sep 06 09:04:15 <AlecTaylor>	That's the full example taken from many smaller snippets in this chat from yesterday
Sep 06 09:06:27 <han-solo>	`go` is `c`ish for me, without the `;`s
Sep 06 09:06:59 <geirha>	the html is probably too large to fit in env then
Sep 06 09:07:18 <han-solo>	Very nice to read, imho
Sep 06 09:07:32 <geirha>	why is it even added to env in the first place?
Sep 06 09:08:30 <geirha>	ah, nevermind, I see.
Sep 06 09:09:03 <geirha>	but you'll need to find a different way of doing the substitution, one that doesn't require the html to be included as environment variable or argument
Sep 06 09:09:55 <AlecTaylor>	geirha: Because envsubst is nice?
Sep 06 09:10:35 <geirha>	well ... not when your single env variable exceeds the argmax limit
Sep 06 09:10:49 <AlecTaylor>	xDDD
Sep 06 09:15:09 <geirha>	cat > index.html << EOF
Sep 06 09:15:13 <geirha>	<html><body><table>
Sep 06 09:15:15 <geirha>	$(find ...)
Sep 06 09:15:22 <geirha>	</table></body></html>
Sep 06 09:15:24 <geirha>	EOF
Sep 06 09:15:55 <geirha>	or { print '<html>...\n'; find ...; printf '...</html>\n'; } > index-html
Sep 06 09:17:15 <snatcher>	shbot
Sep 06 09:17:17 <geirha>	if we ignore the typos ... *coffee*
Sep 06 09:17:20 <NerdyPepper>	is this a static site generator kinda thing?
Sep 06 09:42:34 <snatcher>	is it ok to use xargs as whitespace normalizer?
Sep 06 09:42:58 <survietamine>	what's that?
Sep 06 09:43:17 <Riviera>	snatcher: likely not.
Sep 06 09:43:49 <survietamine>	you want to convert tabs to spaces?
Sep 06 09:44:05 <kurahaupo>	snatcher: tr -s ' \t' ' '
Sep 06 09:44:19 <snatcher>	trim trailing/repeating whitespaces
Sep 06 09:44:20 <earnestly>	\\v
Sep 06 09:44:50 <snatcher>	kurahaupo: it doesn't trim trailing
Sep 06 09:45:08 <kurahaupo>	snatcher: I know, but you hadn't asked that when I gave that response
Sep 06 09:45:09 <earnestly>	Well because those are two different operations
Sep 06 09:45:29 <snatcher>	# printf '%s\n' '  s    s   s  ' | xargs
Sep 06 09:45:30 <shbot>	snatcher: s s s
Sep 06 09:45:52 <kurahaupo>	snatcher: sed 's/[[:space:]][[:space:]]*/ /g; s/^ //; s/ $//'
Sep 06 09:46:26 <kurahaupo>	snatcher: so do you want to keep lines or wrap them? (And if so, with what rules for what not to wrap?)
Sep 06 09:48:51 <kurahaupo>	snatcher: tr -s ' \t\r\n' ' ' # assuming you just want newlines converted to spaces as well; add any other white-space characters you want to the others in the 2nd parameter
Sep 06 09:51:47 <snatcher>	kurahaupo: \t ?
Sep 06 09:52:38 <kurahaupo>	snatcher: ASCII codepoint 9
Sep 06 09:53:02 <kurahaupo>	snatcher: otherwise known as the "TAB character"
Sep 06 09:55:00 <kurahaupo>	snatcher: just checking your understanding of the shell, that in this case the second parameter starts at the first single quote mark and ends at the second one - and that those quotes are stripped off before 'tr' gets the parameter; the first parameter is -s and the third parameter is a single space
Sep 06 09:55:01 <geirha>	tr -s '[:space:]' '[ *]'
Sep 06 09:55:35 <kurahaupo>	geirha: I'm pretty sure the [] in the 3rd arg are unnecessary/wrong
Sep 06 09:56:06 <kurahaupo>	as is the *
Sep 06 09:56:15 <geirha>	it's recommended by posix; for when set1 is longer than set2
Sep 06 09:56:46 <kurahaupo>	That strikes me as fundamentally incompatible with traditional tr logic
Sep 06 09:58:01 <geirha>	because sysv and bsd had different behavior when the sets had different lenghts
Sep 06 09:58:35 <kurahaupo>	which one replicates the final character "as many as needed"?
Sep 06 09:59:22 <kurahaupo>	And what should happen if I  write: tr '{_+}' '[ *]'
Sep 06 10:00:02 <geirha>	it tells tr that all four characters translate to space, same as tr '{_+}' '    '
Sep 06 10:00:10 <kurahaupo>	ewwww
Sep 06 10:01:07 <kurahaupo>	so I just have to make sure I don't have the replacement param match /^\[.\*\]$/ ?
Sep 06 10:01:38 <geirha>	you'll need to escape the [ then, yes
Sep 06 10:02:12 <kurahaupo>	the obvious way would be to reorder the bytes: tr '-+{}' ' *[]'
Sep 06 10:02:27 <kurahaupo>	oh wait, not - first
Sep 06 10:02:37 <kurahaupo>	tr '+{}-' '*[] '
Sep 06 10:03:43 *	kurahaupo is saddened that one of the simplest, easiest-to-understand utilities, has grown ugly sharp complexity horns to gash the unwary
Sep 06 10:04:53 <kurahaupo>	geirha: your answer suggests that BSD & SysV versions could have differing behaviour even when they're the same length
Sep 06 10:05:43 <geirha>	yes
Sep 06 10:06:04 <geirha>	so posix had to make some hard choices
Sep 06 10:06:42 <kurahaupo>	:-(
Sep 06 10:07:21 <geirha>	though BSD and GNU tr both use the BSD-behavior for the unspecified parts
Sep 06 10:09:01 <geirha>	but then you have BSD tr that handles multibyte characters vs GNU tr that doesn't. Much fun
Sep 06 10:10:26 <geirha>	$ tr å a <<< å # BSD
Sep 06 10:10:28 <geirha>	a
Sep 06 10:10:30 <geirha>	$ gtr å a <<< å # GNU
Sep 06 10:10:32 <geirha>	aa
Sep 06 10:11:37 <kurahaupo>	geirha: argh. I'm supposing you have LANG=*.UTF-8 ?
Sep 06 10:12:00 <Kartagis>	hello
Sep 06 10:12:06 <geirha>	# export LC_ALL=nb_NO.UTF-8; tr å a <<< å
Sep 06 10:12:07 <shbot>	geirha: aa
Sep 06 10:12:15 <Kartagis>	what am I doing wrong here? http://paste.debian.net/1099162/
Sep 06 10:12:24 <geirha>	!check
Sep 06 10:12:25 <checkbot>	Kartagis: Line 7: i appears unused. Verify use (or export if used externally). See https://shellcheck.net/?id=cb57544
Sep 06 10:12:59 <geirha>	to iterate N times, use a C-style for-loop.  for (( i = 0; i < $1; ++i ))
Sep 06 10:13:09 <kurahaupo>	Kartagis: you want «for i in "$@"» rather than «in $1»
Sep 06 10:13:12 <geirha>	but make sure $1 consists only of digits first
Sep 06 10:13:29 <kurahaupo>	Kartagis: (which is actually the default, so you can just write « for i do wget ... »
Sep 06 10:14:03 <Kartagis>	geirha: oh sorry, I must have mispasted. there is a redirection i.e. > $i.jpg
Sep 06 10:14:21 <kurahaupo>	geirha: sounds like your interpretation is more likely correct
Sep 06 10:14:28 <kurahaupo>	s/interpretation/guesswork/
Sep 06 10:14:39 <Kartagis>	kurahaupo: why do I want "$@"?
Sep 06 10:15:05 <osse>	you don't in this case.
Sep 06 10:15:26 <kurahaupo>	Kartagis: You probably don't, if you intend $1 to be a numeric value as a counter or limit
Sep 06 10:15:33 <osse>	kurahaupo made a complete FOOL out of him and/or herself
Sep 06 10:15:35 <osse>	:p
Sep 06 10:15:41 <geirha>	if [[ $1 != +([0-9]) ]]; then printf >&2 'Bad number: %s\n' "$1"; exit 1; fi; for (( i = 0; i < 10#$i; ++i )); do curl "...$3.jpg" > "$i.jpg"; done
Sep 06 10:15:44 <osse>	jk i<3u xoxo
Sep 06 10:16:08 <kurahaupo>	osse: yeah I'm having a bad day. I blame it on the newly acquired flu
Sep 06 10:16:24 <Kartagis>	when I do lorempixel.sh 5 1000 1000, it saves two files; one 1000 and one 5.jpg. this is my actual problem.
Sep 06 10:16:38 <kurahaupo>	osse: (not *completely* stupid though, that line is obviously wrong, I just guessed the wrong "right" way)
Sep 06 10:16:59 <kurahaupo>	Kartagis: did you fix the "for" as geirha said?
Sep 06 10:17:09 <geirha>	Kartagis: with your current code, the for-loop would only iterate once
Sep 06 10:18:55 <Kartagis>	kurahaupo: I just did. do I need "done" after that?
Sep 06 10:19:41 <geirha>	... I did include the done
Sep 06 10:20:13 <kurahaupo>	Kartagis: ok, if those parts of the syntax aren't obvious to you, maybe we need to step back a bit. Start by unwrapping the "for" loop onto 3 lines, for ... ; do, then wget, then done. THEN change just the first line to: for ((i=1 ; i<$1; ++i)) do
Sep 06 10:20:14 <geirha>	but, I typoed $1 as $i in there
Sep 06 10:20:23 <geirha>	if [[ $1 != +([0-9]) ]]; then printf >&2 'Bad number: %s\n' "$1"; exit 1; fi; for (( i = 0; i < 10#$1; ++i )); do curl "...$3.jpg" > "$i.jpg"; done
Sep 06 10:21:12 <geirha>	(previous one had 10#$i which is obviously wrong)
Sep 06 10:21:13 <kurahaupo>	Kartagis: use what geirha just wrote, but unwrap it onto separate lines; put linebreaks after "then" and "do", and replace semicolons by linebreaks, and then indent sanely
Sep 06 10:22:12 <kurahaupo>	Kartagis: lastly, you should check that you get THREE arguments, not just one.
Sep 06 10:22:54 <kurahaupo>	Kartagis: if (( $# != 3 )) ; then printf >&2 'Wrong number of args\n' ; exit 1 ; fi
Sep 06 10:24:13 <Kartagis>	sweet
Sep 06 10:24:14 <geirha>	and you may want to add some validation for the other two arguments as well
Sep 06 10:25:10 <Kartagis>	this is a quick throw together, I will fix it later as per your suggestions. thanks a lot all
Sep 06 10:26:15 <Kartagis>	hrm
Sep 06 10:26:29 <kurahaupo>	for c in "$2" "$3" ; do if [[ $c = *(.) ]]; then printf >&2 'Bad arg "%s"\n' "$c" ; exit 1 ; fi done # not allowed to be empty, ., or .. (nor ..., which would be a silly name for a file)
Sep 06 10:27:37 *	kurahaupo wonders whether, for pedagogic, a semicolon should have been included between "fi" and "done"
Sep 06 10:27:47 <geirha>	the +([0-9]) test is probably applicable to the two other args too
Sep 06 10:28:09 <geirha>	they are presumably width and height in pixels
Sep 06 10:29:25 <kurahaupo>	for c do [[ $c = +([[:digit:]]) ]] || die "Invalid parameter $c" ; done # but must define "die" first
Sep 06 10:31:45 <kurahaupo>	geirha: Do you have an opinion on the non-looping method: [[ " $* " = @(*'  '*|*[! 0-9]*) ]] || die ...  # most people either love it or hate it
Sep 06 10:32:07 <kurahaupo>	err, that should be &&
Sep 06 10:34:29 <geirha>	it'll accept empty args
Sep 06 10:38:05 <Kartagis>	there are perks to slo internet connection you know.
Sep 06 10:38:19 <Kartagis>	I can see what I did wrong.
Sep 06 10:38:51 <kurahaupo>	geirha: the non-loop verrsion won't; that's why it prohibits double-space.
Sep 06 10:39:43 <kurahaupo>	(The worst flaw is that it permits spaces within an arg)
Sep 06 10:40:00 <Kartagis>	with `or (( i=0;i<$1;i++ )); do wget "http://lorempixel.com/$2/$3" > "$i.jpg"; done`, it saves over 600 multiple times.
Sep 06 10:40:02 <kurahaupo>	The second-worst flaw is that it's arcane
Sep 06 10:40:08 <Kartagis>	doh!
Sep 06 10:40:34 <Kartagis>	> vs -o
Sep 06 10:40:37 <Kartagis>	damn!
Sep 06 10:44:34 <geirha>	that's why mine used curl
Sep 06 11:17:53 <fkl>	I want to 'ls' all files that doesn't have the '.mp4' extension.
Sep 06 11:18:02 <fkl>	I tried the following:
Sep 06 11:18:20 <fkl>	ls *.[^m][^p][^4]
Sep 06 11:18:34 <Soliton>	!extglob
Sep 06 11:18:34 <greybot>	"Extended globs" (shopt -s extglob) allow you to say things like "all files that do not end in .jpg". See http://mywiki.wooledge.org/glob#extglob
Sep 06 11:21:57 <fkl>	Soliton: thanks.  I wil use extglob; but can you point out why my attempt is a non-solution?
Sep 06 11:22:22 <Soliton>	because it excludes more than you want.
Sep 06 11:22:33 <Soliton>	every file ending with 4 for example.
Sep 06 11:26:21 <geirha>	and it will also exclude files ending with .mp3
Sep 06 11:30:31 <Patsie>	and it will only list files with exactly 3 letter extensions
Sep 06 11:31:01 <Patsie>	3 characters*
Sep 06 11:31:46 <fkl>	ls !(*.mp4) exhibits one undesired behavior; and that is it it ls the contents of a subdirectory
Sep 06 11:31:55 <fkl>	I want to suppress that behavior
Sep 06 11:32:05 <geirha>	ls -d
Sep 06 11:33:41 <fkl>	right; I've used that flag before.  Thanks!
Sep 06 12:52:38 <CaptainQuirk>	Hi there ! I'm executing a small bash script that launches the urxvt terminal. The script itself is executed via a process launched in a small nodejs cli app
Sep 06 12:53:06 <CaptainQuirk>	However, when executed from a urxvt terminal, instead of opening a new one, it uses the current one instead
Sep 06 13:05:31 <osse>	CaptainQuirk: sounds like fancy logic inside urxvt itself.
Sep 06 13:05:38 <osse>	maybe there's a urxvt --new-instance flag or whatever?
Sep 06 13:07:44 <CaptainQuirk>	Apparently, the -hold flag is mandatory here
Sep 06 13:08:18 <CaptainQuirk>	thanks anyhow ;-) !
Sep 06 13:09:29 <Kartagis>	hello again
Sep 06 13:09:45 <Kartagis>	how can I correctly do this? seq=$(seq 1 ${i})
Sep 06 13:09:59 <osse>	!for((
Sep 06 13:09:59 <greybot>	C-style for loop: for (( expr; expr; expr )); do COMMANDS; done # Each expr is done in a math context. Example: for ((i=1; i<=n; i++)); do echo "$i"; done. Use in place of the non-working: for i in {1..$number}
Sep 06 13:12:50 <CaptainQuirk>	nay, it doesn't work actually ! It launches a new window but the command that I need to execute within is not executed
Sep 06 13:14:14 <Kartagis>	osse: yes geirha told me about that, but this is my problem: I have ` for i in {1..${i}}; do wget "http://lorempixel.com/$2/$3" -o "$i.jpg"; done`  but when I do foo 5 900 600, it writes two files; {1..}.jpg and 600
Sep 06 13:16:05 <geirha>	!pf ..$
Sep 06 13:16:06 <greybot>	https://mywiki.wooledge.org/BashPitfalls#pf33 -- Don't do this! -- for i in {1..$n}
Sep 06 13:16:19 <Kartagis>	whereas
Sep 06 13:16:27 <osse>	Yes he told you about that. Now use it
Sep 06 13:16:42 <osse>	Also, do you overwrite $i here?
Sep 06 13:16:46 <osse>	or did you mean $1
Sep 06 13:17:34 <Kartagis>	whereas `for (( i=0;i<$1;i++ )); do wget "http://lorempixel.com/$2/$3" -o "$i.jpg"; done`  writes the first 5 images, then 600.*
Sep 06 13:18:44 <osse>	need to see the full code
Sep 06 13:22:21 <Kartagis>	osse: it's currently http://paste.debian.net/1099192/
Sep 06 13:30:56 <osse>	the loop itself forks just fine. you can do a rudimentary verification by just writing echo in front of wget
Sep 06 13:31:04 <osse>	wget is doing something strange. i see it here too
Sep 06 13:31:29 <Kartagis>	phew. I thought it was me.
Sep 06 13:34:01 <Kartagis>	hrm, wget and curl are acting weird
Sep 06 13:34:06 <rafasc>	not weird at all, it is doing what you asking
Sep 06 13:34:15 <rafasc>	go check what -o does int he manpage.
Sep 06 13:34:34 <rafasc>	you probably meant -O
Sep 06 13:35:49 <Kartagis>	yay
Sep 06 13:35:55 <Kartagis>	thanks a lot rafasc
Sep 06 13:36:15 <Kartagis>	I don't know how -o got stuck in my head.
Sep 06 13:36:39 <rafasc>	I know, curl.
Sep 06 13:40:23 <osse>	Praise be
Sep 06 13:40:25 <ameliadolly>	Hey
Sep 06 13:40:32 <osse>	The rafasc must flow
Sep 06 13:42:05 <ameliadolly>	Who want to dating with me and earn money join here http://kortlink.no/gYs
Sep 06 13:43:28 <rafasc>	Kartagis: also, might be a good idea to store it under its <hash>.jpg and use something like --no-clobber, so you don't get duplicates
Sep 06 13:46:40 <ameliadolly>	You can join in here for get money baby http://kortlink.no/gYs
Sep 06 13:48:01 <pj>	!ops
Sep 06 13:48:01 <greybot>	dreisner dualbus e36freak geirha greycat heiner izabera jipe koala_man lhunath maqr ormaaj osse pgas pragma- remote revdiablo Riviera Samus_Aran sunny sysfault TheBonsai twkm uniplex \amethyst
Sep 06 13:50:49 <peter22222>	Hi folks! I try to push my time to my ssh server with ssh pi@172.16.10.19 "sudo date -s \"$(date)\""     but the doesnt seem to be valid... anybody an idea why it s not working?
Sep 06 13:51:13 <survietamine>	!ssh
Sep 06 13:51:13 <greybot>	Secure SHell (#openssh, http://mywiki.wooledge.org/CategorySsh). To run rm "$localVar" remotely, use: printf 'rm %q\n' "$localVar" | ssh user@host bash
Sep 06 13:52:07 <survietamine>	why don't you just configure NTP and timezone properly?
Sep 06 13:52:56 <ameliadolly>	Join and see the video naked I am here for free http://kortlink.no/gYs
Sep 06 13:53:16 <peter22222>	the pis dont have internet access, so i wanted to frequently push the current date to them
Sep 06 13:54:31 <creme>	hello #bash
Sep 06 13:55:00 <creme>	i think i have a small issue on my bash script in line 55 [1]. anyone have a idea whats wrong here? thanks
Sep 06 13:55:04 <creme>	[1] - https://git.envs.net/envs/ops/src/branch/master/bin/envs_user_updated.sh
Sep 06 13:55:31 <creme>	this script generated a json file: https://envs.net/users_info.json
Sep 06 13:57:32 <pj>	took long enough
Sep 06 13:58:07 <pj>	!check
Sep 06 13:58:08 <checkbot>	creme: Line 14: Parsing stopped here. Mismatched keywords or invalid parentheses?. Line 4: This { is literal. Check expression (missing ;/\n?) or quote it. Line 5: This { is literal. Check expression (missing ;/\n?) or quote it. See https://shellcheck.net/?id=cb71088
Sep 06 13:58:31 <pj>	that might have tried to parse your json file
Sep 06 13:58:47 <pj>	https://git.envs.net/envs/ops/src/branch/master/bin/envs_user_updated.sh
Sep 06 13:58:50 <pj>	!check
Sep 06 13:58:51 <checkbot>	pj: Unable to read that :/
Sep 06 13:58:58 <pj>	heh, oookay
Sep 06 13:59:04 <creme>	https://git.envs.net/envs/ops/raw/branch/master/bin/envs_user_updated.sh
Sep 06 13:59:06 <creme>	!check
Sep 06 13:59:07 <checkbot>	creme: Looks good to me
Sep 06 14:00:04 <creme>	line 55 needs to exclude the "default string" - 'a short describtion or message'
Sep 06 14:00:14 <creme>	but it dont work :/
Sep 06 14:00:16 <pj>	creme: line 55?
Sep 06 14:00:30 <pj>	perhaps because describtion is misspelled.
Sep 06 14:02:55 <creme>	the output from: '/usr/local/bin/envs get desc' is: https://envs.sh/Qi.txt
Sep 06 14:04:43 <creme>	then i try is diretly on my shell it works: https://envs.sh/Qw.txt
Sep 06 14:04:58 <pj>	heh, so it's actually misspelled in the other program.
Sep 06 14:06:54 <pj>	creme: well, for starters the first part of that if is redundant, and it ends up running envs twice on that line.
Sep 06 14:07:29 <pj>	I would get rid of the [[ -n "$(/usr/local/bin/envs get desc)" ]] && part.  If that returns false then the second half will also return false and so the first test is not needed.
Sep 06 14:07:43 <pj>	oh, sorry
Sep 06 14:07:51 <pj>	not exactly true, the logic is wierd
Sep 06 14:10:07 <pj>	you do realize that you're actually running that same command three times just to look at the output?  That's terribly inefficient, run it once and stash the result in a variable.
Sep 06 14:19:36 <AndrewPRS>	hi there!!! I have a few files with    file1.txt file1.abc file1.cde .  How can I easily copy those files into file2.txt file2.abc and file2.cde respectively?
Sep 06 14:19:55 <AndrewPRS>	I am looking at bash's grep capabilities or rename... but I cannot find an easy way
Sep 06 14:20:01 <AndrewPRS>	I'm probably missing some bash feature
Sep 06 14:26:59 <creme>	pj: i have "fix" some things. same issue :/
Sep 06 14:27:01 <creme>	https://git.envs.net/envs/ops/src/branch/master/bin/envs_user_updated.sh
Sep 06 14:38:29 <Kumool>	AndrewPRS: maybe if you have rename { rename s/file1\.(.+)/file2\.\1/g file1.* }
Sep 06 14:38:40 <Kumool>	you can also use a for loop
Sep 06 14:39:22 <AndrewPRS>	but that would only rename
Sep 06 14:39:24 <AndrewPRS>	and not copy
Sep 06 14:39:26 <AndrewPRS>	right?
Sep 06 14:39:29 <Kumool>	ah
Sep 06 14:39:31 <Kumool>	yes
Sep 06 14:39:42 <Kumool>	for copying its gonna be trickier, you can use a for loop
Sep 06 14:43:59 <AndrewPRS>	ugh
Sep 06 14:43:59 <AndrewPRS>	:/
Sep 06 14:44:11 <AndrewPRS>	bash syntax is so damn horrible :P
Sep 06 14:45:23 <geirha>	yes. The trick is to just get used to it
Sep 06 14:45:46 <AndrewPRS>	and in that case, in a for loop
Sep 06 14:45:54 <AndrewPRS>	how can I grab the number and substitute it?
Sep 06 14:46:21 <AndrewPRS>	for example:
Sep 06 14:46:42 <AndrewPRS>	for file in file1.*; do cp "$file" _____ ; done
Sep 06 14:46:57 <AndrewPRS>	how can I alter 1->2 in that spot
Sep 06 14:46:57 <geirha>	in that case, you know the number is 1, so you can just replace with 2
Sep 06 14:47:07 <AndrewPRS>	how?
Sep 06 14:47:21 <geirha>	for file in file1.*; do echo cp "$file" "file2.${file#*.}"; done
Sep 06 14:47:31 <geirha>	echo as a dry-run
Sep 06 14:48:46 <AndrewPRS>	cp file1.* file2.*
Sep 06 14:48:50 <AndrewPRS>	:/
Sep 06 14:48:52 <greycat>	*sigh*
Sep 06 14:49:27 <greycat>	for f in file1.*; do cp "$f" "file2.${f#file1.}"; done  # is what I *suspect* you want
Sep 06 14:49:55 <AndrewPRS>	that doesnt work
Sep 06 14:50:00 <AndrewPRS>	cp: cannot stat ‘file1.*’: No such file or directory
Sep 06 14:50:00 <greycat>	Then what do you want?
Sep 06 14:50:04 <greycat>	*sigh*
Sep 06 14:50:07 <AndrewPRS>	looks like it is not expanding the *
Sep 06 14:50:08 <greycat>	fucking SERIOUSLY?!
Sep 06 14:50:22 <Kumool>	relax catman
Sep 06 14:50:23 <greycat>	did you accidentally disable pathname expansion with set -f?
Sep 06 14:50:24 <f8e3>	how to start process with fixed ip to watch via ps in a external script?
Sep 06 14:50:24 <geirha>	AndrewPRS: It means there are no matching files in the current directory
Sep 06 14:50:31 *	Kumool pets greycat
Sep 06 14:50:40 <greycat>	If you didn't accidentally run set -f, then there are no matching files, as geirha said.
Sep 06 14:50:43 <greycat>	And thus my reaction.
Sep 06 14:51:09 <AndrewPRS>	oh it works
Sep 06 14:51:09 <AndrewPRS>	:D
Sep 06 14:51:27 <AndrewPRS>	yeah, i didn't have the files file1... etc
Sep 06 14:51:30 <AndrewPRS>	it was density 1
Sep 06 14:51:30 <AndrewPRS>	:P
Sep 06 14:51:56 <AndrewPRS>	 in any case it is a weird way to report that
Sep 06 14:51:57 <Kumool>	f8e3: what does that even mean?
Sep 06 14:52:11 <AndrewPRS>	it looked like the glob wasnt working
Sep 06 14:52:13 <f8e3>	i try to do watchdog/supervision multiple server porcesses
Sep 06 14:52:14 <Kumool>	you can use cp -v next time so you know it happened
Sep 06 14:52:25 <AndrewPRS>	ok
Sep 06 14:52:41 <osse>	AndrewPRS: if you think that is weird (I agree), you may want to shopt -s failgob. At least in interactive sessions
Sep 06 14:52:50 <osse>	failglob
Sep 06 14:53:00 <greycat>	failglob fail
Sep 06 14:53:13 <AndrewPRS>	I read some document that was agains those kind of bash error reporting
Sep 06 14:53:22 <AndrewPRS>	I read some in favor
Sep 06 14:53:44 <AndrewPRS>	but.... apparently error reporting gets quite complex with pipes etc
Sep 06 14:54:18 <greycat>	failglob means bash will complain about the missing files instead of whatever command (cp, ls, etc.) complaining about the missing files.  which could be good or bad.  the non-bash commands can give more focused error messages.
Sep 06 14:55:09 <AndrewPRS>	even with failglob
Sep 06 14:55:10 <AndrewPRS>	bash: no match: x1.*
Sep 06 14:55:30 <greycat>	bash's error messages are generic, but consistent.
Sep 06 14:55:57 <AndrewPRS>	by the way greycat, I think I was reading your guide
Sep 06 14:56:03 <AndrewPRS>	https://mywiki.wooledge.org/BashGuide
Sep 06 14:56:16 <AndrewPRS>	I found really nice tips there, thanks ;)
Sep 06 14:56:28 <AndrewPRS>	although you can see I am a bit new :P
Sep 06 14:56:36 <greycat>	most people here are new
Sep 06 14:56:46 <AndrewPRS>	I try to avoid bash if I can .... I prefer python
Sep 06 14:56:57 <AndrewPRS>	but whatever :P
Sep 06 14:56:59 *	rafasc grabs popcorn
Sep 06 14:59:42 <wwilliam>	what could be wrong?  there are 2 sh names in that dir, please dont do !check I have added notes to the paste any suggestion is greatly appreciated i need those 2 sh in the shlist.  thank you.
Sep 06 14:59:55 <wwilliam>	http://paste.debian.net/hidden/325f9190/
Sep 06 15:01:30 <greycat>	You want to expand filenames into an array?  shlist=(*.sh)
Sep 06 15:02:10 <wwilliam>	?
Sep 06 15:02:19 <greycat>	.
Sep 06 15:04:19 <Riviera>	!? > greycat
Sep 06 15:04:19 <greybot>	greycat: A question mark indicates a sentence is a question. When you see a sentence directed at you terminated with this symbol, somebody has asked you a question and is waiting for you to answer it.
Sep 06 15:04:22 <Riviera>	;D
Sep 06 15:04:34 <greycat>	I answered it.
Sep 06 15:04:45 <Riviera>	so you did :)
Sep 06 15:04:46 <wwilliam>	Yes thank you
Sep 06 15:04:49 <wwilliam>	greycat:
Sep 06 15:05:02 <wwilliam>	as always im clueless testing.....
Sep 06 15:05:56 <geirha>	It's an infinite loop. Why are you surprised that it never ends?
Sep 06 15:06:38 <wwilliam>	ok let me remove the infinite loop
Sep 06 15:06:49 <wwilliam>	what i need is that shlist populated.
Sep 06 15:07:06 <geirha>	and add set -x inside the function
Sep 06 15:07:15 <greycat>	Is shlist an array?  The name implies that it should be.  Do you want it populated with filenames that match a glob?  I told you precisely how to do that.
Sep 06 15:07:45 <wwilliam>	printf '%s\n' *.sh
Sep 06 15:08:10 <greycat>	you can use that to get an understanding of what would be used by the glob expansion
Sep 06 15:08:33 <wwilliam>	OK
Sep 06 15:08:37 <wwilliam>	Thanks.
Sep 06 15:08:41 <geirha>	the loop you have >> "$1" on (where $1 is the shlist, which is a filename), never outputs anything
Sep 06 15:08:50 <greycat>	oh, it's NOT an array?
Sep 06 15:09:56 <greycat>	I could go on to ask something like "why are you writing the names of files into a file" but you will not answer, so why fucking bother.
Sep 06 15:10:42 <wwilliam>	ok this is the task at hand:
Sep 06 15:12:40 <wwilliam>	there are sh scripts in a dir, they show little by little as soon as one show i must execute it, once they have been executed, i must move them somewhere else so they dont get executed twice.
Sep 06 15:12:47 <wwilliam>	example:
Sep 06 15:13:00 <rdz>	hey all. how can i look up the reverse look up entry of a certain domain? i'm looking for something like the ping output, but i'd rather not parse the output of ping
Sep 06 15:13:02 <geirha>	wcgw...
Sep 06 15:13:33 <rdz>	for instance, i have 'google.com' and i want: zrh11s02-in-f4.1e100.net
Sep 06 15:13:55 <wwilliam>	script a.sh
Sep 06 15:13:56 <greycat>	rdz: your OS may provide tools like dig, host, dnsqr, getent, nslookup, etc.  Pick one.
Sep 06 15:14:04 <greycat>	wwilliam: *plonk*
Sep 06 15:14:04 <wwilliam>	scripta.sh
Sep 06 15:14:12 <wwilliam>	scriptb.sh
Sep 06 15:14:16 <wwilliam>	and so on.
Sep 06 15:14:20 <greycat>	That goal is fucking ludicrous.  I will not even listen to it.
Sep 06 15:14:28 <wwilliam>	well that is what they told me to do
Sep 06 15:14:32 <geirha>	wwilliam: that really sounds like a terrible idea, but the problem with your code is that it never writes to this shlist file, so it will never contain any data
Sep 06 15:14:34 <mooasaurus>	rdz: dig -x google.com
Sep 06 15:14:37 <wwilliam>	and whats more stupid
Sep 06 15:14:39 <knstn>	wwilliam: if you read the "arrays" sections in bashguide on wooledge, you can do it
Sep 06 15:14:47 <wwilliam>	is that every one of those sh's
Sep 06 15:14:57 <wwilliam>	is only one line with sh into it.
Sep 06 15:15:20 <rdz>	mooasaurus, thanks, but that doesn't return what i requested.. or does it for you?
Sep 06 15:16:12 <rdz>	greycat, thanks i know those tools, but wasn't able to achieve what i want with them easily
Sep 06 15:16:37 <greycat>	you could start by explaining how you got the result "zrh11s02-in-f4.1e100.net" by hand, because it's not clear to me at all
Sep 06 15:16:56 <rdz>	greycat, "ping google.com"
Sep 06 15:17:07 <greycat>	wooledg:~$ ping google.com
Sep 06 15:17:07 <greycat>	PING google.com (172.217.8.174) 56(84) bytes of data.
Sep 06 15:17:07 <greycat>	64 bytes from ord37s08-in-f14.1e100.net (172.217.8.174): icmp_seq=1 ttl=51 time=8.59 ms
Sep 06 15:17:10 <greycat>	64 bytes from ord37s08-in-f14.1e100.net (172.217.8.174): icmp_seq=2 ttl=51 time=8.19 ms
Sep 06 15:17:18 <rdz>	returns: "64 bytes from zrh11s03-in-f14.1e100.net (172.217.168.14): icmp_seq=1 ttl=50 time=2.57 ms"
Sep 06 15:17:54 <rdz>	greycat, obviously google.com resolves to different IPs, depending on country, i guess
Sep 06 15:18:15 <rdz>	however, i'm interested in having the domain that ping is showing
Sep 06 15:18:17 <greycat>	so you want the PTR record from whichever IPv4 address you happen to get at a particular moment?
Sep 06 15:18:41 <rdz>	greycat, that's probably a more proper description of what i want.. yes
Sep 06 15:20:06 <greycat>	well, you'd use whatever tools your OS provides, so your OS channel or #dns would be the best starting points
Sep 06 15:20:25 <rdz>	greycat, thanks...i'll keep trying
Sep 06 15:20:48 <wwilliam>	will this do?
Sep 06 15:20:50 <wwilliam>	for x in ./*sh;do if [[ -f "$x" ]]; then sh "$x";fi;done && if [[ -f "$x" ]]; then mv "$x" shdone/ ;fi
Sep 06 15:20:55 <greycat>	wooledg:~$ getent hosts google.com
Sep 06 15:20:56 <greycat>	2607:f8b0:4009:803::200e google.com
Sep 06 15:20:56 <greycat>	wooledg:~$ dig +short google.com
Sep 06 15:20:56 <greycat>	wooledg:~$
Sep 06 15:21:01 <greycat>	it's a fucking nightmare
Sep 06 15:21:07 <wwilliam>	ah ok
Sep 06 15:21:14 <wwilliam>	thanks will keep trying.
Sep 06 15:22:51 <rdz>	this has the output I want, but are still many extra words: host -t PTR $(dig x +short google.com)
Sep 06 15:23:35 <Riviera>	host and dig? :D
Sep 06 15:24:08 <greycat>	wooledg:~$ dig @ebase-fla +short -x "$(dig @ebase-fla +short google.com)"
Sep 06 15:24:08 <greycat>	ord37s09-in-f14.1e100.net.
Sep 06 15:24:20 <greycat>	so, ONE of my resolvers gives me answers, and the other does not...
Sep 06 15:24:56 <Riviera>	weird setup :)
Sep 06 15:25:10 <rdz>	greycat, thanks.. that's much nicer than what i have
Sep 06 15:25:22 <greycat>	the one that gives answers is running dnscache from djbdns
Sep 06 15:25:31 <greycat>	the one that does not is running bind9 from debian 10
Sep 06 15:26:07 <mooasaurus>	both masters?
Sep 06 15:26:15 <Riviera>	for google.com? :D
Sep 06 15:26:21 <greycat>	dnscache is a recursive resolver only, never a master
Sep 06 15:27:34 <greycat>	Sep 06 09:27:15 svr5 named[3615]: broken trust chain resolving 'google.com/A/IN': 10.144.127.217#53
Sep 06 15:27:43 <greycat>	well... this is very offtopic here.
Sep 06 15:28:06 <mooasaurus>	dnssec maybe
Sep 06 15:30:24 <mooasaurus>	might be able to test that theory by fiddling with the +dnssec flag
Sep 06 16:42:16 *	Disconnected ()
**** ENDING LOGGING AT Fri Sep  6 16:42:16 2019

**** BEGIN LOGGING AT Fri Sep  6 16:42:40 2019

Sep 06 16:42:40 *	Now talking on #bash
Sep 06 16:42:40 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 06 16:42:40 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 06 16:42:41 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 06 16:48:27 <wwilliam>	how can i avoid this to create an empty line at the end of shlist? printf '%s\n' ./*.sh
Sep 06 16:48:28 <wwilliam>	http://paste.debian.net/hidden/7a200224/
Sep 06 16:49:29 <wwilliam>	+ mv -v -- '' shdone/
Sep 06 16:49:30 <wwilliam>	mv: cannot stat '': No such file or directory
Sep 06 16:49:32 <wwilliam>	+ read -r s
Sep 06 16:50:01 <wwilliam>	!check
Sep 06 16:50:02 <checkbot>	wwilliam: Looks good to me
Sep 06 16:50:43 <kerframil>	why are using printf at all? it should just be: for f in ./*.sh
Sep 06 16:53:07 <wwilliam>	ok will change kerframil thank you.
Sep 06 16:53:08 <osse>	wwilliam: the while read loop reads the whole output of the printf, including the newline. after the loop, echo adds another one
Sep 06 16:53:18 <osse>	using -d '' seems wrong in this case
Sep 06 16:53:41 <wwilliam>	ok thank you will adjust.
Sep 06 16:54:02 <greycat>	but he has to put a list of filenames in a file, so he can transfer the file to another system, where he can use the filenames from that file to look up other filenames, and write those in a file, and move that second file to a third system...
Sep 06 16:54:10 <greycat>	and you won't ever learn WHY
Sep 06 16:54:54 <wwilliam>	in this case i have to execute the list of sh on shlist
Sep 06 16:55:20 <wwilliam>	but i have to remove that empty line from shlist
Sep 06 16:55:37 <osse>	I'll quote the song in the intro to the seconds season of The Leftovers: "I think I'll just let the mystery be"
Sep 06 16:55:43 <osse>	*second
Sep 06 16:56:38 <osse>	wwilliam: printf %s "$f" instead of echo "$f" then
Sep 06 16:57:14 <wwilliam>	OK thank you.
Sep 06 16:57:52 <osse>	but I would suggest you rewrite to use a for loop like kerframil suggested. Can move the "mv" inside
Sep 06 16:57:58 <kerframil>	why is it being discussed in terms of "lines" at all?
Sep 06 16:58:09 <greycat>	oh, poor kerframil
Sep 06 16:58:15 <wwilliam>	OK
Sep 06 16:58:24 <kerframil>	greycat: what am I getting myself into?
Sep 06 16:58:43 <osse>	kerframil: millenia of secret society dealings
Sep 06 16:58:59 <kerframil>	osse: that's certainly more than I bargained for.
Sep 07 11:05:28 *	Disconnected ()
**** ENDING LOGGING AT Sat Sep  7 11:05:28 2019

**** BEGIN LOGGING AT Sat Sep  7 11:05:50 2019

Sep 07 11:05:50 *	Now talking on #bash
Sep 07 11:05:50 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 07 11:05:50 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 07 11:05:51 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 07 11:08:56 <kurahaupo>	Because usually I want only *xxx* or *XXX*, not *xXx*, and likely that's what other people want too. There's enough guidance that they could write '*[Xx][Xx][Xx]*' instead if they really mean that.
Sep 07 11:34:10 <mangKANOR>	How to remove additional text when my terminal starts so it starts in a clean state?
Sep 07 11:34:23 <mangKANOR>	My terminal shows extra messages please refer to this image https://i.imgur.com/bv9tH69.png
Sep 07 11:51:59 <earnestly>	Don't run `w' as part of your shell rc
Sep 07 12:11:39 <mangKANOR>	earnestly thanks
Sep 07 13:40:19 <Razva>	I would like to make a script that uses a file that I specify when executing the script. example: ./script.sh myfile.zip
Sep 07 13:45:21 <osse>	Razva: inside the script you can refer to the file as "$1"
Sep 07 13:46:13 <Razva>	if I already have a script that has `example="myfile.zip"` can I use `example="$2"` so I don't need to rewrite the entire script?
Sep 07 13:50:25 <osse>	Razva: not entirely sure what you mean, but you can give several arguments and refer to them inside the script as "$1", "$2", ....
Sep 07 13:50:29 <osse>	Or "$@" for all of them
Sep 07 13:50:32 <osse>	!faq arg
Sep 07 13:50:32 <greybot>	https://mywiki.wooledge.org/BashFAQ/029 -- How can I display the target of a symbolic link?
Sep 07 13:50:35 <osse>	oh
Sep 07 13:50:38 <osse>	never mind that
Sep 07 15:21:41 <g0zzy>	I'm having a great deal of difficulty removing 'punctuation' characters from files.  My latest effort involves rename "s/[^\w-_.]//g" but it has weird side effects. Before we get into that, is there are known way of doing this?
Sep 07 15:25:22 <{xmb}>	what all punctation chars u wanna remove, are there many ?
Sep 07 15:26:14 <g0zzy>	Could be anything. Latest nasties include backticks, circumflex
Sep 07 15:26:47 <{xmb}>	maybe make a whitelist like a-z
Sep 07 15:27:05 <{xmb}>	or find fitting charmaps on google and parse them etc
Sep 07 15:27:07 <g0zzy>	If i use an inclusive pattern it causes all sorts of quoting problem
Sep 07 15:27:28 <{xmb}>	thats syntax usage err
Sep 07 15:28:07 <{xmb}>	btw rename ".." u pasted, inside " instead of ' u need \\w instead or \w whatever w is
Sep 07 15:28:19 <g0zzy>	Yes, of course. The exclusive one above should probably do it, but i get a (probably Perl) error
Sep 07 15:30:44 <g0zzy>	fwiw, here's the error: False [] range "\w-" in regex; marked by <-- HERE in m/[^\w- <-- HERE _.]/ at (eval 8) line 1.
Sep 07 15:31:17 <{xmb}>	i can only offer s/[^a-zA-Z0-9 ]+//g and similiar
Sep 07 15:32:32 <{xmb}>	maybe use :alnum: .. and other stuff id not know so much
Sep 07 15:33:25 <g0zzy>	Thanks, i might get rid of \w. Think it doesn't like that
Sep 07 15:33:41 <{xmb}>	=)
Sep 07 15:38:41 <{xmb}>	try your \w thing inside single instead of double quotes
Sep 07 15:58:37 <g0zzy>	Actually single quotes still produce the error
Sep 07 16:04:10 <mknod>	  <g0zzy> Could be anything. Latest nasties include backticks, circumflex
Sep 07 16:04:34 <mknod>	That's much more than just punctuation. Good luck with that.
Sep 07 16:06:49 <{xmb}>	alnum space somehow
Sep 07 16:06:56 <mknod>	Some versions of iconv may help to strip out the diacritics, among other tools needed here. But you best bet is using another language imho.
Sep 07 16:13:52 <g0zzy>	Actually the 'longhand' version of \w is working OK for now
Sep 07 17:11:12 *	Disconnected ()
**** ENDING LOGGING AT Sat Sep  7 17:11:12 2019

**** BEGIN LOGGING AT Sat Sep  7 17:11:34 2019

Sep 07 17:11:34 *	Now talking on #bash
Sep 07 17:11:34 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 07 17:11:34 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 07 17:11:46 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 07 17:45:00 <chowbok>	I'm writing a script that needs to issue this command:
Sep 07 17:45:02 <chowbok>	mpc search '(GENRE == "instrumental")'
Sep 09 09:21:29 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep  9 09:21:29 2019

**** BEGIN LOGGING AT Mon Sep  9 09:21:51 2019

Sep 09 09:21:51 *	Now talking on #bash
Sep 09 09:21:51 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 09 09:21:51 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 09 09:21:51 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 09 09:26:09 <rafasc>	ls3dev33: what about sed -n '/^1234|/p' /scripts/epg/Schedule.txt ?
Sep 09 09:26:53 <ls3dev33>	will try sed
Sep 09 09:27:00 <ls3dev33>	how about with multiple items
Sep 09 09:27:10 <ls3dev33>	like search this,this,this,this,this within file
Sep 09 09:28:29 <lopid>	##sed
Sep 09 09:45:02 <rafasc>	ls3dev33: Never had grep gobble that much memory, maybe splitting the file into multiple pieces, would help to determine what input is causing that...
Sep 09 10:52:00 <pigeon123>	Dump > $((  % 10 )).tar         dash exit after this.    bash carries on.
Sep 09 10:53:44 <Soliton>	why does dash exit?
Sep 09 10:54:11 <pigeon123>	arithmetic expression: expecting primary "  % 10"
Sep 09 10:54:27 <Soliton>	and what does bash say?
Sep 09 10:54:27 <pigeon123>	I'm surprised
Sep 09 10:54:41 <pigeon123>	bash: operand expected
Sep 09 10:54:47 <Soliton>	what did you expect?
Sep 09 10:55:04 <pigeon123>	I expected bash to carry on. I was surprised by dash
Sep 09 11:01:02 <earnestly>	What do you mean by "carry on"?
Sep 09 11:01:09 <pigeon123>	Next line
Sep 09 11:02:17 <earnestly>	It's as if dash has set -e set
Sep 09 11:02:33 <pigeon123>	I know about that. It doesn't
Sep 09 11:02:44 <earnestly>	Hm
Sep 09 11:03:16 <earnestly>	I can reproduce it in bash
Sep 09 11:03:26 <geirha>	# bash -c $'echo $(( % 10 ))\necho $? still here'
Sep 09 11:03:28 <shbot>	geirha: bash: % 10 : syntax error: operand expected (error token is "% 10 ")
Sep 09 11:03:28 <shbot>	geirha: 1 still here
Sep 09 11:03:31 <geirha>	# dash -c $'echo $(( % 10 ))\necho $? still here'
Sep 09 11:03:32 <shbot>	geirha: dash: 1: arithmetic expression: expecting primary: " % 10 "
Sep 09 11:03:35 <geirha>	yup
Sep 09 11:04:02 <geirha>	# bash -o posix -c $'echo $(( % 10 ))\necho $? still here'
Sep 09 11:04:03 <shbot>	geirha: bash: % 10 : syntax error: operand expected (error token is "% 10 ")
Sep 09 11:04:11 <pigeon123>	Oh
Sep 09 11:04:14 <geirha>	and in posix mode it behaves the same as dash
Sep 09 11:04:29 <earnestly>	geirha: bash -c 'echo foo > $(( % 10)).tar; echo hello' # this doesn't print hello, but if I changed echo foo to `ls' or some other command, it does
Sep 09 11:05:56 <geirha>	Hm. I get the same behavior with builtins and external commands
Sep 09 11:06:21 <geirha>	# bash -c $'echo > $(( % 10 ))\necho $? still here'
Sep 09 11:06:22 <shbot>	geirha: bash: % 10 : syntax error: operand expected (error token is "% 10 ")
Sep 09 11:06:22 <shbot>	geirha: 1 still here
Sep 09 11:06:26 <geirha>	# bash -c $'ls > $(( % 10 ))\necho $? still here'
Sep 09 11:06:27 <shbot>	geirha: bash: % 10 : syntax error: operand expected (error token is "% 10 ")
Sep 09 11:06:27 <shbot>	geirha: 1 still here
Sep 09 11:07:09 <geirha>	ah, but you used ; instead of newline, maybe that's the determining factor
Sep 09 11:07:49 <geirha>	indeed. When using a builtin, it throws away the whole line
Sep 09 11:44:01 <nvz>	how to move and merge say a .config/ with ~/.config/
Sep 09 11:44:09 <nvz>	or move an quash/overwrite
Sep 09 11:45:43 <nvz>	I'd improperly rsync'd a homedir and done mv user/* . and mv user/.* . which seems to have fixed all but three dotdirs that exist
Sep 09 11:47:03 <nvz>	the goal was migrating the user's data from an old machine to a new fresh install
Sep 09 11:50:19 <nvz>	I've just rm -rf the dirs and then moved the old ones but I was trying to get the right proceedure into my head :P
Sep 09 12:49:01 <ricks_>	Hi, is it normal to set an incrementing variable in a for loop to -1 so the first variable is included? ex
Sep 09 12:49:03 <ricks_>	AZ=( {a..z} ); X=($(echo "1 2 3")); Y=${#X[@]}; for ((i=-1; i<$Y; i++)); do    echo "${AZ[i+1]},${X[i+1]}"; done
Sep 09 12:50:07 <ricks_>	or should i just be using [i] instead of [i+1]
Sep 09 12:51:45 <falconindy>	just use i.
Sep 09 12:51:49 <falconindy>	initialize to 0
Sep 09 12:51:58 <kerframil>	no, I would not describe that as normal. if your subscripts are always +1, what's the point? also, -1 has a special meaning as a subscript so it could be dangerous.
Sep 09 12:52:28 <kerframil>	# arr=(1 2 3); echo "${arr[-1]}"
Sep 09 12:52:29 <shbot>	kerframil: 3
Sep 09 12:52:55 <kerframil>	i+1, I meant.
Sep 09 12:53:12 <ricks_>	oh, didn't know about that last bit, thanks
Sep 09 12:54:25 <kerframil>	also: for i in "${!X[@]}"; do ...
Sep 09 12:54:51 <ricks_>	ha, much simpler
Sep 09 12:54:55 <kerframil>	will iterate over the actual indices. even with a sparse array.
Sep 09 13:06:40 <Abdullah>	How can I print 0 to screen if there are no files in some directory?
Sep 09 13:08:16 <kerframil>	do you need to do anything with the files that were counted afterwards?
Sep 09 13:10:42 <Abdullah>	kerframil: yeah.
Sep 09 13:11:10 <kerframil>	using an array is a good fit then.
Sep 09 13:12:13 <kerframil>	# shopt -s nullglob; mkdir empty; files=(empty/*); if (( ${#files[@]} == 0 )); then echo 0; else declare -p files; fi
Sep 09 13:12:14 <shbot>	kerframil: 0
Sep 09 13:12:38 <kerframil>	# shopt -s nullglob; mkdir nonempty; touch nonempty/{foo,bar,baz}; files=(nonempty/*); if (( ${#files[@]} == 0 )); then echo 0; else declare -p files; fi
Sep 09 13:12:39 <shbot>	kerframil: declare -a files=([0]="nonempty/bar" [1]="nonempty/baz" [2]="nonempty/foo")
Sep 09 13:12:41 <Abdullah>	kerframil: what I wanna achieve is LIKE if there are some files in maildir, I should get an output like 0 mails or 10 mails
Sep 09 13:12:59 <kerframil>	so you don't actually need to do anything with the files after counting them.
Sep 09 13:13:14 <kerframil>	well, you can still use an array anyway, among other methods.
Sep 09 13:13:21 <Abdullah>	yeah, I just want an output for another program
Sep 09 13:20:25 <kerframil>	Abdullah: if you just want a regular file count, maybe this will be easier for you to understand (as long as your find supports the -printf option): find /path/to/dir -type f -printf . | wc -c
Sep 09 13:20:53 <kerframil>	ergo, print a dot for each file and count the characters.
Sep 09 13:21:45 <kerframil>	there's a lot more detail here:
Sep 09 13:21:47 <kerframil>	!faq 4
Sep 09 13:21:47 <greybot>	https://mywiki.wooledge.org/BashFAQ/004 -- How can I check whether a directory is empty or not?  How do I check for any *.mpg files, or count how many there are?
Sep 09 13:22:33 <Abdullah>	kerframil: lemme check but I'm sure the other C program isn't gonna accept the `|`
Sep 09 13:23:08 <kerframil>	but this is bash, right?
Sep 09 13:23:25 <Abdullah>	I'm redirecting the output to C program.
Sep 09 13:23:33 <kerframil>	what is its expected input?
Sep 09 13:24:20 <Abdullah>	https://git.suckless.org/slstatus/file/components/run_command.c.html
Sep 09 13:24:36 <Abdullah>	lemme try it
Sep 09 13:24:48 <falconindy>	lolz popen
Sep 09 13:25:05 <falconindy>	popen invokes a shell, so you can cram whatever nonsense you want in there.
Sep 09 13:26:57 <kerframil>	so it will tolerate '|'
Sep 09 13:30:05 <Abdullah>	accepted. Can't I append `mails` to output?
Sep 09 13:36:19 <kerframil>	echo "$(find ... | wc -l) mails"
Sep 09 13:36:22 <kerframil>	er, wc -c
Sep 09 13:58:53 <oskie>	is there a command that would sleep until some wall clock time, that isn't a daemon like crontab/at?
Sep 09 13:59:12 <{xmb}>	you'd maybe script it yourself
Sep 09 14:00:34 <oskie>	yeah, i'm currently calculating the difference in seconds and sleeping, but if there is some change in server clock, time synch or other thing, it may be off
Sep 09 14:00:50 <{xmb}>	bash-5.0$ echo sleep $(( $( date -d 'Mon, Sep  9, 2019  4:59:46 PM' +%s ) - $( date +%s ) ))
Sep 09 14:00:51 <{xmb}>	sleep 10745
Sep 09 14:01:04 <{xmb}>	before it was 1:59 for 4:59 changed to see
Sep 09 14:01:37 <oskie>	sleep --until='tomorrow 07:00' <- that'd be nice
Sep 09 14:01:52 <{xmb}>	yea but no utilities support such
Sep 09 14:01:55 <{xmb}>	they are out of date
Sep 09 14:02:34 <{xmb}>	bash-5.0$ echo sleep $(( $( date -d 'tomorrow 7 am' +%s ) - $( date +%s ) ))
Sep 09 14:02:34 <{xmb}>	sleep 61053
Sep 09 14:03:15 <knstn>	That video yesterday gave me ideas: So if i have a file, can i import all the strings inside it, in a indexed array, do my manipulations/patter matching on the array, and "flush" back the elements of the array?
Sep 09 14:03:31 <geirha>	while sleep 10; do printf -v now '%(%Y-%m-%d %H:%M:%S)T' -1; [[ $now < '2019-09-09 16:59:46' ]] || break; done
Sep 09 14:03:48 <{xmb}>	no understood yer non code knstn
Sep 09 14:05:07 <knstn>	question 1: i have a text file with 3 strings. can i insert those strings into an array with 3 elements?
Sep 09 14:05:14 <{xmb}>	yes
Sep 09 14:05:16 <kerframil>	knstn: mapfile
Sep 09 14:05:18 <{xmb}>	whats the data looking like
Sep 09 14:05:46 <knstn>	question 2: if i have an array with 3 elements, can i "flush" them into a text file?
Sep 09 14:06:01 <geirha>	mapfile -t lines < file; ....; printf '%s\n' "${lines[@]}" > newfile
Sep 09 14:06:04 <kerframil>	printf '%s\n' "${array[@]}" > file
Sep 09 14:06:07 <{xmb}>	kerf, do u know in mapfile -C what var to use for the data read ? or is it just array_name
Sep 09 14:06:33 <knstn>	okay, that's all i wanted to know
Sep 09 14:06:40 <geirha>	-C is for callbacks. I don't see why that would be needed or wanted here
Sep 09 14:07:03 <{xmb}>	mapfille -c 1 -C 'arr["$this_one_element"]=work' ..
Sep 09 14:07:25 <{xmb}>	i tried serialize code, but im stuck at 'dont know which var - or is it only array_name specified as last arg to mapfile'
Sep 09 14:07:52 <geirha>	{xmb}: it passes arguments to the callback, so you'll want to use a function
Sep 09 14:08:06 <{xmb}>	err arguments nice i gotta test
Sep 09 14:08:15 <kerframil>	but you can still define the array name
Sep 09 14:08:37 <{xmb}>	works perfectly
Sep 09 14:08:47 <{xmb}>	thxx big time
Sep 09 14:10:06 <{xmb}>	# declare -gA arr; mapfile -t -c 1 -C 'arr["$1"]=' <<<$'one\ntwo'; [[ -v arr['two'] ]]; printf -- %d\\n "$?"
Sep 09 14:10:09 <shbot>	{xmb}: bash: `arr["$1"]': not a valid identifier
Sep 09 14:10:10 <shbot>	{xmb}: bash: 0: command not found
Sep 09 14:10:10 <shbot>	{xmb}: etc... ( http://ix.io/1UF5 )
Sep 09 14:10:13 <{xmb}>	sorries
Sep 09 14:10:39 <geirha>	$1 only makes sense if you put it in a function
Sep 09 14:11:11 <{xmb}>	echo "$# - $@" worked fine in my tests
Sep 09 14:12:00 <{xmb}>	actually there is side effect, '++i arg' is its output
Sep 09 14:12:11 <geirha>	# _callback() { arr[$2]=; }; declare -A arr=(); mapfile -c1 -C _callback -t <<< $'foo bar\nbaz'; declare -p arr
Sep 09 14:12:12 <shbot>	geirha: declare -A arr=(["foo bar"]="" [baz]="" )
Sep 09 14:14:11 <{xmb}>	ah i get it, the data gets appeneded to the callback code
Sep 09 14:14:35 <{xmb}>	then its <callback> <number of times ran or similiar> <current data args>
Sep 09 14:15:02 <geirha>	_callback index arg
Sep 09 14:15:19 <{xmb}>	yes, or arg[s]
Sep 09 14:15:23 <{xmb}>	er
Sep 09 14:15:26 <geirha>	just one arg
Sep 09 14:15:35 <{xmb}>	thanks big time, fast help ++ilike
Sep 09 14:16:05 <{xmb}>	with the need of function spawning it seems not so efficient
Sep 09 14:16:10 <{xmb}>	ill benchmark somewhen
Sep 09 14:16:33 <geirha>	might as well just loop the array after it's done reading
Sep 09 14:16:50 <geirha>	because the indexed array will be populated regardless
Sep 09 14:16:59 <kerframil>	or use while/read in the first place
Sep 09 14:17:03 <{xmb}>	maybe yes, ill benchmark when i feel better
Sep 09 14:35:18 <ELFrederich>	Hi, I'd like to read the documentation on the bash builtin "read", but "man read" is giving me the manpage for the C function.  I tried running "man -k read"  but it seems there is only read (2)?
Sep 09 14:35:45 <Soliton>	!man
Sep 09 14:35:45 <greybot>	bash builtins and keywords do not have separate man-pages, read bash's manual instead or use the help builtin. Rule of thumb: If ''type foo'' says foo is a builtin or keyword, run ''help foo'' or ''man bash'', otherwise try man and/or info.
Sep 09 14:36:12 <ELFrederich>	help read... got it, thanks
Sep 09 14:38:03 <ELFrederich>	hmm... I can't get read -i to work or I'm not understanding what it's supposed to do
Sep 09 14:38:52 <Soliton>	are you using -e as well?
Sep 09 14:39:15 <ELFrederich>	Soliton: no... I'll try now
Sep 09 14:39:53 <ELFrederich>	Soliton: what is the benefit of using -e (other than to get -i to work as well)?
Sep 09 14:40:26 <Soliton>	you get readline features.
Sep 09 14:40:58 <geirha>	e.g. history with up-down arrow, and basic tab completion
Sep 09 14:41:00 <ELFrederich>	Soliton: oh, like pressing the arrow keys
Sep 09 14:41:02 <ELFrederich>	cool, got it
Sep 09 15:08:08 <ELFrederich>	is there a way to have commented interleaved with multi-line commands?
Sep 09 15:08:31 <ELFrederich>	For instance, I have some notes where I want to "apt install" a bunch of packages, but I'd like some little one line notes about why each one is required.
Sep 09 15:08:33 <greycat>	you mean *inside* a multi-line command?  not really, unless that command happens to be an array assignment.
Sep 09 15:09:01 <greycat>	ok, for this specific case, you could put all the package names in an array assignment, and have comments in the array assignment.
Sep 09 15:09:15 <greycat>	then after that, apt-get install "${pkgs[@]}"
Sep 09 15:09:32 *	ELFrederich googles bash array assignment
Sep 09 15:12:10 <KekSi>	it's declare -a myArray=( # and now you can have as many lines with comments behind the package names as you want followed by the closing bracket at some point )
Sep 09 15:12:46 <greycat>	pkgs=(
Sep 09 15:12:49 <greycat>	  foo1.2
Sep 09 15:12:51 <greycat>	  bar-dev
Sep 09 15:13:01 <greycat>	  # we don't want bar2-dev because blah blah blah
Sep 09 15:13:01 <greycat>	)
Sep 09 15:13:12 <KekSi>	quick reminder tho: that array can get too long to be executed in a single apt install call
Sep 09 15:13:51 <KekSi>	check ${myarray[#]} to see how long it is
Sep 09 15:14:43 <kerframil>	that's not a valid expansion.
Sep 09 15:14:52 <greycat>	you mean "${#pkgs[@]}"
Sep 09 15:14:54 <greycat>	!faq 5
Sep 09 15:14:55 <greybot>	https://mywiki.wooledge.org/BashFAQ/005 -- How can I use array variables?
Sep 09 15:15:29 <KekSi>	err yes, that's where the hash goes, sorry
Sep 09 15:15:55 <Soliton>	the array size will not tell you if the expanded array is too much for ARG_MAX anyway.
Sep 09 15:16:54 <KekSi>	no, but you could for example decide on using 10 things at a time for example
Sep 09 15:17:08 <greycat>	you can make that decision if it actually becomes an issue
Sep 09 15:17:37 <greycat>	it should also be pointed out that if you're trying to duplicate a package set from one Debian system to another Debian system, you should ask #debian how to use --get-selections
Sep 09 16:20:23 <julius_>	hi
Sep 09 16:20:30 <A_buh>	hello
Sep 09 16:20:37 <julius_>	how can i check if the  word "root" appears two times in here:  output="$(ls -alh /boot/ | awk 'BEGIN { FS=" " }; {print $4}')" ?
Sep 09 16:20:48 <also_uplime>	!ls > julius_
Sep 09 16:20:49 <greybot>	julius_: DO NOT USE ls' output for anything. ls is a tool for interactively looking at directory metadata. Any attempts at parsing ls' output with code are broken. Globs are much more simple AND correct: ''for file in *.txt''. Read http://mywiki.wooledge.org/ParsingLs
Sep 09 16:20:50 <julius_>	or at least  two times
Sep 09 16:20:57 <greycat>	what are you actually trying to do?
Sep 09 16:21:15 <also_uplime>	also, that BEGIN { FS=" " } can just be shortened to awk -F " "
Sep 09 16:21:19 <julius_>	parsind the output from nova list
Sep 09 16:21:25 <greycat>	count the number of files in /boot owned by group "root"?
Sep 09 16:21:29 <mnemonic>	exist some issue on declare a local var and setup the value at same time running a command? like:  local myvar=$(external_command)  can have some problem with it? or is better i setup: local myvar; myvar=$(external_command) ?
Sep 09 16:21:32 <also_uplime>	although awk automatically splits on whitespace anyways
Sep 09 16:21:37 <julius_>	the example was a try to dump it down
Sep 09 16:21:45 <julius_>	i know, its just  an example
Sep 09 16:21:57 <also_uplime>	mnemonic: if you don't care about the exit status then local foo=$(bar) is fine
Sep 09 16:22:02 <julius_>	my cuzrrent output is "ACTIVE ACTIVE" and i need to count the  number of actives in there
Sep 09 16:22:07 <also_uplime>	if you do care about the exit status, then you'll want to split it u
Sep 09 16:22:09 <also_uplime>	up
Sep 09 16:22:45 <mnemonic>	also_uplime: indeed, thank you
Sep 09 16:23:51 <also_uplime>	sure
Sep 09 16:23:53 <osse>	julius_: grep -c maybe
Sep 09 16:23:55 <julius_>	 test="$( nova list | awk 'BEGIN { FS = "|" } ; {print $4}')"         <- that returns "ACTIVE ACTIVE"   - how do you cound the ACTIVES and get a integer in return=?
Sep 09 16:24:56 <osse>	test="$( nova list | awk 'BEGIN { FS = "|" } $4 == "ACTIVE" { actives++ } END { print actives })"
Sep 09 16:25:00 <greycat>	without knowing what "nova list" is, or what the output of "nova list" looks like, or how it *could* look, and all the possible caveats, how do you expect anyone to answer this?
Sep 09 16:25:36 <julius_>	but i told you what is in $test   .... "ACTIVE ACTIVE" isnt that enough?
Sep 09 16:27:13 <julius_>	theres a example for nova list at the top:  https://stackoverflow.com/questions/39055651/how-to-get-only-id-name-and-networks-fields-from-openstack-nova-list
Sep 09 16:28:08 <greycat>	OK, first question, and this is hugely important: is there ANY WAY to get that output in a different format that doesn't have ASCII art line drawing around it?
Sep 09 16:28:58 <greycat>	could be "csv format" output, or "json format" output, or simply some option like --no-boxes ...
Sep 09 16:30:07 <julius_>	sorry timeout...
Sep 09 16:30:12 <julius_>	i got it:   {print $4}' | grep -c ACTIVE
Sep 09 16:31:23 <greycat>	OK, first question, and this is hugely important: is there ANY WAY to get that output in a different format that doesn't have ASCII art line drawing around it?
Sep 09 16:31:27 <greycat>	could be "csv format" output, or "json format" output, or simply some option like --no-boxes ...
Sep 09 16:33:12 <A_buh>	ahem
Sep 09 16:34:04 <A_buh>	can anyone tell me where i can unset the HISTFILE (i'll even settle for HISTSIZE) variable in bash?
Sep 09 16:34:14 <A_buh>	i'm trying to get a very specific kind of behavior for my workflow
Sep 09 16:34:37 <mingdao>	$HOME/.bashrc
Sep 09 16:34:46 <greycat>	scrolling down that stackoverflow page, it says "the -f allows you to pick output format csv, html, json, table, value, yaml."
Sep 09 16:35:12 <A_buh>	i'm glad you mentioned that mingdao. HISTFILE isn't stored there.
Sep 09 16:35:22 <A_buh>	when i look in the file i mean
Sep 09 16:35:32 <also_uplime>	it can be stored anywhere. you can still unset it there
Sep 09 16:36:45 <mingdao>	A_buh: man bash has some good explanations
Sep 09 16:37:05 <greycat>	HISTFILE is set automatically, so you're just *un*setting it
Sep 09 16:39:20 <A_buh>	yeah... according to the manpage greycat is right... it is set automatically. in my particular scenario, i need to actually find out *where* that happens...
Sep 09 16:39:33 <greycat>	it happens inside bash
Sep 09 16:39:52 <Soliton>	julius_: awk can count.
Sep 09 16:41:29 <A_buh>	inside bash? like before any scripts are loaded?
Sep 09 16:42:10 <greycat>	wooledg:~$ bash --norc --noprofile
Sep 09 16:42:11 <greycat>	bash-5.0$ echo "$HISTFILE"
Sep 09 16:42:11 <greycat>	/home/wooledg/.bash_history
Sep 09 16:42:23 <A_buh>	oh
Sep 09 16:42:34 <A_buh>	that is so annoying
Sep 09 16:42:47 <greycat>	if you want to unset it in .bashrc, just go ahead and do that
Sep 09 16:44:26 <A_buh>	i'm trying to get my terminal to ask me if i want to set it or unset it every time i load it up
Sep 09 16:45:12 <greycat>	that sounds horribly annoying
Sep 09 16:45:16 <greycat>	why would you do that to yourself
Sep 09 16:45:18 <A_buh>	but more importantly, i would like it not to be so annoying
Sep 09 16:46:13 <also_uplime>	A_buh: just unset it if you dont want it. it doesn't really matter where its set
Sep 09 16:46:35 <A_buh>	what i *really* want is to run some kind of terminal invocation command that would set the variable depending on the profile that i run the terminal in
Sep 09 16:47:03 <greycat>	what's a "profile" in this context, and how can bash know the value of this "profile"?
Sep 09 16:49:34 <A_buh>	bash is a silly monster that gets woken up by gnome-terminal
Sep 09 16:50:13 <greycat>	GNOME is in the picture.  Oh joy.
Sep 09 16:50:32 <greycat>	are you talking about an XDG_* session thingy or some kind?
Sep 09 16:50:37 <greycat>	of*
Sep 09 16:50:56 <A_buh>	i don't think so
Sep 09 16:51:27 <A_buh>	in my case, bash is invoked by gnome-terminal with the command ' sh -c "unset HISTFILE; bash" '
Sep 09 16:51:39 <greycat>	that won't work.
Sep 09 16:51:42 <A_buh>	exactly
Sep 09 16:51:54 <greycat>	bash does not CARE what HISTFILE variable was or was not in the environment of its parent
Sep 09 16:52:02 <Soliton>	so set some other variable and use it in .bashrc.
Sep 09 16:54:40 <Soo_Slow>	sometimes names of files/folders contain '" symbols (and basically everything else, allowed by ext4/linux). Is it possible to unbreak their paths? (e.g make script work correctly even is something like that appears on its way)
Sep 09 16:55:12 <Soliton>	there is a bug in your script if such filenames break it.
Sep 09 16:55:12 <greycat>	Quote correctly, never use xargs without -0, and use -- where needed in case of files that begin with - and you should be OK in most cases.
Sep 09 16:55:45 <Soliton>	if quotes break it that sounds like some kind of injection.
Sep 09 16:56:00 <greycat>	Could be, yes.
Sep 09 16:56:10 <greycat>	eval, ssh, scp, rsync
Sep 09 16:57:56 <A_buh>	Soliton: some other variable? as in create another variable and set HISTFILE to whatever it is?
Sep 09 16:58:28 <Soliton>	sure, why not.
Sep 09 16:59:20 <Soliton>	an env variable of course.
Sep 09 16:59:36 <greycat>	I'm still very unclear on what the goal is.
Sep 09 16:59:38 <A_buh>	right, because export wouldn't work
Sep 09 16:59:38 <Soliton>	you also may want to use exec to avoid that sh process.
Sep 09 16:59:58 <Soliton>	why would export not work?
Sep 09 17:00:11 <A_buh>	because HISTFILE is not an env variable
Sep 09 17:00:15 <greycat>	"because I only tested in on HISTFILE which bash of course overrides"
Sep 09 17:03:00 <A_buh>	yeah greycat bash does not respect export
Sep 09 17:03:30 <A_buh>	at least not when it comes to variables that are not env variables
Sep 09 17:03:43 <Soliton>	what does that even mean.
Sep 09 17:04:00 <A_buh>	it makes sense. i'll show it
Sep 09 17:04:03 <greycat>	It means he only tested it on HISTFILE and it didn't work so he assumed it applies to other things.
Sep 09 17:04:05 <Soliton>	env variable work just fine bash or not.
Sep 09 17:04:41 <A_buh>	no, export only works on variables in env
Sep 09 17:04:46 <also_uplime>	wut
Sep 09 17:04:46 <Soliton>	obviously if you choose the name of a special bash variable then it will do however that variable works.
Sep 09 17:05:04 <A_buh>	$ env | grep -i hist
Sep 09 17:05:05 <A_buh>	HISTSIZE=1000
Sep 09 17:05:13 <greycat>	...
Sep 09 17:05:14 <Soliton>	export is what you use to make a variable an env variable.
Sep 09 17:05:22 <greycat>	What are you trying to do?
Sep 09 17:05:31 <Soliton>	!env
Sep 09 17:05:31 <greybot>	Bash has two types of variables. Shell Variables (foo=bar) live in the running shell and are copied to subshells. Environment Variables (export foo=bar) are special variables that live in a PROCESS and are copied to each new process it creates. They are used the same way but CREATED differently. Env vars are NOT system-wide or "shared" in any way. http://mywiki.wooledge.org/Environment
Sep 09 17:05:45 <A_buh>	$ set | grep -i histfile
Sep 09 17:05:46 <A_buh>	HISTFILESIZE=2000
Sep 09 17:05:48 <A_buh>	_=HISTFILE
Sep 09 17:07:16 <Soliton>	sh -c 'MYHISTFILE=foo exec bash'  and in .bashrc:  HISTFILE=$MYHISTFILE  perhaps that does what you want.
Sep 09 17:08:13 <greycat>	Or, perhaps he could *explain* what he's doing, what a "profile" is, how .bashrc could identity which "profile" is in play, and go from there.
Sep 09 17:08:23 <Soliton>	or make a special rc file for each project you have or whatever it is you're doing.
Sep 09 17:11:47 <A_buh>	greycat: i'm on gnome. what i mean by profile is literally the thing that says "Profile Preferences" in the terminal GUI (gnome-terminal in my case)
Sep 09 17:11:50 <saint_>	I'm using this to generate passwords in bash: openssl rand -base64 10 , is there any other way to make sure I can get 10 chars, with restrictions (uppercases, lowercases, special char, and digits) from bash ? or do i need to use perl or python ?
Sep 09 17:12:13 <greycat>	So you can't or won't explain how gnome works to people you *know* don't use gnome, so we can't help you much.
Sep 09 17:12:30 <A_buh>	greycat: the idea is that my terminal handles the shortcuts to launch a profile and it would be nice to have the behavior of bash launch with a different theme depending on whether history is being logged or not
Sep 09 17:13:04 <greycat>	So you have something called a "shortcut", which is... a thing you click with the mouse?  And it does... what?  Is there a *.desktop file involved?
Sep 09 17:13:56 <greycat>	How do you configure this "shortcut", and what powers are available to you?
Sep 09 17:14:40 <greycat>	saint_: run it in an infinite loop and keep rejecting ones that you don't like
Sep 09 17:14:54 <greycat>	break out of out the loop when you're happy
Sep 09 17:14:58 <saint_>	greycat nothing easier ..?!
Sep 09 17:15:04 <greycat>	!pwgen
Sep 09 17:15:06 <saint_>	greycat like a one command line ?
Sep 09 17:15:07 <greybot>	pwgen <http://sourceforge.net/projects/pwgen/> generates passwords. Use that instead of whatever Rube Goldberg contraption you were trying to make.
Sep 09 17:15:14 <A_buh>	yeah. for example, ctrl-shift-t
Sep 09 17:15:20 <saint_>	greycat i ll check it out, thanks
Sep 09 17:15:51 <greycat>	A_buh: you press Ctrl-Shift-T with the mouse focused on ... whatever ... and it reads ... what?  A *.desktop file?  Some variable stored in dbus?
Sep 09 17:15:56 <A_buh>	it's nothing complicated. i can literally just use alt-tab and ctrl-shift-t/n
Sep 09 17:16:26 <A_buh>	greycat: that's... actually a very good point. i have no idea how gnome-terminal launches this
Sep 09 17:17:46 <greycat>	googling leads me to https://help.gnome.org/users/gnome-terminal/stable/adv-keyboard-shortcuts.html.en which seems to point to Shift-Ctrl-T being a special sequence only inside "Terminal" which I'm assuming is their internal name for gnome-terminal
Sep 09 17:18:20 <greycat>	so if you're *ALREADY INSIDE* a gnome-terminal, and you press Ctrl-Shift-T then it does this "new tab" thing, and that's what you are talking about?
Sep 09 17:18:34 <greycat>	not launching a brand new instance of gnome-terminal from the root window?
Sep 09 17:19:47 <A_buh>	yes
Sep 09 17:20:16 <A_buh>	i mean, it would be great to have the second one as well, but it's not done so often that i would absolutely *need* it
Sep 09 17:20:39 <A_buh>	just picture green terminals and red terminals
Sep 09 17:21:04 <greycat>	how do you tell it whether the new tab should be green or red?
Sep 09 17:21:11 <A_buh>	if i launch ctrl-shift-n or whatever, the terminal i launched from becomes the same color
Sep 09 17:21:47 <A_buh>	it should just be the same as the one you launched it from
Sep 09 17:21:56 *	greycat REOPENS the fucking gnome terminal documentation page ...
Sep 09 17:22:09 <A_buh>	if i launch from a green one, i get a green one... and i can alt tab to a red one to launch a red one
Sep 09 17:22:13 <greycat>	so... Shift-Ctrl-N is "new window", which I am guessing means "send a message to dbus and request a new gnome-terminal"
Sep 09 17:22:53 <greycat>	this sounds like a line of questioning for #gnome
Sep 09 17:23:52 <greycat>	"How can I configure GNOME to have two different 'colors' of gnome-terminal windows, such that if I press Ctrl-Shift-N from a 'red' window I get a new 'red' window, or from a 'green' window I get a new 'green' window?"
Sep 09 17:24:04 <A_buh>	well, that part is already handled
Sep 09 17:24:11 <greycat>	...
Sep 09 17:24:18 <greycat>	HOW IS IT HANDLED
Sep 09 17:24:25 <A_buh>	i have two profiles
Sep 09 17:24:32 <greycat>	WHAT IS A FUCKING PROFILE
Sep 09 17:25:06 <greycat>	HOW DOES IT WORK?  HOW DOES THE SHELL KNOW WHICH PROFILE YOU'RE IN?
Sep 09 17:25:20 <greycat>	IS THERE SOME ENVIRONMENT VARIABLE THAT GETS SET?
Sep 09 17:25:44 <A_buh>	dammit. it happens higher, above bash
Sep 09 17:25:57 <greycat>	That's FINE.  How does it WORK?  What is the VISIBLE DIFFERENCE?
Sep 09 17:26:00 <A_buh>	the profile is the thing that invokes bash
Sep 09 17:26:14 <greycat>	Is there DOCUMENTATION?
Sep 09 17:26:33 *	greycat tries google, since this A_buh search engine is rubbish
Sep 09 17:31:42 <A_buh>	greycat: a profile is just an abstraction for invoking bash. the behavior i'm trying to achieve is that some environment variable get set
Sep 09 17:32:19 <greycat>	Well, google is telling me that "gnome-terminal profiles" are a clicktastic piece of shit inherited from the mindset of a Windows user who has never seen a text file, and you configure it by clicking shit, but they don't tell you what all the choices and powers are in the docs...
Sep 09 17:32:35 <greycat>	... and it's actually stored in gconf, except wait, they changed it to dconf now.
Sep 09 17:32:53 <rafasc>	greycat: they're just a collection of settings. You can specify things like run htop instead of bash. Etc.
Sep 09 17:32:54 <greycat>	So, go ask #gnome.
Sep 09 17:33:01 <rafasc>	Anyways, this has nothing to do with bash itself.
Sep 09 17:33:18 <greycat>	rafasc: can you tell it "set an environment variable to tell my shell which profile is in effect in this tab/window"?
Sep 09 17:33:30 <A_buh>	oh, crap. this is useful info. thanks.
Sep 09 17:33:43 <A_buh>	do you mind me asking what windowing system you are using?
Sep 09 17:33:48 <greycat>	I use fvwm.
Sep 09 17:34:01 <greycat>	although "windowing system" I guess is X11.
Sep 09 17:34:35 <A_buh>	just searched for fvwm. that thing looks awesome.
Sep 09 17:34:52 <greycat>	you configure it by editing a text file with a text editor
Sep 09 17:35:16 <heyitsrama>	is there a text editor you would recommend? :p
Sep 09 17:35:29 <greycat>	whichever one you like
Sep 09 17:35:51 <heyitsrama>	(
Sep 09 17:38:37 <greycat>	wikipedia says "When GNOME Terminal starts, it can be configured to launch the user's default shell or run a custom command."  So apparently using a custom command is one of the things you can do in a "profile".  Too bad the FUCKING GNOME DOCUMENTATION doesn't bother saying that.
Sep 09 17:39:00 <greycat>	Can your custom command simply be "env MYPROFILE=red bash"?
Sep 09 17:39:30 <greycat>	That would stick an environment variable into bash's environment, and then you can refer to that in .bashrc to control the HIST* variables or whatever else you want.
Sep 09 17:39:58 <rafasc>	greycat: it has some concept of "current profile", so if you launch another thing, it will inherit the "active" profile. But I don't think it is exported as a variable or anything like that.
Sep 09 17:40:08 <rafasc>	a quick google points to some hacks: https://unix.stackexchange.com/a/336259
Sep 09 17:40:13 <A_buh>	greycat: god dammit we both came to the same idea
Sep 09 17:40:34 <rafasc>	I don't use this, xterm is good enough for me.
Sep 09 18:04:09 *	knstn grumpy mondays
Sep 09 18:51:03 <Jonta>	Is there a list of what the different error tokens mean? "syntax error: operand expected (error token is "%")" here. Websearches pull up StackExchange-hits with different tokens, resulting from people's example scripts. And there are specific solutions, but not general ones
Sep 09 18:51:33 <also_uplime>	probably help to show your code
Sep 09 18:51:46 <greycat>	The % is where the parser was, in your input. when it got confused.
Sep 09 18:52:08 <koala_man>	it's not the equivalent of an error code
Sep 09 18:52:15 <greycat>	# echo $(( 10 - % ))
Sep 09 18:52:16 <shbot>	greycat: bash: 10 - % : syntax error: operand expected (error token is "% ")
Sep 09 18:52:16 <Soliton>	probably some math context with a variable that is not a number.
Sep 09 18:52:43 <greycat>	yeah, also happens if you try to do $((10 - 5%))
Sep 09 18:53:59 <sabo11_>	I have about 1000 servers each with a unique password and various usernames.  I have an excel spreadsheet with 3 columns servername, username, password.  I need to ssh into each server and run a script.
Sep 09 18:54:21 <greycat>	Security.  You should learn what it is.
Sep 09 18:54:25 <sabo11_>	One method I was thinking about implementing is putting each column into an array and then iterating through the arrays.
Sep 09 18:54:30 <Jonta>	Damn. Got it: Was sure one of the inputs was an int, but instead, it was a string. Ending in "%". Thank you
Sep 09 18:54:42 <Soliton>	!faq valid
Sep 09 18:54:43 <greybot>	https://mywiki.wooledge.org/BashFAQ/054 -- How can I tell whether a variable contains a valid number?
Sep 09 18:54:48 <also_uplime>	technically almost everything in bash is a string
Sep 09 18:55:21 <Soliton>	you need to validate stuff you put into math context or bad things may happen.
Sep 09 18:57:00 <Jonta>	Thanks for the link. shellcheck didn't complain, but it's good to know what the error token actually *is*. Searched for that as well
Sep 09 18:57:22 <also_uplime>	its saying it ran into an error when parsing the token "%"
Sep 09 18:57:37 <also_uplime>	its not some special error code labeled as %
Sep 09 18:58:09 <Jonta>	Got it
Sep 09 18:58:55 <koala_man>	if you are doing math on values from variables, shellcheck has a hard time detecting whether or not the variable contains a valid number
Sep 09 19:00:12 <Jonta>	rafasc: It seems m4 suits my needs, btw. Thanks for the suggestion. :)
Sep 09 19:02:27 <sabo11_>	https://pastebin.com/TpwbU27e
Sep 09 19:02:28 <pasteban>	Paste is available without ads on http://pastebin.com/raw/TpwbU27e
Sep 09 19:02:33 <sabo11_>	maybe like this?
Sep 09 19:03:03 <Soliton>	!check
Sep 09 19:03:03 <checkbot>	sabo11_: Line 8: Couldn't find 'done' for this 'do'. Line 8: Scripts are case sensitive. Use 'do', not 'Do'. Line 12: Expected 'done' matching previously mentioned 'do'. See https://shellcheck.net/?id=cb48583 for all 5 issues.
Sep 09 19:03:07 <also_uplime>	no, not like that
Sep 09 19:03:11 <also_uplime>	not in bash anyways
Sep 09 19:03:43 <sabo11_>	expect?
Sep 09 19:03:51 <sabo11_>	can expect handle arrays?
Sep 09 19:04:05 <greycat>	expect is an entirely different programming language
Sep 09 19:04:09 <greycat>	!expect
Sep 09 19:04:09 <greybot>	expect (http://expect.sf.net/) is a tool for scripting terminal applications in tcl, join #tcl for help. Alternative tools exist in most languages, for a shell version see http://empty.sf.net
Sep 09 19:04:26 <also_uplime>	you should really be using ssh keys though
Sep 09 19:05:03 <sabo11_>	I am setting up ansible with ssh keys but I first need to login to run the key installation script'
Sep 09 19:05:04 <greycat>	His botnet isn't that advanced.  His brute force password cracker just produces a spreadsheet.
Sep 09 19:06:34 <sabo11_>	I also have a playbook to install the ssh keys but I need to get past the first login with the old U/N and pass
Sep 09 19:07:18 <rafasc>	Jonta: good luck. That thing is very powerful and kind of ugly. But it gets the job done if you know how to use it.
Sep 09 19:07:42 <sabo11_>	thanks for the tip about empty.  I have not heard of that
Sep 09 19:25:19 <wwilliam>	is int this suppose to print?
Sep 09 19:25:22 <wwilliam>	# Check if we can go into appdir. If not, output an error and exit the script.
Sep 09 19:25:23 <shbot>	wwilliam: bash: Check: command not found
Sep 09 19:25:23 <wwilliam>	cd "$appdir" || { echo "Please create the appdir and try again" >&2; exit 1; }
Sep 09 19:25:41 <wwilliam>	if $appdir dows not exist?
Sep 09 19:26:05 <kerframil>	yes.
Sep 09 19:26:20 <kerframil>	or if unable to enter the directory for some other reason.
Sep 09 19:26:26 <vishal>	# appdir=/foo; cd "$appdir" || { echo "Please create the appdir and try again" >&2; exit 1; }
Sep 09 19:26:30 <shbot>	vishal: bash: cd: /foo: No such file or directory
Sep 09 19:26:30 <shbot>	vishal: Please create the appdir and try again
Sep 09 19:26:30 <shbot>	vishal: etc... ( http://ix.io/1UGj )
Sep 09 19:26:44 <wwilliam>	root@debian:~#cd "$appdir" || { echo "Please create the appdir and try again" >&2; exit 1; }
Sep 09 19:26:45 <wwilliam>	root@debian:~#
Sep 09 19:26:56 <also_uplime>	looks like it succeeeded then
Sep 09 19:27:04 <also_uplime>	or you're using some weird shell
Sep 09 19:27:04 <kerframil>	appdir isn't set, most probably
Sep 09 19:27:32 <also_uplime>	oh interesting, cd "" is the same as cd .
Sep 09 19:27:48 <wwilliam>	I understand the command like this if cd dont work echo blah blah no?
Sep 09 19:28:03 <kerframil>	it did work though. the problem is, just not in the way you expect.
Sep 09 19:28:04 <vishal>	the command is fine, your variable is empty
Sep 09 19:28:15 <kerframil>	you could protect against this pitfall with cd "${appdir:?}"
Sep 09 19:28:26 <kerframil>	it will then complain loudly if appdir is empty or unset.
Sep 09 19:28:33 <wwilliam>	ok thank you all
Sep 09 19:28:53 <wwilliam>	that is what i thought that even if the var was not set it will echo.
Sep 09 19:29:23 <kerframil>	however, if you do use the above method, the shell will just exit immediately. you'll never see your decorative error.
Sep 09 19:29:25 <vishal>	it doesn't because 'cd' doesn't fail for an empty argument (for the better or the worse..)
Sep 09 19:29:42 <kerframil>	so, in fact, you may just prefer to have an explicit check that appdir is non-empty prior - if it matters.
Sep 09 19:29:45 <kerframil>	dealer's choice.
Sep 09 19:30:18 <wwilliam>	cd "${appdir:?}" || { echo "Please create the appdir and try again" >&2; exit 1; }
Sep 09 19:30:20 <wwilliam>	-su: appdir: parameter null or not set
Sep 09 19:30:28 <also_uplime>	if [[ ! -d $appdir ]]; then err; else cd "$appdir"; fi
Sep 09 19:30:41 <greycat>	you *still* have to check whether the cd succeeds
Sep 09 19:31:02 <also_uplime>	true
Sep 09 19:31:53 <vishal>	a directory with +r but -x ? :)
Sep 09 19:32:12 <greycat>	or owned by root, 700, and you are not root, or any number of other scenarios
Sep 09 19:32:19 <also_uplime>	if [[ ! -d $appdir ]]; then err "please make directory"; elif ! cd "$appdir"; then err; fi
Sep 09 19:32:38 <wwilliam>	for an idiot like me the following should be:  Set a var name appdir with a dir that do not exist then:
Sep 09 19:32:39 <wwilliam>	# Check if we can go into appdir. If not, output an error and exit the script.
Sep 09 19:32:41 <shbot>	wwilliam: bash: Check: command not found
Sep 09 19:32:41 <wwilliam>	cd "$appdir" || { echo "Please create the appdir and try again" >&2; exit 1; }
Sep 09 19:33:19 <also_uplime>	wwilliam: that is what it is. your cd command succeeded, which means appdir exists and you can cd to it, or its not set
Sep 09 19:34:15 <wwilliam>	for purposes of info there shoulb be a note with what you mentioned.. also_uplime
Sep 09 19:34:53 <wwilliam>	the problem with guys like you that know it all is that you assume stupid noobs people also know what you know....
Sep 09 19:35:06 <wwilliam>	so this statement i dont think is accurate:
Sep 09 19:35:29 <kerframil>	I don't think anyone would dispute that it's a good idea to comment code that may not be easily understood by the reader at a later time.
Sep 09 19:35:41 <also_uplime>	are you expecting cd to tell you if the variable is unset?
Sep 09 19:35:43 <wwilliam>	This guide is targeted at beginning users. It assumes no advanced knowledge -- just
Sep 09 19:35:44 <wwilliam>	the ability to login to a Unix-like system and open a command-line (terminal)
Sep 09 19:35:46 <wwilliam>	interface.
Sep 09 19:37:09 <wwilliam>	no also_uplime I am expecting whoever wrote that particular piece in the guide that the var must be set with an unexisting dir for the sample to work idiot wise , like me
Sep 09 19:37:16 <greycat>	If the variable being empty should be treated as an error condition, then it should be explicitly checked.
Sep 09 19:37:26 <wwilliam>	and I am pretty sure I am not the only idiot.
Sep 09 19:37:28 <greycat>	[[ $appdir ]] || die "appdir is not set, please edit the config"
Sep 09 19:37:36 <greycat>	cd "$appdir" || die "couldn't cd to the appdir"
Sep 09 19:42:48 <gordonfish>	'<also_uplime> oh interesting, cd "" is the same as cd .' ;  cd "" results in '-bash: cd: : No such file or directory' for me
Sep 09 19:42:58 <greycat>	which version?
Sep 09 19:43:26 <greycat>	I can't reproduce it in bash 2.05b
Sep 09 19:43:29 <also_uplime>	# cd ""; pwd
Sep 09 19:43:30 <shbot>	also_uplime: /root
Sep 09 19:43:34 <gordonfish>	bash 4.4.12, on a debian server I happened to be working on
Sep 09 19:43:34 <Sven_vB>	http://mywiki.wooledge.org/BashFAQ/117 should show how to make a helper function that prints its pid, then execs the feeder, and another that reads one line (the feeder pid), exports it and execs the filter.
Sep 09 19:43:44 <gordonfish>	2.05b??
Sep 09 19:44:17 <greycat>	one of the oldest ones I can easily check
Sep 09 19:44:51 <gordonfish>	I have that on my home system (for historical/testing purposes)
Sep 09 19:44:52 <greycat>	root@megview4:~# echo "$BASH_VERSION"
Sep 09 19:44:52 <greycat>	4.4.12(1)-release
Sep 09 19:44:52 <greycat>	root@megview4:~# cd ""
Sep 09 19:44:52 <greycat>	root@megview4:~#
Sep 09 19:45:48 <gordonfish>	bash2-2.05b# cd "" ---> bash2: cd: : No such file or directory
Sep 09 19:46:11 <greycat>	there's something nonstandard in your setup that's causing this... maybe a CDPATH variable
Sep 09 19:46:37 <gordonfish>	I have no such variable defined
Sep 09 19:47:46 <also_uplime>	what does `bash --norc --noprofile -c "cd /tmp; cd ''; pwd" say
Sep 09 19:47:53 <also_uplime>	erm
Sep 09 19:48:01 <scx>	Anyone knows autotools here?
Sep 09 19:48:05 <Jonta>	Yes
Sep 09 19:48:06 <greycat>	##workingset
Sep 09 19:48:15 <also_uplime>	pretending i didnt forge the closing `
Sep 09 19:51:11 <Jonta>	Best way of POSIXly appending characters to a string? I'm building a progress bar. I have the while-loop, but += is undefined in POSIX
Sep 09 19:51:27 <greycat>	x="${x}foo"
Sep 09 19:58:43 <gordonfish>	also_uplime: that command gives me '/tmp' for both bash 2, 3, 4, and 5. (bash 1 Gives '--: bad option')
Sep 09 20:01:12 <Soliton>	so something in your interactive shell breaks cd.
Sep 09 20:01:30 <greycat>	you can try --norc and --noprofile individually to work out which one's doing it, possibly
Sep 09 20:02:07 <greycat>	but with "bash" (or "bash3.2" or whatever), it should be a non-login shell, so it shouldn't be reading profile anyway
Sep 09 20:02:24 <gordonfish>	Ah, found it. alias cd='cd -P'
Sep 09 20:02:31 <gordonfish>	\cd "" works fine
Sep 09 20:02:40 <greycat>	amusing
Sep 09 20:02:50 <gordonfish>	\cd -P "" is what yields -bash: cd: : No such file or directory
Sep 09 20:03:06 <greycat>	cd -L "" works but cd -P "" complains
Sep 09 20:03:21 <greycat>	might be worth a bug report
Sep 09 20:03:29 <gordonfish>	That is a very old alias that I've had in my bashrcs since perhaps 2001
Sep 09 20:24:02 <Jonta>	x="${x}foo" worked. Thank you
Sep 09 20:39:27 <iowenovcw>	hi, i'm a novice at scripting and am having a problem debugging a simple script to rip cds (w/cdparanoia) ; convert them to .flac -8 ; remove the .wav tracks ; then launch picard & (in the bg)
Sep 09 20:39:38 <iowenovcw>	should i put the script on pastebin?
Sep 09 20:40:07 <greycat>	maybe you should use one of the existing tools, like abcde, instead of writing your own
Sep 09 20:40:25 <iowenovcw>	yes, well give a man a fish and he eats for a day.
Sep 09 20:40:38 <iowenovcw>	https://pastebin.com/9whY749h
Sep 09 20:40:38 <pasteban>	Paste is available without ads on http://pastebin.com/raw/9whY749h
Sep 09 20:40:39 <checkbot>	iowenovcw: I think the problem is on line 19. Bash doesn't support variables in brace range expansions. See 6 issues on https://shellcheck.net/?id=cb54438
Sep 09 20:43:42 *	knstn AI is taking over
Sep 09 20:44:02 <iowenovcw>	ok, so if that is the case, i.e., that i cannot put variables in the brace range expression, how do i work around the for i in {01...$tracks} ?
Sep 09 20:44:34 <greycat>	!faq zero
Sep 09 20:44:34 <greybot>	https://mywiki.wooledge.org/BashFAQ/018 -- How can I use numbers with leading zeros in a loop, e.g. 01, 02?
Sep 09 20:44:52 <iowenovcw>	no, that isn't the problem
Sep 09 20:44:57 <greycat>	Yes.  Yes, it is.
Sep 09 20:45:01 <greycat>	That is PRECISELY the problem.
Sep 09 20:45:32 <greycat>	if you had written {1..$tracks} then I would have given an entirely different answer.
Sep 09 20:46:08 <greycat>	But you wrote {01..$tracks} no wait, you wrote {01...$tracks} with three dots, so you have one extra dot, but you ALSO wanted leading zeroes, so the simple answer wouldn't suffice.  Thus the FAQ.
Sep 09 20:46:39 <iowenovcw>	sorry, it doesn't have 3 dots in the actual script, it was an irc typo
Sep 09 20:46:55 <greycat>	The leading zero is what makes it no longer a simple question to answer, so the FAQ is appropriate.
Sep 09 20:51:28 <iowenovcw>	what is %03d ?
Sep 09 20:52:03 <greycat>	printf format specifier.  d is decimal, 3 is three character width, 0 is zero-padded.
Sep 09 20:52:21 <greycat>	# printf %03d 42
Sep 09 20:52:22 <shbot>	greycat: 042
Sep 09 20:52:30 <iowenovcw>	got it.
Sep 09 20:52:57 <Jonta>	# printf %03d 1234
Sep 09 20:52:58 <shbot>	Jonta: 1234
Sep 09 20:53:12 <iowenovcw>	#printf %-8d df
Sep 09 20:53:15 <iowenovcw>	#printf %-8d 12
Sep 09 20:53:21 <greycat>	the bot needs a space after the #
Sep 09 20:53:26 <iowenovcw>	# printf %-8d 12
Sep 09 20:53:27 <shbot>	iowenovcw: 12
Sep 09 20:53:39 <iowenovcw>	why didn't it pad with '-'s?
Sep 09 20:53:48 <greycat>	because printf doesn't do that
Sep 09 20:53:52 <iowenovcw>	i see
Sep 09 20:54:11 <iowenovcw>	so it looks like what i'm missing here is this eval step?
Sep 09 20:54:19 <greycat>	# printf -v tmp %8d 12; echo "${tmp// /-}"
Sep 09 20:54:20 <shbot>	greycat: ------12
Sep 09 20:58:29 <ash_worksi>	sometimes you can do IFS='|' .... like in a `while read`; but not most of the time. I was under the impression this set the IFS for the following command; is that right? when is it applicable?
Sep 09 20:59:12 <greycat>	X=y foo       places the variable X with value y in the temporay environment of command foo
Sep 09 20:59:52 <greycat>	IFS='|' read -r a b      places IFS with value | in the temp env of command read.  read happens to use IFS, so that works.
Sep 09 21:00:09 <greycat>	if you place IFS in the environment of some command that does NOT use IFS, then nothing special happens
Sep 09 21:01:36 <ash_worksi>	okay, so why doesn `IFS='|' echo "${arr[*]}", echo the contents of arr joined by '|' ?
Sep 09 21:01:41 <ash_worksi>	doesn't*
Sep 09 21:02:03 <greycat>	because echo doesn't use IFS, and it wouldn't have anything to apply it to anyway, because you only gave echo one argument
Sep 09 21:02:22 <greycat>	the "${arr[*]}" expansion is done by the shell, not by echo
Sep 09 21:02:24 <ash_worksi>	but add a semicolon, and it DOES join
Sep 09 21:02:30 <ash_worksi>	oh
Sep 09 21:02:36 <greycat>	yes, because now you've set IFS for the whole shell
Sep 09 21:02:40 <ash_worksi>	I see
Sep 09 21:05:22 <iowenovcw>	eval for i in '{01..$tracks}'; does not seem to be doing the trick and i don't see another answer in the faq.
Sep 09 21:05:24 <iowenovcw>	what am i missing?
Sep 09 21:05:40 <greycat>	You can't eval a for loop that easily.
Sep 09 21:05:52 <ash_worksi>	so, IFS='|' read -r foo bar <<<"$*" will not expand $* using % because the shell doesn't know about the IFS since it's local to `read` ?
Sep 09 21:05:57 <greycat>	you'd have to put the WHOOOOOOLE loop in an argument and eval that WHOLE thing
Sep 09 21:06:11 <greycat>	ash_worksi: correct
Sep 09 21:06:26 <iowenovcw>	i assume that I won't want to put the WHOOOOOOLE loop into the eval?
Sep 09 21:06:32 <greycat>	I sure as hell wouldn't.
Sep 09 21:07:07 <greycat>	slightly less insane would be to put the loop body in a function and then use   eval 'for i in {01..$tracks}; do myfunc "$i"; done'
Sep 09 21:07:24 <greycat>	I still wouldn't do that, either.  I'd use printf.
Sep 09 21:07:27 <{xmb}>	greycat on eval =))
Sep 09 21:07:34 <armin>	=)
Sep 09 21:07:47 <iowenovcw>	?  for i in $(seq 1 $END); do echo $i; done
Sep 09 21:08:00 <greycat>	if you want it to work only on Linux, seq is an option
Sep 09 21:08:15 <greycat>	you forgot the zero-padding option, whatever it is
Sep 09 21:08:32 <iowenovcw>	i'm just looking at a stackoverflow example
Sep 09 21:08:34 <armin>	-w
Sep 09 21:08:53 <greycat>	oh, I screwed up the quoting in the eval, too.  Because as I said, it's only SLIGHLY less insane.
Sep 09 21:09:13 <Soliton>	!seq
Sep 09 21:09:14 <greybot>	seq(1) is nonstandard, inefficient and useless. For bash2.04+/zsh/ksh93, use for ((i = 1; i <= 10; i++)); do ..., bash3.0+, use for i in {1..10}, for POSIX and other shells, see !counting
Sep 09 21:09:19 <greycat>	slightly less insane would be to put the loop body in a function and then use   eval 'for i in {01..'"$tracks"'}; do myfunc "$i"; done'
Sep 09 21:10:13 <iowenovcw>	anything that is POSIX standard will work in bash?
Sep 09 21:10:37 <greycat>	yes, but for some of the *truly* esoteric posix features, you may have to turn on strict posix mode
Sep 09 21:10:46 <iowenovcw>	!counting
Sep 09 21:10:46 <greybot>	Basic loops: Bash/Zsh/ksh93: «for ((i = 0; i < 10; i++)); do ...; done», For small constants: «for i in {0..9}; do ...; done» ksh: «i=0; while ((i++ < 10)); do ...; done», POSIX: «i=0; while [ "$i" -lt 10 ]; do ...; i=$((i + 1)); done» http://mywiki.wooledge.org/BashGuide/TestsAndConditionals#Conditional_Loops
Sep 09 21:11:22 <ash_worksi>	since when did greybot start french-quoting things
Sep 09 21:11:23 <ash_worksi>	?
Sep 09 21:11:43 <greycat>	it just repeats what it's told
Sep 09 21:11:52 <iowenovcw>	ok, so for POSIX standard I forgo the while loop and add a counter variable and increment it myself.
Sep 09 21:12:14 <ash_worksi>	since when did greycat start telling greybot things using french-quotes? *
Sep 09 21:12:16 <greycat>	why the FUCK would you try to write this CD-ripping-and-encoding-and-playing script in posix sh
Sep 09 21:12:53 <iowenovcw>	i don't know, i wasn't planning to, i'm trying to understand why it said, "for POSIX and other shells, see !counting"
Sep 09 21:13:59 <ash_worksi>	thanks greycat
Sep 09 21:14:03 <ash_worksi>	o/
Sep 09 21:18:48 <{xmb}>	# e=2 b=0; i="$b"; while (( ++i <= e )); do printf -- %02d "$i"; done
Sep 09 21:18:49 <shbot>	{xmb}: 0102
Sep 09 21:27:02 <iowenovcw>	ok, so if printf is the solution.... where am i going wrong with?  for i in {01..'printf %02d $tracks'};
Sep 09 21:27:20 <iowenovcw>	or do i need to abandon the for loop in favor of a while loop?
Sep 09 21:28:13 <{xmb}>	erm, {..} expansion doesnt work with vars or specials, only literals
Sep 09 21:28:31 <emg>	!cfor > iowenovcw
Sep 09 21:28:31 <greybot>	iowenovcw: C-style for loop: for (( expr; expr; expr )); do COMMANDS; done # Each expr is done in a math context. Example: for ((i=1; i<=n; i++)); do echo "$i"; done. Use in place of the non-working: for i in {1..$number}
Sep 09 21:29:04 <emg>	# tracks=3; for ((i = 1; i <= tracks; i++)); do printf %02d\\n "$i"; done
Sep 09 21:29:05 <shbot>	emg: 01
Sep 09 21:29:05 <shbot>	emg: 02
Sep 09 21:29:05 <shbot>	emg: 03
Sep 09 21:29:11 <emg>	iowenovcw: ^^
Sep 09 21:29:24 <greycat>	for ((i=1; i<=tracks; i++)); do printf -v trackno %02d "$i"; whatever "$trackno"; done
Sep 09 21:30:22 <greycat>	if the zero-padding were not required, then my ORIGINAL answer to the ORIGINAL question would have been simply   for ((i=1; i<=tracks; i++)); do whatever "$i"; done
Sep 09 21:30:46 <{xmb}>	you can pad it in the loop whats the problem
Sep 09 21:30:49 <greycat>	but you can see how much complexity the zero-padding added to the question
Sep 09 21:31:28 <{xmb}>	# e=10 b=8; i="$b"; while (( ++i <= e )); do printf -- %02d "$i"; done
Sep 09 21:31:29 <shbot>	{xmb}: 0910
Sep 09 21:31:50 <greycat>	I'm not a fan of that while ((++i <= e)) construction
Sep 09 21:32:32 <{xmb}>	you can aswell write it in your for loop, just pad via printf in the looped code, no need for fancy eval {..$var}
Sep 09 21:34:41 <iowenovcw>	how do i look up the C-style for loop?
Sep 09 21:34:46 <greycat>	!cfor
Sep 09 21:34:46 <greybot>	C-style for loop: for (( expr; expr; expr )); do COMMANDS; done # Each expr is done in a math context. Example: for ((i=1; i<=n; i++)); do echo "$i"; done. Use in place of the non-working: for i in {1..$number}
Sep 09 21:34:56 <iowenovcw>	because i don't understand ^^
Sep 09 21:35:59 <iowenovcw>	is i++ another way of writing i+1?
Sep 09 21:36:05 <greycat>	# for ((i=2; i<=10; i+=2)); do printf '%s ' "$i"; done
Sep 09 21:36:06 <shbot>	greycat: 2 4 6 8 10
Sep 09 21:36:19 <greycat>	i++ is another way of writing i+=1 which is another way of writing i=i+1
Sep 09 21:36:34 <{xmb}>	i++ and ++i
Sep 09 21:36:37 <greycat>	at least in cases where you're not using the value of the expression
Sep 09 21:41:20 <iowenovcw>	# tracks = 16 for ((i=1; i<=$tracks; i++)); do flac -8 track'printf '%02d' "$i"; done
Sep 09 21:41:21 <shbot>	iowenovcw: bash: syntax error near unexpected token `('
Sep 09 21:41:28 <greycat>	!guide > iowenovcw
Sep 09 21:41:28 <greybot>	iowenovcw: http://mywiki.wooledge.org/BashGuide or in PDF: http://s.ntnu.no/bashguide.pdf
Sep 09 21:42:05 <{xmb}>	track01 is then the desired 'there' ?
Sep 09 21:42:23 <greycat>	I'm skeptical of many things, above and beyond the many obvious syntax errors there.
Sep 09 21:42:40 <greycat>	you've already ripped the files by the time you call flac, right?  so why not just iterate over the filenames?
Sep 09 21:43:06 <{xmb}>	tracks=16 b=0; while (( ++b <= tracks )); do flac -8 track"$( printf -- %02d "$b" )"; done
Sep 09 21:43:08 <iowenovcw>	ok, i don't understand how to make printf %02d work inside of flac -8 track##.cdda.wav -o name##.flac
Sep 09 21:43:56 <{xmb}>	in the loop you printf -v var %02d "$num", then u use "$var" where in filenames or data
Sep 09 21:43:58 <greycat>	oh, because you also want to CHANGE the output filenames from whatever the ripper produced.
Sep 09 21:44:04 <greycat>	that... almost makes sense
Sep 09 21:44:29 <iowenovcw>	in the particular example, i ripped "come dance with the kinks"
Sep 09 21:44:34 <greycat>	15:29  greycat> for ((i=1; i<=tracks; i++)); do printf -v trackno %02d "$i"; whatever "$trackno"; done
Sep 09 21:45:44 <iowenovcw>	so it has 16 tracks...  cdparanoia -B puts out the tracks as track##.cdda.wav  and then yes, they'll be ripped by the time flac -8 sees them.  i'm changing them from track to $name just to make it easier in picard.  $name will be one alpha word.
Sep 09 21:46:38 <{xmb}>	you can use any existing ripping software solution already exisiting
Sep 09 21:46:47 <greycat>	I also said this. ;-)
Sep 09 21:46:58 <iowenovcw>	yes, i understand that.,
Sep 09 21:47:01 <iowenovcw>	that isn't the point.
Sep 09 21:47:02 <{xmb}>	so where u get the names of the tracks from
Sep 09 21:47:25 <{xmb}>	is -8 quality to flac ? u wanna encode then wav to flac and the filename like track01 - foo bar title.flac
Sep 09 21:47:32 <iowenovcw>	cdparanoia puts them out as track01.cdda.wav .. track16.cdda.wav
Sep 09 21:47:47 <iowenovcw>	-8 is quality in flac.
Sep 09 21:48:02 <{xmb}>	so what u wanna do with those files then, as i said encode to flac with filename containing title or just trackn
Sep 09 21:48:07 <mnemonic>	what the diff between [[ "$var" ]] and [[ -n "$var" ]] ?
Sep 09 21:48:17 <koala_man>	mnemonic: nothing
Sep 09 21:48:33 <mnemonic>	koala_man: oh, ok, thanks
Sep 09 21:49:13 <andecy>	Hello
Sep 09 21:49:18 <{xmb}>	hi
Sep 09 21:50:43 <iowenovcw>	if all i wanted to do was to get this done, i would just keep using what I had been doing which was running the commands together on the command line:
Sep 09 21:50:43 <iowenovcw>	cdparanoia -B ; eject ; for i in {01..16}; do flac -8 track$i.cdda.wav -o kinks$i.flac && rm track$i.cdda.wav ; done ; picard &
Sep 09 21:50:57 <iowenovcw>	i would like to learn how to make a script that is useful to me.
Sep 09 21:51:20 <andecy>	I have a question, I want to have the option of using the last command stdout without executing the command again. how can this be done?
Sep 09 21:51:20 <{xmb}>	# >'track03.cdda.wav'; for f in *wav; do printf -- %s "${f//@(track|.cdda*)}"; done
Sep 09 21:51:21 <shbot>	{xmb}: 03
Sep 09 21:51:41 <Soliton>	!$( > andecy
Sep 09 21:51:41 <greybot>	andecy: Command Substitution: "$(cmd "foo bar")" causes the command 'cmd' to be executed with the argument 'foo bar' and "$(..)" will be replaced by the *output*. See http://mywiki.wooledge.org/BashFAQ/002 and http://mywiki.wooledge.org/CommandSubstitution
Sep 09 21:51:50 <twkm>	save it to a file, perhaps with tee.
Sep 09 21:52:21 <{xmb}>	andecy '!!' is the last command, if hist expansion is on or something
Sep 09 21:52:23 <greycat>	andecy: if you ALREADY ran the command, if it's TOO LATE to run a different command, then just grab and paste it with the mouse.
Sep 09 21:52:40 <andecy>	Can I write a "hook" and source it to run automatically every time a command is run?
Sep 09 21:52:51 <{xmb}>	what u trying to do
Sep 09 21:53:01 <greycat>	there is no magical command that can retroactively go back in time and figure out which characters on your terminal came from a command and which were printed by a shell as a prompt, etc.
Sep 09 21:53:26 <mnemonic>	to test if an array isn´t empty i can do (( ${#arr[@]} != 0 )) or (( ${#arr[@]} > 0 ))  both ways are ok right?
Sep 09 21:53:39 <greycat>	YOU can figure that out because you're an intelligent being.  So use your magical powers and your mouse (or terminal-based keystrokes) to grab the chars YOU believe are the correct ones.
Sep 09 21:54:02 <andecy>	I want that every time I execute a command, it's output will be saved into a file and i could access this output via another command
Sep 09 21:54:07 <greycat>	mnemonic: yes, or simply  ((${#arr[@]}))
Sep 09 21:54:28 <greycat>	andecy: that is not possible.
Sep 09 21:54:30 <andecy>	just the last command
Sep 09 21:54:37 <mnemonic>	greycat: thanks
Sep 09 21:54:47 <greycat>	andecy: not without seriously hacking the shell at the C level, anyway
Sep 09 21:57:18 <{xmb}>	there is duplicate command output
Sep 09 21:57:43 <{xmb}>	maybe bash has a 'dont exe this command cause DEBUG trap code said so' option
Sep 09 21:58:56 <{xmb}>	# trap 'eval "$BASH_COMMAND &>"$BASH_COMMAND.$((++r))"' DEBUG; exec >/dev/null 2>&1; ls; cat ls.1
Sep 09 21:58:57 <shbot>	{xmb}: bash: debug trap: line 1: unexpected EOF while looking for matching `"'
Sep 09 21:58:57 <shbot>	{xmb}: bash: debug trap: line 2: syntax error: unexpected end of file
Sep 09 21:59:00 <greycat>	If we hypothesize some magical construct that intercepts your command, and runs it with output piped through tee, this will *still* change the behavior of the commands that you typed.  Many, many commands act differently when their stdout is a pipe instead of a terminal.
Sep 09 22:00:38 <andecy>	That good thinking right there
Sep 09 22:00:42 <andecy>	thats*
Sep 09 22:03:06 <{xmb}>	# trap 'eval "$BASH_COMMAND" &>"$BASH_COMMAND.$EPOCHREALTIME"' DEBUG; ls -A; cat ls*
Sep 09 22:03:10 <shbot>	{xmb}:  .bashrc   .mkshrc  'ls -A.1568059387.249785'
Sep 09 22:03:11 <shbot>	{xmb}: .bashrc
Sep 09 22:03:11 <shbot>	{xmb}: etc... ( http://ix.io/1UGX )
Sep 09 22:03:33 <twkm>	now try an absolute path.
Sep 09 22:03:39 <{xmb}>	?
Sep 09 22:03:52 <{xmb}>	oh yes / sub
Sep 09 22:03:54 <twkm>	...; /usr/bin/ls -A; ...
Sep 09 22:04:15 <{xmb}>	there is the ${foo//\//^} solution, ^ instead of /
Sep 09 22:04:23 <{xmb}>	but i dunno the project so no work
Sep 09 22:05:03 <{xmb}>	ill try something..
Sep 09 22:06:51 <twkm>	andecy: e.g., plenty of folks expect color when they use ls but not if they pipe it so ls generally wouldn't try to colorize if stdout isn't to the terminal which the magic you want would be, not a terminal, though tee's stdout would be ls can't determine that.
Sep 09 22:07:25 <{xmb}>	twkm, can i disable cmd exe like set -n and then reenable it again ?
Sep 09 22:07:38 <andecy>	I'm thinking on something along the line of using logger
Sep 09 22:08:03 <twkm>	if you ls colorizes you can try it yourself: ls ; ls |& tee tempfile
Sep 09 22:08:46 <twkm>	same issue.  plus what used to come out immediately via stderr would then be buffered along with stdout.
Sep 09 22:08:47 <greycat>	andecy: there is a compile time option to log each *command* that bash executes through syslog... but not the output
Sep 09 22:09:26 <simbioz>	Hi, I am trying to delete all lines that end with a number within the [1-50000] range with sed, but it's not working. How can I do that? thx
Sep 09 22:09:35 <twkm>	##sed
Sep 09 22:09:51 <twkm>	{xmb}: this being #bash i've no idea how cmd.exe works.
Sep 09 22:09:51 <greycat>	this really doesn't sound like a job for sed.
Sep 09 22:09:52 <emg>	simbioz: why? what are you really trying to do? also if you want to edit a file, don't use sed, use ed
Sep 09 22:10:06 <simbioz>	I am learning sed
Sep 09 22:10:07 <greycat>	sounds like a job for awk ... > newfile
Sep 09 22:10:10 <emg>	simbioz: and what's the format of the lines?
Sep 09 22:10:16 <simbioz>	just practicing
Sep 09 22:10:17 <twkm>	so ask ##sed about your homework.
Sep 09 22:10:21 <emg>	ah, homework
Sep 09 22:10:24 <simbioz>	nope
Sep 09 22:10:26 <simbioz>	look
Sep 09 22:10:28 <{xmb}>	err where i said cmd.exe
Sep 09 22:10:32 <greycat>	self-assigned homework is still homework
Sep 09 22:10:38 <greycat>	stupid-ass self-imposed restrictions
Sep 09 22:10:49 <twkm>	simbioz: really, there's a channel for it.
Sep 09 22:10:53 <greycat>	using the wrong tool for the job
Sep 09 22:10:55 <simbioz>	ok
Sep 09 22:12:04 <greycat>	emg: they won't reveal the format of the lines because then you would solve the problem using the correct tool for the input they showed, but they want some sort of MAGICAL META SCRIPT that they can apply to EVERY problem
Sep 09 22:12:32 <greycat>	see also
Sep 09 22:12:33 <greycat>	!cult
Sep 09 22:12:33 <greybot>	The Cult Of The Regex. This eldritch brotherhood is dedicated to the dogma that Every Problem Must Be Solved By A Regular Expression, Preferably A PCRE. They will invent ludicrous problems whose only feasible solution is a regular expression, driving all men mad.
Sep 09 22:12:54 <andecy>	Thanks guys!
Sep 09 22:12:57 <emg>	MAGICAL META SCRIPT is my new favorite term for software engineer
Sep 09 22:12:57 <greycat>	In this case, it's a Sed Cultist.  If you solve the problem without sed, they will change or mutate the input until you give them a sed solution.
Sep 09 22:13:16 <twkm>	{xmb}: that doesn't seem to be a complete sentence.  but you didn't mean cmd.exe, you want bash to not do things yet still invoke the debug trap?  i don't think that's possible.
Sep 09 22:13:21 <{xmb}>	which was the noexec option as in bash -n
Sep 09 22:13:43 <{xmb}>	er yes kinda, im got it nearly working
Sep 09 22:17:25 <simbioz>	lol no, I am preparing for the LFCS and found a site that say you can "use a pattern as a beginning and end of a range"  (http://evc-cit.info/cit052/sed_tutorial.html) So I thought: hey, maybe I can delete all lines ending with a numeric range. That's all
Sep 09 22:17:27 <iowenovcw>	thank you for your help.
Sep 09 22:17:57 <iowenovcw>	i understand now that you cannot use a variable in a {} in a for loop and i must therefore use a c-style bash for loop or, alternately, a while loop
Sep 09 22:19:09 <greycat>	xmb: set -n is ignored by interactive shells, and if you use it in a script, it disables the rest of the script, so nothing else happens after that.  Not even set +n.
Sep 09 22:19:23 <Riviera>	simbioz: actually, good thinking. And by that you found out something that sed and regexes are bad at.
Sep 09 22:19:33 <Riviera>	simbioz: perhaps try solving it with awk instead.
Sep 09 22:19:46 <simbioz>	Will do
Sep 09 22:19:49 <{xmb}>	i saw greycat thx, it hung one of my termianls to >x<close
Sep 09 22:21:59 <iowenovcw>	I have another question...  the other task that I am doing is splitting album flacs into constituent tracks with a .cue.  The syntax is shnsplit -P face -o flac -t "%p -- %n - %t" -f filename.cue filename.flac .  I made this script:  https://pastebin.com/VA7RiA9K
Sep 09 22:21:59 <pasteban>	Paste is available without ads on http://pastebin.com/raw/VA7RiA9K
Sep 09 22:23:17 <iowenovcw>	i'm curious to know if there is a way to expand file names within a script the way you can on the command line.  the way i'm using it now is to execute ls (so i know the file names of the .cue and .flac) and then typing ~/bin/flacsplit firstlettersofcue[tab].cue firstlettersofflac[tab].flac [CR]
Sep 09 22:23:47 <emg>	!ls
Sep 09 22:23:47 <greybot>	DO NOT USE ls' output for anything. ls is a tool for interactively looking at directory metadata. Any attempts at parsing ls' output with code are broken. Globs are much more simple AND correct: ''for file in *.txt''. Read http://mywiki.wooledge.org/ParsingLs
Sep 09 22:23:56 <emg>	iowenovcw: yes, globs work in scripts
Sep 09 22:23:59 <iowenovcw>	no no...
Sep 09 22:24:13 <greycat>	yes yes
Sep 09 22:24:16 <iowenovcw>	i'm using ls to display the files in the directory.
Sep 09 22:24:25 <emg>	use a glob
Sep 09 22:24:27 <Riviera>	iowenovcw: it's pretty annoying when you have the patterns in variables, but trivial when they are not:
Sep 09 22:24:28 <emg>	instead of <tab> put *
Sep 09 22:24:40 <iowenovcw>	so my eyes see them and then my brain knows them.
Sep 09 22:25:04 <Riviera>	iowenovcw: shopt -s nullglob; array=(file*.cue); printf 'First found file: %s\n' "${array[0]}"
Sep 09 22:26:06 <iowenovcw>	ok...  so what you're saying is to input the file names by prompting for them and then entering firstletters*.cue firstletters*.flac ?
Sep 09 22:26:07 <Riviera>	(in a script you'd test if there really were matching files; e.g. by checking the amount of elements in the array ${#array[@]}. See the FAQ fore more.)
Sep 09 22:26:17 <kerframil>	wait. * isn't necessarily going to have the correct result, because it is not equivalent to using tab interactively to deterministically match one file of what may be a set. it will only be equivalent if there is only one possible match for each glob.
Sep 09 22:26:20 <iowenovcw>	ok, i'll look it over, thanks for the starting point.
Sep 09 22:26:23 <greycat>	iowenovcw: why are you *prompting* the user?
Sep 09 22:26:28 <Riviera>	iowenovcw: i did not realise prompting for patterns was on the table :)
Sep 09 22:26:44 <greycat>	if you're writing an *interactive* script, that changes many things
Sep 09 22:26:58 <iowenovcw>	ok, then i'll stick to what i have.
Sep 09 22:27:12 <Riviera>	kerframil: of course you are right, but i would say that iowenovcw can also use their brain for evaluating our answers. :)
Sep 09 22:27:58 <iowenovcw>	i was hoping to get away from putting the file names in at the command line as $1 and $2 to force the user (me) to put both of them in as the script is being executed to make sure both are there.
Sep 09 22:28:09 <kerframil>	Riviera: yeah. it's just that I don't understand the original question yet.
Sep 09 22:28:29 <Riviera>	kerframil: the prompting complicates it, yes :|
Sep 09 22:29:15 <iowenovcw>	i'll look over the wiki to see what that gives me...but i think the answer is no, you can't use [TAB] to expand the file names at an interactive script prompt?
Sep 09 22:29:43 <greycat>	you can turn on readline in your read commands (-e option) if you want to use tab completion after being prompted by a bash script
Sep 09 22:30:06 <iowenovcw>	thanks, i'll give that a whirl.
Sep 09 22:30:09 <kerframil>	that's the same readline that provides the functionality you are referring to.
Sep 09 22:30:13 <greycat>	but this *design* is questionable
Sep 09 22:30:17 <kerframil>	yes, it is.
Sep 09 22:30:24 <emg>	iowenovcw: making a script interactive sucks. instead take what you need as arguments, then the user will provide the files and be able to hit tab etc.
Sep 09 22:31:27 <{xmb}>	andecy greycat twkm buggy: http://ix.io/1UH8
Sep 09 22:31:46 <iowenovcw>	what is the irc command to send a private message?
Sep 09 22:31:48 <iowenovcw>	i forget
Sep 09 22:31:53 <{xmb}>	 /msg or /query
Sep 09 22:32:04 <Riviera>	iowenovcw: /msg greycat hi!
Sep 09 22:32:19 <greycat>	hiss
Sep 09 22:32:20 <iowenovcw>	that's what i thought...
Sep 09 22:32:28 <Riviera>	:D
Sep 09 22:34:14 <iowenovcw>	ok, it's just the way that quassel does/does not display /msg i guess.  I used to use irc like 25 years ago...it was a different interface then.
Sep 09 22:36:47 <andecy>	xmb thanks!
Sep 09 22:37:03 <greycat>	I'm terrified now.
Sep 09 22:37:31 <{xmb}>	its at least code that logs instead of non-code
Sep 09 22:37:51 <greycat>	last thing I heard was that it was buggy
Sep 09 22:38:09 <andecy>	xmb poor penguins
Sep 09 22:38:12 <{xmb}>	yea it was, i halfway fixed it, http://ix.io/1UH9 ..
Sep 09 22:38:55 <Mooglefrooglian>	Hi there - I'm looking for a way to pass a lambda function/subshell to a script to run. You can pass a string to run as a command pretty easily then run eval or similar on it, but that is more annoying than I'd like. Is there an easy way to do something like that?
Sep 09 22:38:58 <{xmb}>	andecy if u're interested in it i can make some more work on it
Sep 09 22:39:28 <Mooglefrooglian>	The context is that I'd like to dynamically create an SSH tunnel, export the port, and run a subcommand which accesses the port for use with its own stuff.
Sep 09 22:39:57 <Mooglefrooglian>	It'd be nice if I could write something like with-ssh-tunnel <some config file> ( command-i-want-to-run --port $SSH_TUNNEL_PORT )
Sep 09 22:39:58 <greycat>	you have to *select* the port yourself, so you already know the value
Sep 09 22:40:19 <Mooglefrooglian>	The destination port has to be selected, but the local forwarded port is dynamic greycat
Sep 09 22:40:34 <greycat>	what the hell option is that
Sep 09 22:41:00 <Mooglefrooglian>	Multiple scripts will want to use the same forwarded thing, but I want to automatically end the session after the script ends. It's convenient if the local port is randomized so they don't accidentally use a port another script is using.
Sep 09 22:41:23 <{xmb}>	maybe you want to just capture the output of the remote 'echo $port'
Sep 09 22:42:00 <Mooglefrooglian>	I want an SSH tunnel to persist for the duration of another bash command, and I want the local port forwarded through the tunnel to be dynamic. I don't have a strong preference on the exact implementation.
Sep 09 22:42:05 <greycat>	oh, -R has some crap about "dynamically allocated", so this is a freakin' *REVERSE* tunnel!?
Sep 09 22:42:05 <andecy>	xmb I'm will probably work on this code myself, youve helped a lot! thanks!
Sep 09 22:42:16 <{xmb}>	easy, peace
Sep 09 22:42:33 <Mooglefrooglian>	I want my local port N to point to a url like blahblahblah:80 inside a VPN. I am tunneling through a bastion instance.
Sep 09 22:42:47 <andecy>	xmb but if you ever finish it i will be happy to have it
Sep 09 22:42:55 <Mooglefrooglian>	I can manually create a tunnel like that with something like ssh -L 23456:app-cache-c-prod-2.ht9t82.ng.0001.use1.cache.amazonaws.com:6379 app-bastion
Sep 09 22:43:13 <Mooglefrooglian>	And while that runs I can locally direct traffic to localhost:23456 to access this remote VPN'd location.
Sep 09 22:43:14 <greycat>	so it's a -L tunnel.  NOT a reverse tunnel.  There IS NO crap about "dynamically allocated" in the -L option in my man page.
Sep 09 22:43:17 <{xmb}>	ill see to work some on it, 50/50 chance
Sep 09 22:43:52 <Mooglefrooglian>	greycat, the port above (23456) is what I want to be random. That part is easy. I can generate random ports trivially.
Sep 09 22:44:04 <iowenovcw>	thanks all...
Sep 09 22:44:07 <greycat>	So you're randomizing it yourself.  Fine.  What are you asking *us* for, then?
Sep 09 22:44:13 <Mooglefrooglian>	I want to pass a subshell to another script.
Sep 09 22:44:19 <greycat>	you what
Sep 09 22:44:21 <Mooglefrooglian>	Let me give you an example of the current setup and why I hate it.
Sep 09 22:44:48 <andecy>	xmb twkm greycat thanks for the help
Sep 09 22:44:48 <{xmb}>	you read off a file in a bash daemon and exec / eval the commands ?
Sep 09 22:45:10 <{xmb}>	peace andecy
Sep 09 22:45:38 <Mooglefrooglian>	with-ssh-tunnel prod-cache-ro "source variables_using_$SSH_TUNNEL_PORT && ~/query_session_uuids.py --filters '{\"something\"%3A[\"something\"]}'"
Sep 09 22:45:46 <twobitsprite>	Mooglefrooglian: you export functions with "export -f"
Sep 09 22:46:23 <Mooglefrooglian>	You'll see above in this script that I pass a string "source variables..." to the with-ssh-tunnel script I wrote. It then evals it.
Sep 09 22:46:28 <Mooglefrooglian>	It's disgusting, I have to string-encode everything I put in there.
Sep 09 22:46:41 <twobitsprite>	Mooglefrooglian: if that's not what you're looking for, I don't know what you mean by "pass a subshell"
Sep 09 22:46:50 <greycat>	# command='echo "$hi"'; printf '%q\n' "$command"
Sep 09 22:46:51 <shbot>	greycat: echo\ \"\$hi\"
Sep 09 22:47:14 <Mooglefrooglian>	What I want is something like: with-ssh-tunnel prod-cache-ro ( source variables_using_$SSH_TUNNEL_PORT && ~/query_session_uuids.py --filters '{"something"%3A["something"]}'
Sep 09 22:47:30 <Mooglefrooglian>	Where the second argument is a subshell to run or a lambda function or similar.
Sep 09 22:47:30 <greycat>	your syntax doesn't even make sense.  you can't have random ( in the middle of a command.
Sep 09 22:47:35 <Mooglefrooglian>	String-encoding the command is awful and unergonomic.
Sep 09 22:47:35 <{xmb}>	i didnt understand either
Sep 09 22:47:44 <Mooglefrooglian>	You're right, you can't have a random ( in the middle of a command. That's the problem.
Sep 09 22:47:52 <Mooglefrooglian>	I am looking for a better solution than passing in the function I want to run as a string.
Sep 09 22:47:58 <greycat>	you've failed to explain what you think the ( does
Sep 09 22:48:04 <twobitsprite>	Mooglefrooglian: put your code in a function, export -f it, then pass the function name to your script
Sep 09 22:48:09 <{xmb}>	i understood none of what u wanna do dood with tunnel
Sep 09 22:48:37 <Mooglefrooglian>	twobitsprite, thank you for the recommendation. That will be more pleasant to use. I'll try that. It's still a little unergonomic - it's not possible to do better? In eg. zsh you can run a command like time ( echo "hi" ; sleep 5 ), but time is a builtin.
Sep 09 22:48:43 <greycat>	Me either.  I thought "oh, he wants to run these commands on a remote system", but then where does the *tunnel* come in
Sep 09 22:49:02 <{xmb}>	and this weird syntax
Sep 09 22:49:03 <twobitsprite>	Mooglefrooglian: bash isn't a functional programming language.
Sep 09 22:49:12 <Mooglefrooglian>	I just want an ssh tunnel so I can do HTTP calls etc. from my local computer to a remote computer in a VPN, all code runs locally and tunnels through it to the remote system. Sorry for any confusion.
Sep 09 22:49:32 <{xmb}>	what are 'http calls'
Sep 09 22:49:39 <{xmb}>	you want a pure tunnel nothing else ?
Sep 09 22:49:43 <Mooglefrooglian>	twobitsprite, Understood. Thank you. I thought it would be useful to ask. Your solution seems like the best I'll get for now, then. I'm very weak on bash so I was unaware if there was anything better.
Sep 09 22:49:50 <{xmb}>	a squid proxy style or transparent proxy
Sep 09 22:50:12 <greycat>	if he just wanted an ssh socks proxy for a browser, that would be ssh -D
Sep 09 22:50:17 <{xmb}>	you can configure static forwarding with dynamic 1port to static destination system
Sep 09 22:50:18 <greycat>	but I don't think that's what he wants
Sep 09 22:50:18 <Mooglefrooglian>	Sure, something like that xmb. I am using an SSH tunnel to perform that because to get into the VPN I can pass all traffic through a bastion instance open to the public internet.
Sep 09 22:50:21 <{xmb}>	then firewall your ip out
Sep 09 22:50:22 <Mooglefrooglian>	SSH also handles authentication etc.
Sep 09 22:50:48 <{xmb}>	but you want many different http requests no? not just to one or two hosts
Sep 09 22:50:53 <Mooglefrooglian>	I want to run these scripts from any random computer that can get in to the bastion via ssh. SSH is how we're authenticating and allowing external access to the VPN.
Sep 09 22:51:03 <{xmb}>	then you'd have to run a transparent proxy, u connect to that and enter the url and it requests it
Sep 09 22:51:10 <greycat>	... maybe he *does* want an ssh -D ?!
Sep 09 22:51:16 <greycat>	I can't figure this shit out at all.
Sep 09 22:51:21 <Mooglefrooglian>	Our company has a variety of servers running in the VPN and it's ideal if my script is generic enough to access any of them trivially without a ton of per-user setup. Ideally other users at my company would use these scripts.
Sep 09 22:51:42 <{xmb}>	so u want only a couple of forwards ?
Sep 09 22:51:55 <Mooglefrooglian>	The set of forwards will be static and known in advance.
Sep 09 22:52:02 <Mooglefrooglian>	It'd be like 5-10.
Sep 09 22:52:03 <{xmb}>	we can, code a script that has dynamical local port but static forwarded addr:port
Sep 09 22:52:06 <{xmb}>	and that a couple of times
Sep 09 22:52:26 <{xmb}>	so u want then tunnels to 5 - 10 times
Sep 09 22:52:43 <{xmb}>	plaintext tunnels made via ssh tunneling ? or more ssh encrypted ones
Sep 09 22:52:44 <greycat>	when you say "in the VPN" do you really mean "in a DMZ" or something?
Sep 09 22:52:52 <{xmb}>	maybe u wanna run something else like socat
Sep 09 22:53:04 <{xmb}>	'in my fantasy - all works'
Sep 09 22:53:26 <{xmb}>	you can make ssh forward port this to that, not sure tho
Sep 09 22:53:42 <Mooglefrooglian>	greycat, I mean that all servers are in a private network not open to the public. However, there is a single server in that private network open to public traffic that you can access via SSH. From there, once you've SSHed into that instance ("bastion" is what we call it), you can SSH to any other internal server.
Sep 09 22:53:44 <{xmb}>	i'd socat some script with or without random local ports, to the destinations
Sep 09 22:54:18 <{xmb}>	i can prolly code reverse shells running there
Sep 09 22:54:32 <{xmb}>	you wanna just type 'server3 command..' and it execs that command there yes ?
Sep 09 22:54:34 <greycat>	Mooglefrooglian: I'm not seeing where bash comes into this question at all.  You just want to configure your ssh client to open 5-10 tunnels when you ssh to this bastion host?  Sure, do that.
Sep 09 22:54:37 <Mooglefrooglian>	It's convenient for our architecture that all internal servers can talk via plain HTTP without authentication. This setup means it's impossible for eg. anyone in the public to ping or send HTTP requests to the servers. But of course as a dev I want access to them locally. So, SSH tunnel.
Sep 09 22:54:55 <Mooglefrooglian>	Bash comes into this because I want to run scripts that eg. access a database hosted in the VPN.
Sep 09 22:55:10 <Mooglefrooglian>	So to do that I want to tunnel to it via SSH. My scripts to read the database are in BASH.
Sep 09 22:55:15 <{xmb}>	you should explain more simply
Sep 09 22:55:36 <{xmb}>	..db.. mysql.. file db.. ..
Sep 09 22:55:47 <greycat>	Go talk to #openssh.
Sep 09 22:55:57 <{xmb}>	it needs scripting
Sep 09 22:56:09 <Mooglefrooglian>	This is all context and unnecessary to get into, really. I'm sorry for the confusion again. My question, at its core, is what the most convenient way to pass a command into another script was, and as per twobitsprite, there's no real great way to do it beyond exporting a function (which I find far better than passing a string).
Sep 09 22:56:20 <Mooglefrooglian>	So I'll try doing that.
Sep 09 22:56:43 <{xmb}>	you can socat forward port 222 to 0.0.1.1:333 easiestly
Sep 09 22:57:01 <{xmb}>	either local non inet port 222 or some more specific, ..
Sep 09 22:57:04 <Mooglefrooglian>	The question really has nothing to do with SSH; the tunnel is a solved problem. I know how to do it. I have scripts working with it. The problem that exists is just making nice elegant scripts.
Sep 09 22:57:06 <{xmb}>	in case 333 has the http
Sep 09 22:57:17 <Mooglefrooglian>	And my question really is answered, so thank you all for taking the time to answer things. have a good day.
Sep 09 22:57:22 <{xmb}>	peace
Sep 09 22:57:27 <greycat>	Moving goalposts.  He wants a tunnel so he can talk to services on DMZ hosts... no!  Now he wants to execute commands on them!  But it has to be fancy!  Some sort of remote procedure call API that he's building from scratcH!
Sep 09 22:57:45 <greycat>	Ask #openssh how to do whatever the REAL goal is.
Sep 09 22:57:51 <{xmb}>	'it has to be fancy' has the word
Sep 09 22:59:53 <{xmb}>	:/ greycat
Sep 09 23:07:53 <murder>	is it wrong to do if (( varY > varX )) ? should I always use if [ varY -gt varX ] ?
Sep 09 23:08:22 <twkm>	the former seems much better than the latter.
Sep 09 23:09:03 <{xmb}>	how to reset exec 1>>"$file" to stdout or fd/1, http://ix.io/1UHg is invalid there
Sep 09 23:12:16 <twkm>	save it first.
Sep 09 23:12:36 <emg>	murder: in bash use (( for arithmetic contexts, in POSIX sh (( doesn't exist so you would use [ but also would need to expand e.g. if [ "$varY" -gt "$varX" ];
Sep 09 23:12:44 <murder>	twkm using shellcheck it claims SC2205
Sep 09 23:12:59 <murder>	emg yeah
Sep 09 23:13:03 <murder>	so I'm using bashim
Sep 09 23:13:09 <murder>	I was afraid it was wrong ffs.
Sep 09 23:13:11 <twkm>	duh.
Sep 09 23:13:11 <murder>	koala_man :(
Sep 09 23:13:16 <{xmb}>	twkm ?
Sep 09 23:13:16 <emg>	if shellcheck says SC2205 then you used ( instead of ((
Sep 09 23:13:22 <murder>	I used ((
Sep 09 23:13:34 <twkm>	this is #bash, why wouldn't you use bash syntax.  /me shrugs
Sep 09 23:13:44 <emg>	then the SC2205 page in the shellcheck docs needs to be updated
Sep 09 23:13:52 <{xmb}>	maybe you have #!/bin/sh
Sep 09 23:14:27 <{xmb}>	( instead of (( seems nonsense, parsing error or something
Sep 09 23:14:31 <also_uplime>	can you make a testcase?
Sep 09 23:14:48 <twkm>	not (.  [.
Sep 09 23:14:57 <{xmb}>	ah well, maybe its sh mode
Sep 09 23:15:01 <twkm>	perhaps you need a different font.
Sep 09 23:15:22 <{xmb}>	i need more friends
Sep 09 23:16:32 <{xmb}>	what about save it first twkm, .. ?
Sep 09 23:16:57 <{xmb}>	you mean v1=/proc/self/fd/1
Sep 09 23:17:10 <geirha>	# exec 3>&1 1>file; echo hello; exec 1>&3-; ls -l
Sep 09 23:17:11 <shbot>	geirha: total 4
Sep 09 23:17:12 <shbot>	geirha: -rw-r--r-- 1 root root 6 Sep  9 21:17 file
Sep 09 23:17:13 <kerframil>	dup it to another file descriptor so that you can dup it back again.
Sep 09 23:17:20 <{xmb}>	oic thxx
Sep 09 23:17:37 <twkm>	a'la, exec 3>&1 1>>file
Sep 09 23:17:52 <{xmb}>	thxx
Sep 09 23:19:27 <mknod>	# touch foo bar; mv -n foo bar; echo "$?"; ls
Sep 09 23:19:28 <shbot>	mknod: 0
Sep 09 23:19:28 <shbot>	mknod: bar  foo
Sep 09 23:19:46 <mknod>	Does anyone know why mv sucks so bad?
Sep 09 23:19:59 <twkm>	in what way?
Sep 09 23:20:22 <mknod>	errors are poorly reported, when they are
Sep 09 23:20:42 <{xmb}>	with 1>&3 it works with 1>&3- it closes the shell, thxx anyway
Sep 09 23:20:46 <mknod>	be it with the exit status or the error message
Sep 09 23:20:48 <geirha>	murder: shellcheck does give sc2205 if you use -gt instead of > inside (( ))
Sep 09 23:20:52 <twkm>	-n isn't standard.  doesn't it say not to give errors?
Sep 09 23:21:08 <{xmb}>	mknod, i claim many tools are incompletly written
Sep 09 23:21:11 <mknod>	twkm, prevent mv from overwriting an existing file
Sep 09 23:21:16 <{xmb}>	like, pro coders would code better
Sep 09 23:21:42 <knstn>	It seems that the "Unix philosophy" is a hoax. There were building small programms that did one thing, and then pipe each other, simply because that era's hardware couldn't handle large programms.
Sep 09 23:21:45 <twkm>	then indeed, you are using a shit mv.  otoh it is non-standard so that was likely anyway.
Sep 09 23:22:23 <twkm>	knstn: yet could run the multiple small tools at the same time?  surprising.
Sep 09 23:23:22 <{xmb}>	andecy, this is the final version: only backdraw is when in use the chars appear like few delayed, .. http://ix.io/1UHq
Sep 09 23:23:49 <mknod>	twkm, both GNU mv and BSD mv have the same shitty behavior, so there may be a reason. I never found a way to perform BOTH file system operations AND proper error handling because of this
Sep 09 23:24:20 <also_uplime>	aliases are off by default in scripts
Sep 09 23:24:22 <{xmb}>	it just redirects all output to "$db" log file, with stamp in DEBUG trap, and read that file to terminal, and on kill -USR1 it returns to old behavior
Sep 09 23:24:39 <twkm>	xmb likes using them, so enables them.
Sep 09 23:24:41 <also_uplime>	oh nmd, missed the shopt
Sep 09 23:24:43 <{xmb}>	also_uplime me ? i have shopt -s expand_aliases
Sep 09 23:24:53 <also_uplime>	it should be a function anyways
Sep 09 23:25:07 <{xmb}>	i dont like functions cause of speed slowdown / overheat
Sep 09 23:25:07 <also_uplime>	does tail natively expand ~?
Sep 09 23:25:12 <also_uplime>	wut
Sep 09 23:25:22 <twkm>	at least sie didn't write most of it in awk.
Sep 09 23:25:32 <{xmb}>	it was a bash question
Sep 09 23:25:40 <twkm>	hasn't stopped you before.
Sep 09 23:25:44 <{xmb}>	i dont think tail does but i think the shell does at assignment
Sep 09 23:25:57 <{xmb}>	# foo=~/bar; printf -- %s "$foo"
Sep 09 23:25:58 <shbot>	{xmb}: /root/bar
Sep 09 23:26:02 <knstn>	twkm: i'm on a spree of "recent" youtube videos with BK and in one of them he implies that exact thing
Sep 09 23:26:13 <{xmb}>	inside ${foo:=~/doesnt/expand}
Sep 09 23:27:01 <also_uplime>	ah, that must be what I was thinking off
Sep 09 23:27:05 <twkm>	knstn: the machines were certainly tiny by today's standards, even back then they weren't given beefy machines merely what was available.  so tiny, yes.
Sep 09 23:27:19 <andecy>	xmb thanks for all the help
Sep 09 23:27:23 <{xmb}>	easy
Sep 09 23:27:37 <{xmb}>	im happy to code from time to time different stuffs
Sep 09 23:27:52 <twkm>	but everything should be able to do everything has its own issues.
Sep 09 23:28:12 <{xmb}>	there wont be this
Sep 09 23:28:28 <{xmb}>	there would be 'interactive functional complete programming language' like 'natural language'
Sep 09 23:28:44 <{xmb}>	and then mv is like 'move file with optional by user supplied word-/args'
Sep 09 23:29:21 <twkm>	consider compression.  ed needs to be revised to handle compress'd files, then again to handle gzip'd files, then again to handle bzip'd files, then again to handled bzip2
Sep 09 23:29:21 <{xmb}>	im about such, isnt so hard to code, to code the all-different-words is the where im stuck
Sep 09 23:29:25 <twkm>	...
Sep 09 23:29:44 <{xmb}>	thats 'completnes'
Sep 09 23:29:56 <andecy>	I dont always find myself in a situation which a quick google search doesnt solve my problem, it was refreshing.. Guess I need to lift those bash weights more often
Sep 09 23:29:57 <{xmb}>	:/
Sep 09 23:30:13 <{xmb}>	i havent found ONE google result in years
Sep 09 23:30:32 <{xmb}>	and if i look at bash or sh scriptings on the net, all invalid bullcrapp
Sep 09 23:30:51 <{xmb}>	they like learned one thing, then they blog about it, even if its not valid
Sep 09 23:31:09 <{xmb}>	in ugly-ness, instead of elegant passthru, like newspapers
Sep 09 23:31:13 <{xmb}>	0% what i want / need
Sep 09 23:31:29 <{xmb}>	im about coding args as words, no -dash-option
Sep 09 23:31:35 <{xmb}>	which is very simple then
Sep 09 23:31:46 <andecy>	you have any recommendation for interesting reading material?
Sep 09 23:31:55 <{xmb}>	define word be action and define subwords be actions, optionally recursivley coded
Sep 09 23:32:01 <{xmb}>	0 dood
Sep 09 23:32:09 <{xmb}>	!coproc
Sep 09 23:32:09 <greybot>	http://wiki.bash-hackers.org/syntax/keywords/coproc
Sep 09 23:32:49 <{xmb}>	man bash and gawk
Sep 09 23:32:57 <{xmb}>	and these chats here
Sep 09 23:33:04 <{xmb}>	the chats teached me bash and gawk
Sep 09 23:33:14 <knstn>	forgot wooledge
Sep 09 23:33:16 <{xmb}>	interactive help when needed as needed [sometimes so perfect]
Sep 09 23:34:39 <andecy>	xmb nice, then i guess i will stick around hehe
Sep 09 23:35:34 <andecy>	xmb that bash-hackers wiki looks awesome
Sep 09 23:36:33 <{xmb}>	i dunno i just know that page, that halfway teached me to use coproc
Sep 09 23:36:38 <{xmb}>	there is also wooledge by greycat
Sep 09 23:36:44 <{xmb}>	i guess u can take a look
Sep 09 23:36:46 <{xmb}>	!wooledge
Sep 09 23:36:49 <{xmb}>	!guide
Sep 09 23:36:50 <greybot>	http://mywiki.wooledge.org/BashGuide or in PDF: http://s.ntnu.no/bashguide.pdf
Sep 09 23:40:06 <andecy>	ooh i know that one
Sep 09 23:40:30 <{xmb}>	my inet will go off in 20 mins, peace
Sep 09 23:41:27 <andecy>	kk
Sep 09 23:41:44 <{xmb}>	had fun
Sep 09 23:43:23 <andecy>	cya
Sep 10 01:46:24 <TrentonAdams>	I'm confused about this.  mountpoint -q /media/backup || echo "missing mount /media/backup/" && exit 99 # exits with 99 when mountpoint is successful.  Does echo not have a return code?
Sep 10 01:48:39 <rafasc>	TrentonAdams: it has, but you have an explicit exit 99;
Sep 10 01:48:51 <larryv>	!pf 22 > TrentonAdams
Sep 10 01:48:51 <greybot>	TrentonAdams: https://mywiki.wooledge.org/BashPitfalls#pf22 -- Don't do this! -- cmd1 && cmd2 || cmd3
Sep 10 01:53:36 <TrentonAdams>	larryv, Right, I made a note of that awhile back, and forgot to do this -> mountpoint -q /media/backup || ! echo "missing mount /media/backup/" || exit 99
Sep 10 01:54:46 <TrentonAdams>	cause if echo is hit, I want it to be 1 so that exit is ran.
Sep 10 01:55:01 <rafasc>	if ! mountpoint -q; then echo missing; exit 99; fi
Sep 10 01:55:29 <rafasc>	whit not this?
Sep 10 01:55:32 <rafasc>	why*
Sep 10 01:56:14 <TrentonAdams>	rafasc, I suppose that's not terrible either.
Sep 10 01:56:19 <TrentonAdams>	Probably less confusing
Sep 10 01:56:25 <larryv>	or mountpoint -q /media/backup || { echo "oops"; exit 99; } if you really want the pipeline
Sep 10 01:56:42 <larryv>	er, compound statement. w/e
Sep 10 01:57:16 <TrentonAdams>	larryv, Oh, I did not know of that syntax.  So that doesn't run inside a shell?
Sep 10 01:57:44 <larryv>	no, { …; } is just grouping. ( … ) does a subshell
Sep 10 01:57:55 <TrentonAdams>	larryv, Yeah, I knew () did. :D
Sep 10 01:58:34 <rafasc>	not terrible? for the cause you're showing is much more readable than the mental gymnastics you have to do to figure out when the pipeline will exit.
Sep 10 02:03:42 <kerframil>	well, that's novel.
Sep 10 02:06:09 <TrentonAdams>	rafasc, Yep, that's what I meant when I said "Probably less confusing".  But it's more effort at the time of writing too.  i.e. Don't miss a ;, don't miss a then, or a fi.  Those are the two I miss most often.
Sep 10 02:14:04 <sudomann_>	whats the website that gives suggestions to improve my bash script again
Sep 10 02:14:12 <sudomann_>	Its frequently referenced in here
Sep 10 02:14:15 <larryv>	shellcheck
Sep 10 02:14:18 <sudomann_>	thanks
Sep 10 02:18:12 <sudomann_>	can someone please explain to me how CRLF vs LF plays into my scripts often failing to run when I write them within windows?
Sep 10 02:18:45 <sudomann_>	I recently learned that the fix was to switch from CRLF to LF using a toggle in VSCode
Sep 10 02:18:55 <sudomann_>	But I dont understand why this is neccesary
Sep 10 02:19:20 <kerframil>	it interferes with shebangs, for a start.
Sep 10 02:19:50 <kerframil>	ergo, are you really trying to run $'bash\r'?
Sep 10 02:20:18 <sudomann_>	aahh
Sep 10 02:20:23 <sudomann_>	so thats what that means :)
Sep 10 02:20:35 <kerframil>	if you get that, you'll probably begin to understand how it can interfere with other commands
Sep 10 02:20:46 <sudomann_>	Yup, suddenly get it now.
Sep 10 02:21:18 <sudomann_>	Used to happen all the time, and i would just give up and fire up a whole linux vm and write the script in there, than struggle with window's bash
Sep 10 02:21:21 <sudomann_>	Thakn you
Sep 10 02:22:01 <kerframil>	there are plenty of decent editors; Notepad2-mod, Notepad++ and so forth.
Sep 10 02:22:39 <kerframil>	As they handle line-endings intelligently, I would just default those to use the LF format.
Sep 10 03:07:16 <pj>	sudomann_: there are also easy to use dos2unix and similar utilities for when that happens.  There is rarely ever any need to completely rewrite something.
Sep 10 03:13:32 <rendysurvage>	do people write in assembly any more?
Sep 10 03:13:50 <rendysurvage>	besides steve gibson
Sep 10 03:27:46 <scx>	I am looking for something like AC_ARG_ENABLE or AC_ARG_WITH, but with support for an argument.
Sep 10 03:28:35 <scx>	e.g. --with-featurename=3
Sep 10 03:30:54 <kerframil>	autoconf isn't covered here. try ##workingset.
Sep 10 04:18:03 <scx>	How to say this in sh?
Sep 10 04:18:03 <scx>	https://pastebin.com/raw/uXp30cjV
Sep 10 04:19:46 <scx>	[ -gt ] or something else?
Sep 10 04:20:33 <larryv>	!wayttd
Sep 10 04:20:33 <greybot>	What Are You Trying To Do?
Sep 10 04:21:15 <larryv>	just test whether LEVEL is greater than 1?
Sep 10 04:24:10 <pj>	larryv: (( LEVEL > 1 ))
Sep 10 04:26:27 <pj>	you probably want this...
Sep 10 04:26:40 <pj>	# level=2; echo "$(( level > 1 ? level : 1 ))"
Sep 10 04:26:41 <shbot>	pj: 2
Sep 10 04:26:58 <pj>	!$(( > larryv
Sep 10 04:26:59 <greybot>	larryv: $((...)) is an arithmetic substitution. After doing the arithmetic, the whole thing is replaced by the value of the expression. See <http://mywiki.wooledge.org/ArithmeticExpression>.
Sep 10 04:27:17 <scx>	larryv: get maximum of two values
Sep 10 04:27:21 <pj>	also ...
Sep 10 04:27:25 <pj>	!caps > larryv
Sep 10 04:27:25 <greybot>	larryv: By convention, environment variables (PATH, EDITOR, SHELL, ...) and internal shell variables (BASH_VERSION, RANDOM, ...) are fully capitalized. All other variable names should be lowercase. Since variable names are case-sensitive, this convention avoids accidentally overriding environmental and internal variables.
Sep 10 04:28:04 <scx>	or: get $level if $level > 0, else: get 1
Sep 10 04:28:25 <larryv>	pj: thanks! but it's scx that's asking :)
Sep 10 04:28:31 <pj>	oops, sorry
Sep 10 04:28:35 <scx>	in POSIX, because I need to use this in configure.ac
Sep 10 04:28:47 <pj>	scx: see everything I just directed to larryv (by accident)
Sep 10 04:31:15 <scx>	pj: a few minutes ago I've already paste this:
Sep 10 04:31:16 <scx>	((LEVEL>1 ? LEVEL : 1))
Sep 10 04:31:48 <scx>	but this is undefined in POSIX:
Sep 10 04:31:54 <scx>	In POSIX sh, standalone ((..)) is undefined.
Sep 10 04:32:03 <scx>	https://www.shellcheck.net/
Sep 10 04:43:23 <larryv>	scx: <pj>	# level=2; echo "$(( level > 1 ? level : 1 ))"
Sep 10 04:44:17 <larryv>	which is actually probably what you want, unless you really do want to return that max as an exit status, which i doubt
Sep 10 04:59:02 <pj>	heh, the sh(1P) man page seems to say more about vi vs emacs than actual sh language.
Sep 10 04:59:13 <scx>	larryv: but (( ...) is a bash feature, like [[ ... ]]
Sep 10 04:59:22 <scx>	they are undefined in POSIX
Sep 10 04:59:48 <larryv>	scx: $(( )) and (( )) are two different things
Sep 10 05:00:10 <pj>	sh# level=2; echo "$(( level > 1 ? level : 1 ))"
Sep 10 05:00:11 <shbot>	pj: 2
Sep 10 10:01:48 <gidna>	Hello
Sep 10 10:01:55 <gidna>	How can I use bash to perform floating point calculation like 6/7 ?
Sep 10 10:02:21 <Soliton>	not at all.
Sep 10 10:02:40 <Soliton>	!float
Sep 10 10:02:40 <greybot>	http://mywiki.wooledge.org/BashFAQ/022 -- How can I calculate with floating point numbers instead of just integers?
Sep 10 10:21:20 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep 10 10:21:20 2019

**** BEGIN LOGGING AT Tue Sep 10 10:21:44 2019

Sep 10 10:21:44 *	Now talking on #bash
Sep 10 10:21:44 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 10 10:21:44 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 10 10:21:44 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 10 10:26:33 <osse>	julius_: does it have a #!/bin/bash or similar at the top?
Sep 10 10:26:45 <geirha>	why is there -c in that error message?
Sep 10 10:27:57 <julius_>	https://ideone.com/9HriYr
Sep 10 10:28:06 <armin>	why is there ` in line 0?
Sep 10 10:28:16 <julius_>	no, let me add the shebang
Sep 10 10:28:19 <geirha>	julius_: % is special in crontab
Sep 10 10:28:41 <geirha>	and lose the pointless echo and `` while you're at it
Sep 10 10:29:17 <geirha>	ah no, you concat it with $foo
Sep 10 10:29:47 <geirha>	printf '%s %s\n' "$(date +\%T)" "$foo" >> ~/somefile
Sep 10 10:30:17 <julius_>	ok so do i put a \% instead of % ?
Sep 10 10:30:39 <geirha>	oops, forgot them for the printf, doh
Sep 10 10:30:46 <geirha>	printf '\%s \%s\n' "$(date +\%T)" "$foo" >> ~/somefile
Sep 10 10:32:52 <julius_>	ok lets test
Sep 10 10:34:17 <Soliton>	!grepawk
Sep 10 10:34:17 <greybot>	Awk can do almost everything grep can do. Instead of doing grep 'foo' | awk '{ statement }', try awk '/foo/{ statement }'
Sep 10 10:34:45 <julius_>	yes im not that deep into bash scripting as you guys :)
Sep 10 10:35:15 <julius_>	but the basic works now. apparently the \% fixed the thing
Sep 10 10:36:14 <julius_>	ah yes, stackoverflow has a explanation for the %
Sep 10 10:36:16 <julius_>	good to know
Sep 10 10:37:43 <julius_>	so when running soemthing from crontab like this:  bash script.sh   you dont need the !#/bin/bash or do you?
Sep 10 10:46:33 <geirha>	It's #!/bin/bash, and no, it will be ignored by bash since it starts with #, so it's just a commented line
Sep 10 10:46:59 <geirha>	also, don't put .sh extension on a bash script. It's misleading
Sep 10 10:50:36 <geirha>	oh and the % thing is also documented in crontab(5)
Sep 10 10:51:45 <julius_>	im sure is documented, just never ran into it
Sep 10 12:41:09 <zamba>	i want to rsync a remote folder tree, but i only want files that are newer than x number of days
Sep 10 12:41:11 <zamba>	how can this be done?
Sep 10 12:41:15 <zamba>	over ssh
Sep 10 12:41:39 <djph>	zamba: that's not how rsync works ...
Sep 10 12:41:49 <zamba>	so it's not possible to do this with rsync?
Sep 10 12:42:11 <djph>	don't think so
Sep 10 12:42:17 <djph>	check the manpage though.
Sep 10 12:42:27 <djph>	But I believe rsync is "check everything, move if new"
Sep 10 13:04:02 <Riviera>	zamba: Note there is #rsync
Sep 10 13:49:45 <snooky>	moin
Sep 10 13:54:42 <mingdao>	zao
Sep 10 22:51:48 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep 10 22:51:48 2019

**** BEGIN LOGGING AT Tue Sep 10 22:52:12 2019

Sep 10 22:52:12 *	Now talking on #bash
Sep 10 22:52:12 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 10 22:52:12 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 10 22:52:12 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 10 22:52:28 <emg>	many here would say stick with POSIX single letter flags
Sep 10 22:52:57 <emg>	and in general for POSIX -arguments is the same as -a -r -g -u -m -e -n -t -s
Sep 10 22:53:39 <emg>	nvz: https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html
Sep 10 22:53:42 <kerframil>	for long options, I'd go for the GNU style. otherwise, single letter options are effectively sidelined.
Sep 10 22:53:47 <^>	then sometimes you're programs like gcc that uses all 3
Sep 10 22:54:05 <greycat>	!faq options
Sep 10 22:54:06 <greybot>	https://mywiki.wooledge.org/BashFAQ/035 -- How can I handle command-line options and arguments in my script easily?
Sep 10 22:54:09 <llua>	usually a sign of overengineering
Sep 10 22:59:10 <emg>	and then there are dd and find....
Sep 10 22:59:24 <greycat>	and gcc!
Sep 10 22:59:54 <^>	i like dig's +opt
Sep 10 23:10:08 <hello__>	Hey, I am trying to delete specific lines using bash script
Sep 10 23:11:23 <hello__>	here's my code https://paste.mozilla.org/yREDFdXd
Sep 10 23:11:33 <hello__>	But it ain't working
Sep 10 23:12:55 <geirha>	!code
Sep 10 23:12:56 <greybot>	If you're showing me code, I'm going to assume the code is broken. If the code is broken, it doesn't do what you want to do. If it doesn't do what you want, it doesn't explain what you want, either. Use English, describe your goal, keep broken code to yourself.
Sep 10 23:13:34 <hello__>	Basically I get this error: sed: -e expression #1, char 1: unknown command: `''
Sep 10 23:13:54 <b1tninja>	can you sohw us example.... i dont know sed well, but maybe you could avoid it by just looping throug hthe lines in bash
Sep 10 23:14:05 <hello__>	I am trying to delete a specific line using sed command: sed "1d" <file_name>
Sep 10 23:14:29 <b1tninja>	one thing I will suggest is to use ${var@Q} to get your quoted string
Sep 10 23:14:36 <b1tninja>	instead of whatever you're doing there with $QUOTE
Sep 10 23:14:45 <geirha>	sed '/regex/d'
Sep 10 23:15:19 <^>	why are you passing a literal quote to sed?
Sep 10 23:15:28 <b1tninja>	and if you want sed to edit the same file you're working on, i think you use -i
Sep 10 23:15:33 <hello__>	sed '1d' test deletes the 1st line
Sep 10 23:15:46 <geirha>	obviously guessing on syntax and getting it wrong ... very wrong
Sep 10 23:16:09 <kerframil>	that code made my head hurt. is that initial sed command supposed to be producing a sequence of line numbers somehow?
Sep 10 23:16:23 <hello__>	Ye
Sep 10 23:16:27 <hello__>	*yes
Sep 10 23:16:27 <b1tninja>	can you show us an example input please
Sep 10 23:16:52 <hello__>	sed '1d' file_name deletes the 1st line
Sep 10 23:17:06 <hello__>	So, using the first line I got the number of lines which I need to delete
Sep 10 23:17:27 <geirha>	and   sed '/foo/d'  file_name deletes lines that match foo
Sep 10 23:17:50 <elibrokeit>	I strongly recommend deleting that script from both your computer and the internet and then asking a brand new question with example input and output
Sep 10 23:17:54 <hello__>	and then I'm trying to pass this into something like sed '${the nth line}d'
Sep 10 23:18:02 <geirha>	err, I messed up the spacing there
Sep 10 23:18:12 <elibrokeit>	This is a particularly egregious example of !code
Sep 10 23:18:47 <hello__>	I'm sorry, I'm new to bash
Sep 10 23:19:03 <geirha>	hello__: instead of finding the line numbers of all lines matching a regex, then feeding those line numbers to a second sed to delete them, just delete the lines matching the regex
Sep 10 23:19:30 <b1tninja>	do you realize btw, that if you delete the lines before the other lines, those line numbers change
Sep 10 23:20:25 <b1tninja>	you could do it in reverse, but still, probably easier to just loop through the lines, see if they are in your array
Sep 10 23:20:40 <hello__>	geirha: It's a caveat, I can't use regex
Sep 10 23:20:49 <larryv>	hello__: what? you just did, in the very first line
Sep 10 23:21:52 <hello__>	I'm searching for the string just above coz it may repeat
Sep 10 23:22:05 <hello__>	but the string that I'm searching is unique
Sep 10 23:22:05 <larryv>	sed '/640…C7D/d' E_conll_parse
Sep 10 23:22:22 <elibrokeit>	hello__: please, back up
Sep 10 23:22:30 <elibrokeit>	Show us an input file
Sep 10 23:22:41 <elibrokeit>	Show us what you want to get instead
Sep 10 23:24:32 <kerframil>	some sample lines from E_conll_parse would be useful, to begin with.
Sep 10 23:24:33 <geirha>	Hm. del=$((i+1)), so maybe you want to delete the line after the matchinstead?  sed '/640...C7D/{ n; d; }'
Sep 10 23:26:11 <b1tninja>	how are you getting hte line numbers
Sep 10 23:26:15 <b1tninja>	i bet we can do this in one step
Sep 10 23:26:16 <b1tninja>	instead of 2
Sep 10 23:26:44 <geirha>	the line numbers come from the   sed -n '/640...C7D/='   at the start
Sep 10 23:27:12 <b1tninja>	right but is that just matching some value, can he just select lines that dont have that
Sep 10 23:27:34 <geirha>	We don't know, since he won't tell us
Sep 10 23:28:13 <geirha>	All we have to go on is broken code where we have to guess what the real intent was
Sep 10 23:28:15 <hello__>	https://paste.mozilla.org/X5bJGa3A
Sep 10 23:28:23 <hello__>	I guess this should do...
Sep 10 23:28:48 <geirha>	Well I'll be ... I guessed right
Sep 10 23:28:51 <hello__>	Get you guys brief idea of what I'm tryna do
Sep 10 23:29:17 <elibrokeit>	> The "=" command prints the current line number to standard output.
Sep 10 23:29:24 <elibrokeit>	Why even
Sep 10 23:30:04 <geirha>	sed '/6408545D7CA18C32E19C5948F9C8B89281900ED63125E6CCE797BA459D8DAC7D/{ n; d; }' E_conll_parse
Sep 10 23:30:44 <geirha>	and now I'm all out of teaspoons
Sep 10 23:31:09 <hello__>	what does n; and d; do?
Sep 10 23:31:19 <hello__>	Thanks for the help :)
Sep 10 23:31:20 <geirha>	"read next line" and "delete"
Sep 10 23:31:37 <geirha>	it should be explained in the manual
Sep 10 23:31:48 <hello__>	I'm sorry for complicating things for you guys
Sep 10 23:37:04 <Wulf>	Hello
Sep 10 23:37:46 <twobitsprite>	!ask > Wulf
Sep 10 23:37:46 <greybot>	Wulf: If you have a question, please just ask it. Don't look for topic experts. Don't ask to ask. Don't PM! Don't ask if people are awake, or in the mood to help. Just ask the question straight out, and be patient waiting for an answer. http://mywiki.wooledge.org/NetEtiquette
Sep 10 23:37:59 <Wulf>	A script runs with "set -e". How can I catch any error and run "banner ERROR" and then terminate the program?
Sep 10 23:38:26 <twobitsprite>	!set-e > Wulf
Sep 10 23:38:27 <greybot>	Wulf: "set -e" is an inheritance of the old bourne shell, and doesn't really work well with modern shell features. You'll really have less buggy scripts if you do the error handling manually instead of relying on the unreliable "set -e"; see http://mywiki.wooledge.org/BashFAQ/105
Sep 10 23:38:29 <^>	don't run set -e
Sep 10 23:39:04 <Wulf>	So I should really handle the errors for each and every command I execute?
Sep 10 23:39:56 <Wulf>	alright :-(
Sep 10 23:39:57 <twobitsprite>	Wulf: only the commands that can fail and break the rest of your script
Sep 10 23:40:01 <larryv>	the ones that matter
Sep 10 23:42:40 <twobitsprite>	Wulf: alternatively, put your error handling code in a function and use "trap fun ERR"
Sep 10 23:44:21 <twobitsprite>	help trap | grep -C1 ERR
Sep 10 23:44:24 <twobitsprite>	# help trap | grep -C1 ERR
Sep 10 23:44:26 <shbot>	twobitsprite:     script run by the . or source builtins finishes executing.  A SIGNAL_SPEC
Sep 10 23:44:26 <shbot>	twobitsprite:     of ERR means to execute ARG each time a command's failure would cause the
Sep 10 23:44:26 <shbot>	twobitsprite:     shell to exit when the -e option is enabled.
Sep 10 23:45:33 <Riviera>	... no, don't do that. :)
Sep 10 23:45:50 <Wulf>	Riviera: but it solves my problem and I can go to sleep soon ;-)
Sep 10 23:45:57 <Wulf>	twobitsprite: thanks, will use that.
Sep 10 23:46:12 <Riviera>	oh, in that case: good luck!
Sep 10 23:46:18 <twobitsprite>	Riviera: why? I can imagine a a scenario where it's better than putting "|| exit 1" after every line
Sep 10 23:48:29 <Riviera>	mostly because it's much harder than handling the errors in situ
Sep 10 23:49:30 <Riviera>	that feature's idea is rather for handling otherwise unhandled errors, or for debugging
Sep 10 23:49:53 <Wulf>	Riviera: the only way to handle the errors in my script is to terminate.
Sep 10 23:51:09 <twobitsprite>	Riviera: *shrug* we gave him 2 options, and explained the downsides of each
Sep 10 23:51:22 <Riviera>	ah, and also because -e is a problem in itself
Sep 10 23:51:32 <Riviera>	Wulf: not everything with a non-zero exit code is an error
Sep 10 23:51:55 <Riviera>	Wulf: and even *if* that were so you could simply use set -e without the need for that trap. (but since it's not so ..)
Sep 10 23:52:10 <twobitsprite>	Riviera: so you "&& true" those, just like you would "|| exit 1" everything else without set -e
Sep 10 23:52:45 <Riviera>	twobitsprite: there's a difference
Sep 10 23:53:14 <Wulf>	set -e failed for me, that's why I came here and asked :)
Sep 10 23:53:14 <twobitsprite>	Riviera: I know there is, but I think people in here are a bit too puritanical about this stuff. For all we know, set -e is perfect in Wolf's case
Sep 10 23:53:17 <Riviera>	twobitsprite: set -e is the shoot at everything solution without thinking (and what's worse, with a lot of surprises even when thinking is involved),
Sep 10 23:53:20 <Wulf>	But with "trap" it gets the job done
Sep 10 23:53:53 <Riviera>	twobitsprite: simply handling errors is not like that, because you should anyway be aware of what the code you are writing is doing and what you want to happen when it fails.
Sep 10 23:53:56 <Riviera>	but
Sep 10 23:54:00 <Riviera>	m000t discussion, nite Wulf
Sep 11 00:17:31 <hello__>	Also, how do I replace this line into something like "----------------------" and rewrite into the file itself, I did this: MYVAR='1	6408545D7CA18C32E19C5948F9C8B89281900ED63125E6CCE797BA459D8DAC7D	6408545d7ca18c32e19c5948f9c8b89281900ed63125e6cce797ba459d8dac7d	NUM	CD	_	0	root	_	_' "$MYVAR" | sed -e 's/[a-zA-Z]/-----/g' -e 's/[0-9]/-----/g' -e
Sep 11 00:17:32 <hello__>	's/_/-----/g'
Sep 11 00:17:59 <hello__>	https://paste.mozilla.org/WV3JkgKR
Sep 11 00:20:15 <twobitsprite>	hello__: sed -i does in-place replacement. I don't know if the rest of your sed command is right because I'm not entirely sure what you want the replacement line to look like
Sep 11 00:21:18 <hello__>	The replacement should be: https://paste.mozilla.org/FZgFk09b
Sep 11 00:21:20 *	b1tninja recognizes this hex string
Sep 11 00:23:03 <larryv>	you want each character to be replaced by five hyphens?
Sep 11 00:23:34 <hello__>	no it was what I am getting due to -e
Sep 11 00:23:57 <hello__>	but I want to replace the whole string with five some hyphens
Sep 11 00:24:53 <larryv>	hello__: ask ##sed, this ceased to be a bash question a long time ago
Sep 11 00:26:40 <twobitsprite>	hello__: if you know the line before hand, why not just sed -e "s/^$MYVAR\$/-----" ?
Sep 11 00:27:15 <twobitsprite>	larryv: people discuss sed in here all the time, not a big deal. bash is largely glue code between other posix tools anyway
Sep 11 00:29:52 <hello__>	twobitsprite: It's throwing an error: sed: -e expression #1, char 161: unterminated `s' command
Sep 11 00:30:06 <twobitsprite>	hello__: sorry, throw another / at the end
Sep 11 00:30:25 <twobitsprite>	sed -e "s/^$MYVAR\$/-----/"
Sep 11 00:32:05 <hello__>	I did something like this:
Sep 11 00:32:08 <hello__>	MYVAR='1	6408545D7CA18C32E19C5948F9C8B89281900ED63125E6CCE797BA459D8DAC7D	6408545d7ca18c32e19c5948f9c8b89281900ed63125e6cce797ba459d8dac7d	NUM	CD	_	0	root	_	_'sed -e "s/^$MYVAR\$/-----/" > a
Sep 11 00:32:37 <twobitsprite>	do you need a space between the closing ' and the sed command?
Sep 11 00:32:55 <hello__>	But the terminal is on and on executing. Did I do something wrong?
Sep 11 00:33:17 <twobitsprite>	also, if those are literally on the same line, it won't work, put a semi-colon between the variable and the sed
Sep 11 00:33:20 <hello__>	actually there's enter between the two
Sep 11 00:33:34 <twobitsprite>	oh, ok... what do you mean "terminal is on and on executing"?
Sep 11 00:33:42 <larryv>	there's no stdin.
Sep 11 00:34:09 <kerframil>	well, there is. it's just not being fed :)
Sep 11 00:34:10 <twobitsprite>	ohh, yeah, you need to pipe the inpit file in to the sed command
Sep 11 00:34:19 <twobitsprite>	hello__: ctrl-c
Sep 11 00:34:25 <hello__>	oh I'm sorry
Sep 11 00:34:27 <larryv>	kerframil: RAWR
Sep 11 00:34:34 <twobitsprite>	sed -e "s/^$MYVAR\$/-----/" < input.file > a
Sep 11 00:35:32 <b1tninja>	note that would interepert myvar as a regex
Sep 11 00:36:02 <twobitsprite>	b1tninja: I'm just answering the question as asked. He said he's literally looking for this exact line, and it looks like it should be fine
Sep 11 00:36:15 <b1tninja>	just warning
Sep 11 00:36:25 <b1tninja>	i dont know how to escape it either
Sep 11 00:36:37 <b1tninja>	pretty sure this is the guy from earlier anyway
Sep 11 00:37:27 <twobitsprite>	b1tninja: it is: 17:10 < hello__> Hey, I am trying to delete specific lines using bash script
Sep 11 00:38:09 <b1tninja>	perhaps just get all the lines that don't match?
Sep 11 00:38:30 <twobitsprite>	yeah, could just grep -v
Sep 11 00:38:52 <twobitsprite>	(but still have the issue that if the actual line has regex characters it'll break)
Sep 11 00:39:17 <hello__>	Yes I'm the previous guy
Sep 11 00:39:22 <b1tninja>	still want to know what MYVAR comes from
Sep 11 00:39:23 <twobitsprite>	((but then could do grep -vF))
Sep 11 00:39:32 <hello__>	Thanks it works
Sep 11 00:40:02 <hello__>	MYVAR is the information in E_conll_file I have
Sep 11 00:49:34 <b1tninja>	where does it come from though I guess was what I was wondering
Sep 11 00:52:29 <knstn>	"translation" of python scripts to bash, is an "easy" task, or i should avoid it? i just wrote my first bisection program in python, and i would like to see it in bash, but i suck at it
Sep 11 00:53:05 <b1tninja>	there are python scripts in the kernel, its pretty common to have python on a system, what systems do you need to support
Sep 11 00:53:36 <knstn>	http://ix.io/1ULN this to bash script
Sep 11 00:55:18 <^>	it depends on the python script. what you've posted is pretty easy in any language though
Sep 11 00:59:10 <HelloShitty>	hello. How do I limit the amount of decimal places in the result of a mathematical operation, division in this case?
Sep 11 00:59:35 <HelloShitty>	I'm printing the result using:
Sep 11 00:59:53 <b1tninja>	printf format perhaps?
Sep 11 00:59:57 <HelloShitty>	printf "Value: %s" "$val1"
Sep 11 01:00:07 <HelloShitty>	printf "Value: %s\n" "$val1"
Sep 11 01:00:22 <Riviera>	# printf '%.4f\n' 3.14159265358979
Sep 11 01:00:23 <shbot>	Riviera: 3.1416
Sep 11 01:00:33 <b1tninja>	are you not wanting it to round?
Sep 11 01:00:45 <b1tninja>	oh you're answering
Sep 11 01:01:16 <HelloShitty>	I want it to round tho the 8th decimal place
Sep 11 01:01:37 <b1tninja>	check out Riviera's answer
Sep 11 01:01:41 <larryv>	so… %.8f ?
Sep 11 01:01:42 <HelloShitty>	thanks
Sep 11 01:01:49 <HelloShitty>	going to try it
Sep 11 01:01:54 <HelloShitty>	I was doing another thing wrong
Sep 11 01:02:00 <HelloShitty>	using %s insteead of %f
Sep 11 01:02:08 <b1tninja>	yes s is string, f is float
Sep 11 01:03:00 <Riviera>	Note the number format (both in- and output) is subject to the current locale.
Sep 11 01:04:58 <Riviera>	# LC_NUMERIC=et_EE.utf8; printf %.2f 3,999
Sep 11 01:04:59 <shbot>	Riviera: 4,00
Sep 11 01:05:29 <HelloShitty>	wait
Sep 11 01:05:34 <HelloShitty>	explain that to me, please
Sep 11 01:06:43 <HelloShitty>	The operation I'm running is the return value of a command, divided by the number of lines read from a file
Sep 11 01:07:04 <kerframil>	see https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap07.html
Sep 11 01:07:18 <HelloShitty>	So, I run a command and it returns a value and I divide that value by the number of lines read from a file
Sep 11 01:07:24 <HelloShitty>	ok, let me see
Sep 11 01:07:25 <Riviera>	The first command sets the locale for numbers to Estonian conventions, and AFAIK a comma is used as decimal point in Estonia.
Sep 11 01:07:27 <HelloShitty>	I know that site
Sep 11 01:07:45 <HelloShitty>	I use to use it for C programming reference functions and etc
Sep 11 01:07:46 <Riviera>	Hence printf expects that for a numerical value, and it prints that.
Sep 11 01:08:11 <Riviera>	The tricky part is that your shell tries to be two things at the same time, and interactive environment that's talking to users,
Sep 11 01:08:18 <Riviera>	and a programming language.
Sep 11 01:08:59 <Riviera>	So for the former having localised numbers is great, but for the latter it's annoying.
Sep 11 01:09:21 <Riviera>	The other tricky part is that the shell tends to process output from other commands which may or may not respect the current locale.
Sep 11 01:09:27 <HelloShitty>	yeah, and I'm only starting to write my 1st functional small script
Sep 11 01:09:43 <HelloShitty>	so I'm kind of oblivious of those many details
Sep 11 01:09:57 <Riviera>	in that case just set the locale to C and learn that part later. :D
Sep 11 01:10:10 <Riviera>	alternatively learn a friendlier language for scripting
Sep 11 01:10:44 <HelloShitty>	I need it to be bash script because it easies tasks of running terminal programs
Sep 11 01:11:03 <HelloShitty>	store the return values and use those return values for future commands and automation processes
Sep 11 01:11:10 <Riviera>	:)
Sep 11 01:11:52 <HelloShitty>	I know I could do the same with C but it would be more complex to parse commands to run them in terminal and "collect" their return values
Sep 11 01:12:17 <HelloShitty>	I don't know what would it be like with python but seems probably a bit like C, but not a clue though
Sep 11 01:12:18 <larryv>	there are quite a few alternatives between bash and C.
Sep 11 01:13:12 <HelloShitty>	Gimme a couple of examples so that I can consider, :p
Sep 11 01:13:27 <HelloShitty>	however I think I'll stick to bash, at least for now
Sep 11 01:13:34 <HelloShitty>	until things are still quite simple
Sep 11 02:13:21 <SJr>	How do I capture a multi line string into a variable and then echo it to a file?
Sep 11 02:15:59 <also_uplime>	https://clbin.com/Dzj4d
Sep 11 02:26:25 <dreisner>	!faq 1 > SJr
Sep 11 02:26:26 <greybot>	SJr: https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
Sep 11 02:27:17 <dreisner>	SJr: where does this string come from? what are you doing with it before you write it to the file? i.e. why can't it just go directly to the file.
Sep 11 02:28:31 <SJr>	dreisner, yeah I decided I'd just work with files.
Sep 11 03:54:03 <kurahaupo>	!sed-i > It seems like it might be time to remind or inform some of our new regulars about this faq, as I've seen two people recommend sed -i in the last 2 hours:
Sep 11 03:54:04 <greybot>	It seems like it might be time to remind or inform some of our new regulars about this faq, as I've seen two people recommend sed -i in the last 2 hours:: Some sed(1)s have -i which claims to "modify" files. It does not: sed is not a FILE editor. The -i flag re-writes the entire file and replaces the original with the new. This breaks open handles and hard-link sets, and fails to follow symlinks. -i is also unportable: valid
Sep 11 03:55:08 <kurahaupo>	valid alternatives include ed or ex
Sep 11 11:12:47 *	Disconnected ()
**** ENDING LOGGING AT Wed Sep 11 11:12:47 2019

**** BEGIN LOGGING AT Wed Sep 11 11:13:12 2019

Sep 11 11:13:12 *	Now talking on #bash
Sep 11 11:13:12 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 11 11:13:12 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 11 11:13:12 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 11 11:20:47 <nony>	There is a file something like:  https://paste.mozilla.org/A7y5oui2 I want to replace the part: ```(MAXX  (WXCVD    (AB (CD 12345ABCD1234))    (. .))) with "****"   ```
Sep 11 11:39:45 <nony>	 I want to replace the part: (MAXX  (WXCVD    (AB (CD 12345ABCD1234))    (. .))) with  "****"
Sep 11 11:45:41 <isomari>	greetings, is there a bash equivalent to zsh setopt share_history?
Sep 11 11:58:16 <Riviera>	isomari: Perhaps explain briefly what that zsh feature is.
Sep 11 12:04:30 <mnemonic>	can i change the value of "last" var inside the loop? or it act like a constant?  for (( i=0; i<last; i++ )); do
Sep 11 12:07:37 <go|dfish>	# last=5; for ((i=1;i<last;i++)) do ((i==2)) && last=1; echo $i; done
Sep 11 12:07:39 <shbot>	go|dfish: 1
Sep 11 12:07:39 <shbot>	go|dfish: 2
Sep 11 12:12:37 <mnemonic>	go|dfish: I feel I am not very smart... thank you
Sep 11 12:35:35 <nony>	Greetings!
Sep 11 12:40:44 <nony>	I want to replace n lines from my file where the first few lines are reoccurring many times, so is there a way by which I can search a line and delete n lines above it and m lines below it, and at the end replace it...something equivalent?
Sep 11 12:41:05 <nony>	I'm actually a total novice in bash scripting
Sep 11 12:41:17 <Soliton>	!have
Sep 11 12:41:18 <nony>	Sorry for being impatient
Sep 11 12:41:19 <greybot>	"I have ____ and I want ____." Fill in the blanks.
Sep 11 12:42:48 <nony>	https://paste.mozilla.org/nW7XjGvv
Sep 11 12:42:56 <nony>	Something like this
Sep 11 13:07:28 <wwilliam>	I know this is not a bash question but does anyone here uses neofetch and if so  how do i add text after the system info?
Sep 11 13:59:00 <{xmb}>	i wanna code a coproc gawk that reads different fd's, ..how to initialize them
Sep 11 14:02:18 <rafasc>	wwilliam: use: prin "RTFM" 'I didnt search the docs'
Sep 11 14:08:33 <{xmb}>	'empty fd init-part' ? 'coproc awk { gawk ..; } 3<[whathere]' to be used for later printf into /proc/gawk/fd/3
Sep 11 14:09:22 <{xmb}>	rather in the gawk part than outside }, but how to complete the 3<..
Sep 11 14:18:33 <b1tninja>	coproc
Sep 11 14:19:04 <b1tninja>	oh you already are using that
Sep 11 14:19:39 <geirha>	and he left 7 minutes ago
Sep 11 14:19:51 <b1tninja>	coproc should give you back an array, so like blah[1] would be damn
Sep 11 14:39:29 <{xmb}>	how to initialize fds in coproc  for later use
Sep 11 14:42:53 <{xmb}>	i have to fifo ? i hope not
Sep 11 14:45:15 <{xmb}>	geirha oh fd master
Sep 11 14:46:44 <{xmb}>	hi greycat
Sep 11 14:47:21 <{xmb}>	im stuck.. i have to coproc gawk to read a couple of fds later; but i dunno how to create them
Sep 11 14:48:03 <greycat>	sounds like a question for #awk
Sep 11 14:48:27 <{xmb}>	ok well, ill try, but, u know no 'empty fd handle for use for later' such ?
Sep 11 14:49:03 <{xmb}>	cause, the gawk folks will tell me 'use bashs 3<[whathere]' but its in coproc for later use only, not file on init time
Sep 11 14:49:17 <greycat>	I have absolutely no idea what you are even talking about.
Sep 11 14:49:42 <greycat>	An "empty fd" makes no sense at all.  A file descriptor is opened for reading, for writing, for appending, or for reading+writing.
Sep 11 14:50:39 <{xmb}>	i try: $ coproc a { gawk '<read fd 3 and 4 and such>'; }
Sep 11 14:51:00 <greycat>	and who opens fd 3 and 4?  awk, or bash?
Sep 11 14:51:12 <{xmb}>	they aint open, thats the problem
Sep 11 14:51:19 <greycat>	sounds like you know what to do, then
Sep 11 14:51:44 <{xmb}>	i dont, its for later use, like printf data >/proc/awk/fd/3
Sep 11 14:52:01 *	greycat waits for someone to ask a question that makes sense
Sep 11 14:52:03 <{xmb}>	i figured at best gawk .. 3< <( some read loop or cat )
Sep 11 14:52:39 <{xmb}>	and i dunno a gawk way to open fd's
Sep 11 14:53:18 <greycat>	08:48  greycat> sounds like a question for #awk
Sep 11 14:53:34 <{xmb}>	:/
Sep 11 14:54:28 <{xmb}>	the bash part is without coproc 'gawk .. 3< <whatever>' - but with coproc i dunno the statement to create the fd 3
Sep 11 14:55:10 <{xmb}>	i dont wanna use fifos really, im looking for a bash intern solution
Sep 11 14:56:09 <{xmb}>	coproc a { gawk .. 3<fifo3 4<fifo4; } #<- but how to without fifos that
Sep 11 15:00:16 <{xmb}>	aka 'how to create fd's for later printf into them use'
Sep 11 15:02:20 <{xmb}>	!fd
Sep 11 15:02:20 <greybot>	http://mywiki.wooledge.org/FileDescriptor
Sep 11 15:09:21 <greycat>	If you want FD 3 to be open for writing to a bash process substitution (background piped thing), then open FD 3 for writing to the process substitution.  Simple.
Sep 11 15:09:59 <{xmb}>	i dont understand :/
Sep 11 15:10:12 <greycat>	exec 3> >(logger or whatever)
Sep 11 15:10:17 <greycat>	gawk '... thing that uses fd 3'
Sep 11 15:10:18 <greycat>	exec 3>&-
Sep 11 15:10:35 <elphe>	hi. vim has an option called 'showcmd' that allows for keys/commands to be displayed in statusline as they are entered. hoping to do something similiar in zsh where by there would be an indication if <esc> had been tapped and the shell is waiting to see if its the first part of a multi-char sequence. is there some kind of public flag that registers if the sheel is in waiting for keytimeout?
Sep 11 15:10:42 <{xmb}>	aha, i have to figure what to do inside the >( .. )
Sep 11 15:10:58 <greycat>	... you were supposed to know this already.
Sep 11 15:11:01 <elphe>	sorry. wrong channel
Sep 11 15:11:10 <{xmb}>	maybe >( : ) is enuff
Sep 11 15:11:44 <greycat>	completely ridiculous.  if you want output to fd3 to be discarded, open it for writing to /dev/null.
Sep 11 15:12:41 <{xmb}>	aha, im trying.. thx
Sep 11 15:17:30 <{xmb}>	i really dont get it
Sep 11 15:17:38 <greycat>	what are you trying to do
Sep 11 15:19:50 <{xmb}>	a code gen for shortened coding, for 'if' there should be minimally a few fd's, stdin will say 'if' then it reads fd 3 == 'ifcode', fd 4 for 'then code', fd 5 for 'else code', and some special format of fd6/7 for elif codes
Sep 11 15:20:09 <greycat>	that made no sense at all
Sep 11 15:20:16 <{xmb}>	:/ lemme try rephrasing
Sep 11 15:21:14 <{xmb}>	im also stuck at serializing the codes
Sep 11 15:22:18 <{xmb}>	if i would do a if function that takes a couple of args, like ifcode thencode etc, and use that if thencode for another if, in functions, i can mark all variables local, but no function no local = vars getoverwritten by insidest nested same code
Sep 11 15:22:58 <greycat>	I think your meds need adjustment.
Sep 11 15:23:13 <greycat>	In any case, whatever you're doing, bash is not suited for it.
Sep 11 15:23:25 <{xmb}>	i figured but it seems not true, that with expanded code for eval i can serialize easiestly, but the gawk coproc way is stuck at fd's where i would need fifos for printf here and there in which i really dont like
Sep 11 15:23:57 <greycat>	file descriptors have no connection to commands passed as arguments and being eval'ed
Sep 11 15:24:03 <{xmb}>	well i heard many so, i just know bash and gawk, and had earlier already half-success with shorts
Sep 11 15:24:44 <{xmb}>	yea i would have used the fd's in gawk to printf specific user-given codes and then the gawk gen's the bash code for eval
Sep 11 15:24:55 <han-solo>	do one feel like, you don't know anything and just... feel so numb ?
Sep 11 15:25:08 <greycat>	you're just going to keep prattling this crap all day long, aren't you.  *plonk*
Sep 11 15:25:19 <{xmb}>	no, im a sensible guy
Sep 11 15:25:27 <{xmb}>	u just have to insult me away once and there
Sep 11 15:25:52 *	han-solo was taking about himself
Sep 11 15:26:11 <han-solo>	i have been feeling that recently :/
Sep 11 15:26:49 <mooasaurus>	weekly morning #bash circus time
Sep 11 15:27:09 <{xmb}>	han-solo thats cause enemish influence, not normal stuff
Sep 11 15:27:10 <greycat>	In Tcl, "if" is a command.  It takes a variable number of arguments, but certain numbers of arguments are not allowed.  Like, it can't just have one argument.  It must have at least two.  If there are two arguments, the first one is a script to be executed, whose return value is checked.  If the return value is nonzero (true), the second argument (another script) is executed.
Sep 11 15:27:31 <greycat>	err, the first argument isn't actually a script. it's an expression with a specific syntax.
Sep 11 15:28:01 <greycat>	so you would write something like   if {$x < 3} {puts "hi"}   which is the if command being given two arguments.
Sep 11 15:28:19 <greycat>	{...} is a form of quoting, kind of like bash's '...' except it can be nested.
Sep 11 15:28:21 <{xmb}>	its siiliar what i want
Sep 11 15:28:30 <greycat>	It sounds like xmb wanted to recreate Tcl's if syntax in bash.
Sep 11 15:28:34 <Riviera>	Perhaps xmb should learn tcl.
Sep 11 15:28:55 <{xmb}>	i cannot learn more, i have no support to, eg dunno ppl and the docs and reads are bad
Sep 11 15:28:55 <greycat>	Except then he went totally batshit crazy and started talking about file descriptors for NO discernable reason.
Sep 11 15:29:41 <Riviera>	{xmb}: ok
Sep 11 15:29:46 <greycat>	Now, if someone wanted to write an "if"-like function in bash that takes 2 arguments, the first one being a set of commands to eval, and the second one being a set of commands to eval if and only if the first set exited 0 (true), that can be dne.
Sep 11 15:29:50 <greycat>	done.
Sep 11 15:29:53 <{xmb}>	i only figured i have to use fifos yet.. what i meant by my quesiton is like: 'how to open a couple of fd's for gawk as coproc read them later' when i try > or <> /dev/null it just closes the fd, eg reads nothing
Sep 11 15:30:11 <greycat>	if2() { eval "$1" && eval "$2"; }
Sep 11 15:30:18 <Riviera>	greycat: yup that's nice
Sep 11 15:30:24 <greycat>	if2 'false; true' 'echo hi'
Sep 11 15:30:33 <greycat>	that's very Tcl-esque
Sep 11 15:30:45 <{xmb}>	lol thats a nice alterntive approach
Sep 11 15:30:59 <{xmb}>	however my if alias has to have the same args as the original if
Sep 11 15:31:02 <greycat>	Extending that to accept other numbers of arguments, like Tcl's if does, is left as an exercise.
Sep 11 15:31:31 <{xmb}>	its as much as 'while "expr" "docode"' but as aliases instead of functions
Sep 11 15:31:38 <greycat>	This has nothing to do with file descriptors, or process substitutions, or coprocs, or /dev/fd, or gawk.
Sep 11 15:31:56 <{xmb}>	hm :/
Sep 11 15:32:33 <{xmb}>	i nearly give up then
Sep 11 15:34:26 <{xmb}>	'i want to do: exec fd3; coproc gawk ..fd3code..; printf 'something' >&fd3; read coprocs fd 0 for gawks output
Sep 11 15:35:50 <{xmb}>	i tried like you said exec 3>/dev/null it wont work, returns empty or similiar, and 3<>/dev/null is clear returns null
Sep 11 15:36:12 <{xmb}>	somewhere inside the gawk and coproc i have to place fd definitions too that i dont know
Sep 11 15:36:27 <{xmb}>	the other way i see is redirect fd3+ to from fifos
Sep 11 15:36:39 <{xmb}>	but i hate the fifo creation process, and tmp paths, and and
Sep 11 15:38:09 <{xmb}>	exactly what gawk .. 3<fifo3 does but without fifos, for later printf in use, no out
Sep 11 15:41:52 <{xmb}>	[ as your statements its not a bash q i didnt see any match to my requirements / question ]
**** BEGIN LOGGING AT Wed Sep 11 15:47:01 2019

Sep 11 15:47:01 *	Now talking on #bash
Sep 11 15:47:01 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 11 15:47:01 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 11 15:47:02 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 11 15:47:21 <mknod>	"source [...]  The return status is the exit status of the last command executed."
Sep 11 15:47:40 <{xmb}>	..yes ?
Sep 11 15:48:11 <mknod>	Has anyone figured out a way to catch _any_ error that may occur in the sourced file when invoking the builtin?
Sep 11 15:48:22 <mknod>	{xmb}, I'm sure you didn't.
Sep 11 15:48:38 <{xmb}>	if i understood right, catch $? be non null inside DEBUG trap
Sep 11 15:48:54 <{xmb}>	optionally with LINENO and other shikkis
Sep 11 15:49:13 <{xmb}>	or return trap or whatever that name was
Sep 11 15:49:16 <{xmb}>	not debug trap
Sep 11 15:50:33 <lopid>	mknod: "set -e" >:)
Sep 11 15:50:41 <mknod>	lol
Sep 11 15:51:48 <{xmb}>	# printf >b -- '\n%s\n' true false true; trap $'sav="$?"; [[ "$sav" != 0 ]] && printf -- \'%s\' \'err line $LINENO cmd $BASH_COMMAND\n' return; . b
Sep 11 15:51:49 <shbot>	{xmb}: bash: return trap: line 1: unexpected EOF while looking for matching `''
Sep 11 15:51:49 <shbot>	{xmb}: bash: return trap: line 2: syntax error: unexpected end of file
Sep 11 15:53:28 <mooasaurus>	just looking at this coproc for once.. would this be a viable alternative to finding the PID of a forked process in init scripts instead of relying on flat pid files?
Sep 11 15:53:49 <{xmb}>	$! is the pid of the last cmd
Sep 11 15:54:01 <{xmb}>	its just ran aside with redirected fds
Sep 11 15:54:37 <twkm>	mooasaurus: barely.
Sep 11 15:55:14 <{xmb}>	# trap 'printf -- %s\\n "$LINENO _ $BASH_COMMAND"' err; printf >b \\n%s\\n true false true; . b
Sep 11 15:55:15 <shbot>	{xmb}: 4 _ false
Sep 11 15:55:18 <{xmb}>	mknod such ?
Sep 11 15:55:21 <Soliton>	if you forked the process then there is nothing to find. you know the PID.
Sep 11 15:56:35 <{xmb}>	# trap 'printf -- %s\\n "$? -> $(( LINENO - lineno )) -> $BASH_COMMAND"' err; printf >b \\n%s\\n true false true; lineno="$LINENO" . b
Sep 11 15:56:36 <shbot>	{xmb}: 1 -> 3 -> false
Sep 11 15:56:45 <mknod>	lopid, a temporary trap on ERR might be my answer.
Sep 11 15:57:34 <lopid>	just as with any script, if any error occurs, you probably want to deal with it appropriately then and there
Sep 11 15:58:04 <{xmb}>	# trap 'printf -- %s\\n "$? -> $(( LINENO - lineno -1 )) -> $BASH_COMMAND"' err; printf >b \\n%s\\n true false true; lineno="$LINENO"; . b
Sep 11 15:58:06 <shbot>	{xmb}: 1 -> 2 -> false
Sep 11 15:58:22 <{xmb}>	       traps), and the ERR trap is not inherited unless the -o errtrace  shell
Sep 11 15:58:29 <mknod>	lopid, error handling becomes more challenging as soon as sourcing a file is part of an algorithm
Sep 11 15:59:07 <lopid>	i was referring to in the sourced file
Sep 11 15:59:40 <Soliton>	error handling becomes impossible as soon as you try to do it on code you didn't write.
Sep 11 16:01:33 <mknod>	the sourced file is a "definition file", nothing but some array assignments inside
Sep 11 16:02:00 <mooasaurus>	Soliton: as a human being yes, I could find the PID, but the problem would be the init script when ran again (eg. to restart a already running process) wouldn't know the original PID. unless I'm misunderstanding you
Sep 11 16:02:00 <{xmb}>	and does the err trap work then
Sep 11 16:02:01 <lopid>	for now!
Sep 11 16:02:15 <mknod>	lopid, _forever_.
Sep 11 16:02:23 <greycat>	... init ... script
Sep 11 16:02:27 <greycat>	!date
Sep 11 16:02:27 <greybot>	Wed Sep 11 14:02:26 2019
Sep 11 16:02:34 <greycat>	It's 2019.
Sep 11 16:02:47 <mooasaurus>	yes, some servers still live in the stone ages
Sep 11 16:02:54 <{xmb}>	moo, u can export mypid="$$"
Sep 11 16:02:56 <lopid>	quite right. lopid forever
Sep 11 16:03:06 <greycat>	so you installed daemontools or runit on this stone-age server, right?
Sep 11 16:03:07 <{xmb}>	[[ "$mypid" ]] && echo already working
Sep 11 16:04:19 <mooasaurus>	I'm not answering that..
Sep 11 16:04:28 <mknod>	Soliton, so just to set the record straight I do write the code myself, but since it's more of a configuration file, any typo in the Bash syntax should be handled properly.
Sep 11 16:04:35 <{xmb}>	so you violate the open source knowledge license ?
Sep 11 16:05:04 <{xmb}>	bash -n it for syntax errs
Sep 11 16:05:19 <greycat>	well, if you're writing some variant of a sysv-rc init.d script to manage a service, you have my pity, my scorn, and my ridicule, but you've made your decisions, and now you get to live with their consequences
Sep 11 16:05:46 <greycat>	your OS channel may have advice on their particular flavor of sysv-rc hell
Sep 11 16:06:05 <{xmb}>	i used to have my own init= boot script, ..
Sep 11 16:06:18 <mooasaurus>	I realize this, but it's what was supported by the OS
Sep 11 16:06:36 <greycat>	your OS channel can tell you whether their sysv-rc services parses cryptic strings placed in the comments of the init.d script or not, whether there are "helper" prorgams like start-stop-daemon that you are expected to learn and wrestle with or not, etc.
Sep 11 16:07:06 <greycat>	25 years of duct tape and jury-rigged rube goldberg devices stacked on top of one another
Sep 11 16:08:37 <Soliton>	mknod: how is a syntax error not going to terminate the source command?
Sep 11 16:09:02 <mknod>	Soliton, not all errors are fatal
Sep 11 16:09:44 <Soliton>	so not a typo in the bash syntax, ok.
Sep 11 16:10:27 <mknod>	# echo 'foo="foo"; bar="bar; baz="baz"' > file.sh; source file.sh; echo "do more stuff"
Sep 11 16:10:28 <shbot>	mknod: bash: file.sh: line 1: unexpected EOF while looking for matching `"'
Sep 11 16:10:28 <shbot>	mknod: bash: file.sh: line 2: syntax error: unexpected end of file
Sep 11 16:10:28 <shbot>	mknod: do more stuff
Sep 11 16:11:11 <timvisher>	greycat: I'm curious. Is there any place I can read about or would you mind telling me why you (and others here) don't use bash-completion? Is it just force of habit? Or something else?
Sep 11 16:11:24 <mooasaurus>	greycat: start-stop-daemon is a piece of garbage, and was wondering if coproc would be a viable solution for such a tool
Sep 11 16:11:29 <greycat>	It breaks things and it's huge and bloated and why would I want it?
Sep 11 16:11:48 <Soliton>	# echo 'foo="foo"; bar="bar; baz="baz"' > file.sh; source file.sh || echo "handle error"
Sep 11 16:11:49 <shbot>	Soliton: bash: file.sh: line 1: unexpected EOF while looking for matching `"'
Sep 11 16:11:49 <shbot>	Soliton: bash: file.sh: line 2: syntax error: unexpected end of file
Sep 11 16:11:49 <shbot>	Soliton: handle error
Sep 11 16:12:48 <mknod>	Soliton, that works because variable assignation don't have exit status actually...
Sep 11 16:13:12 <mknod>	but, that seems more fragile than:
Sep 11 16:13:13 <mknod>	# echo 'foo="foo"; bar="bar; baz="baz"' > file.sh; trap 'echo "oops!"; exit 1' ERR;  source file.sh; trap - ERR; echo "do more stuff"
Sep 11 16:13:16 <shbot>	mknod: bash: file.sh: line 1: unexpected EOF while looking for matching `"'
Sep 11 16:13:16 <shbot>	mknod: bash: file.sh: line 2: syntax error: unexpected end of file
Sep 11 16:13:16 <shbot>	mknod: etc... ( http://ix.io/1UON )
Sep 11 16:13:53 <mknod>	am I wrong?
Sep 11 16:17:27 <Soliton>	# echo 'foo="foo"; bar="$(false)"' > file.sh; trap 'echo "oops!"; exit 1' ERR;  source file.sh; trap - ERR; echo "do more stuff"
Sep 11 16:17:28 <shbot>	Soliton: oops!
Sep 11 16:17:28 <shbot>	Soliton: (shell exited with 1)
Sep 11 16:19:16 <mknod>	I'm torn between "this sucks" and "totally intended behavior"
Sep 11 16:19:53 <mknod>	Though I favor the latter
Sep 11 16:31:31 <wwilliam>	Hello If I listen to shellcheck the files dont get cpied.:
Sep 11 16:31:33 <wwilliam>	Line 82:
Sep 11 16:31:34 <wwilliam>	screen -dmS ny bash -c 'cd "$1" && find "$5" -maxdepth 1 -type f -name "*"$7"*" -exec cp -v -- {} "$8" \;; exec bash' bash "$wdir" "$user" "$host" "$nydir" "$nymntpnt" "$pword" "$jid" "$dst";                        break
Sep 11 16:31:36 <wwilliam>	                       ^-- SC2016: Expressions don't expand in single quotes, use double quotes for that.
Sep 11 16:32:39 <jan6>	that's a warning, not an error
Sep 11 16:33:06 <jan6>	because most of the time you're not doing bash -c
**** ENDING LOGGING AT Wed Sep 11 16:33:19 2019

**** BEGIN LOGGING AT Wed Sep 11 16:33:28 2019

Sep 11 16:33:28 *	Now talking on #bash
Sep 11 16:33:28 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 11 16:33:28 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 11 16:33:28 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 11 16:33:45 <jan6>	also I'd really reccommend not using bash -c and such here, but make a script file for that
Sep 11 16:33:47 <wwilliam>	OK thank you jan6
Sep 11 16:37:15 <Soliton>	$7 is not quoted.
Sep 11 16:37:56 <jan6>	also that, same for $8
Sep 11 16:38:05 <jan6>	nevermind
Sep 11 16:38:21 *	jan6 should clean his glasses
Sep 11 16:38:25 <mknod>	# echo 'foo="foo"; bar="bar; baz="baz"' > file.sh; trap 'return 1' ERR;  source file.sh || { echo "oops!"; exit 1; }; trap - ERR; echo "do more stuff"
Sep 11 16:38:27 <shbot>	mknod: bash: file.sh: line 1: unexpected EOF while looking for matching `"'
Sep 11 16:38:27 <shbot>	mknod: bash: file.sh: line 2: syntax error: unexpected end of file
Sep 11 16:38:27 <shbot>	mknod: etc... ( http://ix.io/1UOX )
Sep 11 16:38:34 <mknod>	seems like a good balance
Sep 11 16:38:53 <mknod>	works in functions as well
Sep 11 16:38:59 <mknod>	echo 'funk() { echo "james brown; }; funk' > file.sh; trap 'return 1' ERR;  source file.sh || { echo "oops!"; exit 1; }; trap - ERR; echo "do more stuff"
Sep 11 16:39:02 <mknod>	# echo 'funk() { echo "james brown; }; funk' > file.sh; trap 'return 1' ERR;  source file.sh || { echo "oops!"; exit 1; }; trap - ERR; echo "do more stuff"
Sep 11 16:39:04 <shbot>	mknod: bash: file.sh: line 1: unexpected EOF while looking for matching `"'
Sep 11 16:39:04 <shbot>	mknod: bash: file.sh: line 2: syntax error: unexpected end of file
Sep 11 16:39:04 <shbot>	mknod: etc... ( http://ix.io/1UOX )
Sep 11 16:39:40 <wwilliam>	Soliton: what do you mean remove the quotes of $7 and $8?
Sep 11 16:40:00 <mknod>	this allows to do the error handling outside of the trap command.
Sep 11 16:44:19 <Keytap>	Morning all.  Are there any built-in generic methods of converting a byte value to human readable format?
Sep 11 16:44:25 <jan6>	# echo 'funk() { echo "james brown"; }; funk' > file.sh; trap 'return 1' ERR;  source file.sh || { echo "oops!"; exit 1; }; trap - ERR; echo "do more stuff"
Sep 11 16:44:26 <shbot>	jan6: james brown
Sep 11 16:44:26 <shbot>	jan6: do more stuff
Sep 11 16:44:32 <jan6>	fixed yer quote ;P
Sep 11 16:47:19 <mknod>	jan6, though james brown is still overrated imho
Sep 11 16:47:34 <mknod>	for anyone wondering, this now works beautifully
Sep 11 16:47:46 <mknod>	$ bankloupe
Sep 11 16:47:47 <mknod>	./definition/70055377XXX.sh: line 9: syntax error near unexpected token `('
Sep 11 16:47:48 <mknod>	./definition/70055377XXX.sh: line 9: `category_filter_credit=('
Sep 11 16:47:48 <mknod>	./definition/70055377XXX.sh: line 12: any: command not found
Sep 11 16:47:50 <mknod>	bankloupe: Error while sourcing definition file `70055377XXX.sh'.
Sep 11 16:48:09 <Riviera>	Keytap: what do you mean? To print the bits?
Sep 11 16:49:43 <jan6>	Keytap: do you mean hex values to characters? or something else?
Sep 11 16:50:45 <han-solo>	human readable....
Sep 11 16:51:18 <mknod>	Keytap, human readable, but in which base
Sep 11 16:53:15 <Keytap>	mknod: I'd be fine with megabytes for my needs at the moment, but ideally just the smallest base it'll go into without being totally fractional
Sep 11 16:53:32 <mknod>	not that kind of base
Sep 11 16:53:39 <greycat>	!faq hex
Sep 11 16:53:40 <greybot>	https://mywiki.wooledge.org/BashFAQ/071 -- How do I convert an ASCII character to its decimal (or hexadecimal) value and back? How do I do URL encoding or URL decoding?
Sep 11 16:53:44 <mknod>	like, base 16, base 2?
Sep 11 16:54:08 <Keytap>	mknod: Base 10 would be preferred
Sep 11 16:54:19 <mknod>	this is the worst!
Sep 11 16:54:20 <jan6>	there are plenty hex viewers and such, if you want to visualize the bytes, also "od" might help
Sep 11 16:54:39 <mknod>	he's asking for built-in...
Sep 11 16:54:46 <jan6>	that, yeah, dream on ;P
Sep 11 16:54:47 <mknod>	printf may help
Sep 11 16:55:11 <Keytap>	(e.g.:  'echo "1535" | asdf' might print "1.5KB")
Sep 11 16:55:30 <jan6>	that's a whole different thing
Sep 11 16:55:32 <greycat>	!du-h
Sep 11 16:55:33 <greybot>	du -sk "$@" | sort -n | awk -F '\t' -v OFS='\t' '{if ($1 > 1048576) $1 = sprintf("%.1fG",$1/1048576); else if ($1 > 1024) $1 = sprintf("%.1fM",$1/1024); else $1 = sprintf("%sK",$1)} 1'
Sep 11 17:00:33 <repys>	how can I use an env var in AWK?
Sep 11 17:00:40 <repys>	export var1=test
Sep 11 17:00:45 <repys>	how can I use var1 in awk?
Sep 11 17:01:04 <greycat>	https://mywiki.wooledge.org/BashProgramming/05#Environment_variables
Sep 11 17:02:23 <repys>	I've tried with awk -v var1=$VAR1 -F',' '{mycommand $var1}'
Sep 11 17:02:27 <repys>	but it doesn't work
Sep 11 17:02:37 <greycat>	if you DON'T want to use environment variables, then...
Sep 11 17:02:40 <greycat>	!awk-v
Sep 11 17:02:40 <greybot>	The correct way to get a shell variable into awk is with awk's -v flag, not by putting the $var into the awk code. var=foo; awk -v name="$var" 'BEGIN{print "Hello " name}'
Sep 11 17:02:41 <twkm>	try asking #awk.
Sep 11 17:03:01 <twkm>	but, not $var1 inside awk.
Sep 11 17:03:05 <greycat>	that is ALSO on the same wiki page I already gave you
Sep 11 17:03:07 <twkm>	just var1.
Sep 11 17:03:21 <repys>	but I've tried with var1 also and not working too
Sep 11 17:03:30 <greycat>	Try the examples you were given.
Sep 11 17:03:48 <twkm>	argusbr: too late, everyone knows your address -- ask #help about it.
Sep 11 17:03:59 <han-solo>	:)
Sep 11 17:04:41 <twkm>	that "mycommand" is suspect anyway.
Sep 11 17:08:27 <twkm>	# echo 1,2,3 | awk -v "var1=surprise" -F',' '{print var1 "," $0}'
Sep 11 17:08:28 <shbot>	twkm: surprise,1,2,3
Sep 11 17:10:01 <repys>	export KAFKACLUSTER=server1:9090,server2:9090
Sep 11 17:10:01 <repys>	export KAFKATOPIC=/kafka/bin/kafka-topics
Sep 11 17:10:01 <repys>	export AWK=/usr/bin/awk
Sep 11 17:10:01 <repys>	echo $AWK -v kafkacluster="$KAFKACLUSTER" -F',' '{ system("kafka-topics --create --bootstrap-server kafkacluster --topic "$1" --replication-factor "$2" --partitions "$3"") }' topics
Sep 11 17:10:12 <greycat>	jesus christ, stop that shit
Sep 11 17:10:13 <repys>	why kafkacluster is not replaced with correct values ?
Sep 11 17:10:14 <greycat>	!path
Sep 11 17:10:14 <greybot>	The PATH variable defines where your commands are. Don't do stupid things like GREP=/usr/bin/grep; $GREP foo bar. Just use grep foo bar in the first place. If you aren't sure what your PATH contains, set it yourself.
Sep 11 17:10:36 <greycat>	repys: because "kafkacluster" is part of a quoted string, not a variable reference.
Sep 11 17:11:10 <greycat>	you see how you broke the quotes for $1 and $2?  do that for kafkacluster also.
Sep 11 17:11:45 <Soliton>	!injection
Sep 11 17:11:45 <greybot>	Don't pass user-supplied data in a context where it could be interpreted as code. BAD: ssh host "rm $file"; GOOD: ssh host "$(printf 'rm %q' "$file")"; see http://mywiki.wooledge.org/BashProgramming/05
Sep 11 17:11:48 <repys>	I get the same result
Sep 11 17:12:00 <repys>	even if I put it in the double quote :(
Sep 11 17:12:15 <twkm>	sheesh.
Sep 11 17:12:21 <greycat>	# awk -v kafka=franz 'BEGIN {print "system blah blah " kafka " foo bar"}'
Sep 11 17:12:22 <shbot>	greycat: system blah blah franz foo bar
Sep 11 17:12:25 <twkm>	see my example for how to use a variable.
Sep 11 17:12:30 <twkm>	or that.
Sep 11 17:12:40 <greycat>	They've been given HALF A DOZEN examples by now.
Sep 11 17:13:39 <repys>	I'm getting crazy
Sep 11 17:13:45 <repys>	tried in all manner
Sep 11 17:13:47 <greycat>	reading Kafka will do that
Sep 11 17:14:38 <Soliton>	!guessing
Sep 11 17:14:39 <greybot>	You can't just make shit up and expect the computer to magically know what you mean.
Sep 11 17:15:11 <Soliton>	it's shell injection anyway so probably better if it doesn't work.
Sep 11 17:15:16 <greycat>	true.
Sep 11 17:16:02 <twkm>	have you considered reading the awk documentation repys?
Sep 11 17:16:31 <greycat>	while IFS=, read -r one two three _; do kafka-topic --create --bootstrap-server "$KAFKACLUSTER" --topic "$one" --replication-factor "$2" --partitions "$3"; done < topics
Sep 11 17:16:42 <greycat>	There.  No awk, no awk problems.
Sep 11 17:16:52 <greycat>	crap.
Sep 11 17:17:02 <greycat>	while IFS=, read -r one two three _; do kafka-topic --create --bootstrap-server "$KAFKACLUSTER" --topic "$one" --replication-factor "$two" --partitions "$three"; done < topics
Sep 11 17:18:27 <repys>	what's the read -r one two three _; ?
Sep 11 17:18:32 <greycat>	!faq 1
Sep 11 17:18:32 <greybot>	https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
Sep 11 17:24:22 <repys>	thanks
Sep 11 17:29:56 <_wuseman>	Heya! What you guys think is the best way for run 10 commands in row and after every 10 attempt do a new command over and over again, this is for curl + tor I want to change ip after every 10 attempt
Sep 11 17:31:00 <greycat>	A loop, with a counter variable in it.
Sep 11 17:31:21 <_wuseman>	https://imgur.com/a/3BBd4zl this is how I do it today but thats easy since i grepping the word blocked when pastebin has blocked me
Sep 11 17:31:26 <_wuseman>	ok
Sep 11 17:31:38 <greycat>	!paste
Sep 11 17:31:39 <greybot>	Paste short snippets (<= 5 lines) in channel. Paste more using https://gist.github.com/ or http://paste.debian.net/ or see !ix or !sprunge. Please don't use pastebin.com -- it's full of ads and mangles whitespace. NEVER upload screen shots. Don't use a paste site that requires Javascript, or registration to view raw.
Sep 11 17:32:00 <greycat>	ix.io has been popular lately
Sep 11 17:34:48 <_wuseman>	they sucks
Sep 11 17:35:15 <_wuseman>	nr1.nu
Sep 11 17:37:03 <twkm>	a picture of text?  that sucks too.
Sep 11 17:37:53 <greycat>	Are the common decency/sense guidelines really that hard?  Don't upload screen shots of text.  Don't use pastebin.com.  Don't use a site that requires Javascript.  Don't use a site with no raw.  Don't use a site that requires login to view raw.
Sep 11 17:38:34 <greycat>	I'm sure there will be additions to this as the horrible evil monsters devise new and crueler ways to fuck you.
Sep 11 17:38:55 <greycat>	Whoever came up with some of this shit deserves a long and painful death.
Sep 11 17:40:17 <_wuseman>	You must have a boring life if this bothering you so much
Sep 11 17:40:54 <_wuseman>	takes 1 minute to create a  tcl script for this
Sep 11 17:41:04 <greycat>	so, that happened.  are you already ignored with trailing _ instead of leading _, I wonder.
Sep 11 17:41:08 <_wuseman>	and you don't need to bother anymore if it's a big problem, just saying
Sep 11 17:41:11 <emg>	greycat: you should host a #bash approved paste site on wooledge.org!!
Sep 11 17:41:27 <rafasc>	greycat: assuming the ones that mine bitcoin while you're on the site are included on the requires js. I've seen one of those somewhere.
Sep 11 17:41:36 <greycat>	Hmm, nope.  Oh well.  Stars fore and aft, it is.
Sep 12 10:08:34 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep 12 10:08:34 2019

**** BEGIN LOGGING AT Thu Sep 12 10:08:59 2019

Sep 12 10:08:59 *	Now talking on #bash
Sep 12 10:08:59 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 12 10:08:59 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 12 10:08:59 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 12 11:10:49 <YuGiOhJCJ>	hello, I am wondering why one of my bash process name is '-bash' instead of 'bash' using the 'ps' or 'htop' commands (with the 'top' command however, it shows 'bash'), any idea or documentation about this prefix '-' for the 'bash' process name please?
Sep 12 11:12:01 <Soliton>	"A login shell is one whose first character of argument zero is a -, or one started with the --login option."
Sep 12 11:12:41 <YuGiOhJCJ>	oh thanks, it is in the man of bash
Sep 12 11:22:49 <obiwahn>	hi, i can not join sed because i lack an inviation
Sep 12 11:23:18 <obiwahn>	but i have a question about it so i ask here and hope it is bash related enough
Sep 12 11:23:38 <obiwahn>	i want to do the following replacement:
Sep 12 11:24:09 <obiwahn>	s/1, sdfasd/somethingelse/
Sep 12 11:24:19 <obiwahn>	where the whitespace could be a newline
Sep 12 11:24:31 <obiwahn>	is that possible with sed?
Sep 12 11:24:39 <obiwahn>	#sed -i 's:[0-9],\(\s\|$\)*testDatabaseArgs:testDBInfo():g' "$f"
Sep 12 11:24:55 <obiwahn>	i was hoping that that is working
Sep 12 11:25:48 <YuGiOhJCJ>	however, when I type 'bash --login' then 'echo $0', I still see 'bash' instead of '-bash', do you know why?
Sep 12 11:25:50 <go|dfish>	obiwahn: if your sed has -z
Sep 12 11:28:00 <obiwahn>	it has
Sep 12 11:28:07 <obiwahn>	ok
Sep 12 11:28:21 <obiwahn>	so with -z and \0
Sep 12 11:29:07 <go|dfish>	obiwahn: just adding -z to what you already have should do it
Sep 12 11:31:48 <obiwahn>	thank you
Sep 12 11:37:15 <Soliton>	sed -z 's:[0-9],[[:space:]]*testDatabaseArgs:testDBInfo():g'
Sep 12 11:39:22 <Soliton>	you need to be registered to join ##sed.
Sep 12 11:59:34 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep 12 11:59:34 2019

**** BEGIN LOGGING AT Thu Sep 12 11:59:58 2019

Sep 12 11:59:58 *	Now talking on #bash
Sep 12 11:59:58 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 12 11:59:58 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 12 11:59:58 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 12 11:59:59 <osse>	YuGiOhJCJ: The caller is the one who starts bash as "-bash". When you just run bash --login from a shell then there is no such logic
Sep 12 12:00:16 <osse>	Bash itself does not change it from "bash" to "-bash" AFAIk
Sep 12 12:00:39 <no_gravity>	Hello! Is there something like an enhanced sed, which understands [^abc] as "not a b or c"?
Sep 12 12:01:13 <YuGiOhJCJ>	ok thanks but as far as I know there is no '-bash' program stored on my disk, is there really one somewhere?
Sep 12 12:01:14 <pj>	ummmmm, perl?
Sep 12 12:01:26 <Soliton>	that is how regex works already.
Sep 12 12:01:30 <osse>	YuGiOhJCJ: no
Sep 12 12:01:46 <osse>	YuGiOhJCJ: the name of the process isn't necessarily the same as the name of the executable file
Sep 12 12:02:05 <no_gravity>	Soliton: Not in sed
Sep 12 12:02:11 <YuGiOhJCJ>	then how bash has been started as '-bash'?
Sep 12 12:02:15 <Soliton>	prove it.
Sep 12 12:02:35 <osse>	YuGiOhJCJ: when you start another program from your own program you can decide what the name should be
Sep 12 12:02:55 <osse>	and that's what the login daemon (or whatever it's called) does
Sep 12 12:03:00 <no_gravity>	Soliton: Oh, I was wrong! Thanks!
Sep 12 12:03:19 <YuGiOhJCJ>	oh so it's something that is hard to do from command line only
Sep 12 12:03:33 <no_gravity>	Can I make sed match only the first line of a file?
Sep 12 12:03:47 <Soliton>	# help exec | grep -- -a
Sep 12 12:03:48 <shbot>	Soliton: exec: exec [-cl] [-a name] [command [arguments ...]] [redirection ...]
Sep 12 12:03:49 <shbot>	Soliton:       -a name   pass NAME as the zeroth argument to COMMAND
Sep 12 12:03:57 <YuGiOhJCJ>	it's probably something done when you fork in a programming language
Sep 12 12:04:11 <Soliton>	no_gravity: put a 1 before your sed command.
Sep 12 12:04:19 <no_gravity>	Soliton: Great, let me try that ...
Sep 12 12:04:21 <osse>	YuGiOhJCJ: from bash you can use  exec -a
Sep 12 12:04:41 <osse>	YuGiOhJCJ: almost, it's not done when you fork, but when you exec
Sep 12 12:06:46 <YuGiOhJCJ>	thanks for the explanations now it's clear
Sep 12 12:08:45 <no_gravity>	Can sed do "replace a with b but not if a was followed by x"?
Sep 12 12:09:04 <osse>	yes
Sep 12 12:09:23 <Riviera>	no_gravity: depends, if x is really a letter then it's possible, but still mildly tricky.
Sep 12 12:10:11 <no_gravity>	Maybe I should switch to perl of php.
Sep 12 12:10:19 <Riviera>	no_gravity: sed -e 's/$/ /;:a' -e 's/a\([^x]\)/b\1/g' -e ta -e 's/ $//'  # something like this
Sep 12 12:11:11 <Riviera>	no_gravity: yeah, it'd be easier with perl i think, because it features negative look-ahead assertions in its regexes.
Sep 12 12:11:27 <Riviera>	(could also be that i miss something obvious with sed, ##sed knows best)
Sep 12 12:12:50 <no_gravity>	I wonder why nobody ever updated sed to handle lookarounds.
Sep 12 12:13:06 <Riviera>	he did and made perl
Sep 12 12:13:57 <Riviera>	i believe supersed can also do it
Sep 12 12:14:04 <Riviera>	and likely a million of other tools :)
Sep 12 12:16:23 <osse>	# echo a | sed 's/a\($\|[^x]\)/b\1/'
Sep 12 12:16:24 <shbot>	osse: b
Sep 12 12:16:33 <osse>	a gnuism, maybe?
Sep 12 12:16:37 <Riviera>	yup, that's GNU
Sep 12 12:16:45 <no_gravity>	osse: Yeah, that would be a workaround.
Sep 12 12:17:49 <osse>	Riviera: what part of it is GNU? I'm guessing the anchor inside an "or branch" (not sure what the correct term is)
Sep 12 12:18:00 <Riviera>	osse: alternation with \| is GNU only
Sep 12 12:18:37 <Riviera>	osse: although both BSD sed (not sure if all of them) and GNU sed support EREs with |, which should then suffice. So I guess -E 's/...|...' something :)
Sep 12 12:19:22 <osse>	so or'ing stuff isn't BRE at all?
Sep 12 12:19:26 <Riviera>	osse: correct
Sep 12 12:19:27 <osse>	except for the "or" you get with [ ]
Sep 12 12:19:31 <osse>	I see
Sep 12 12:19:43 <Riviera>	osse: then, what BRE has and ERE doesn't is back-references.
Sep 12 12:19:55 <Riviera>	osse: o\(.\)\1e
Sep 12 12:20:29 <Riviera>	when you enable ERE in sed with -E or -r a pattern like o(.)\1e would again only work in GNU sed
Sep 12 12:20:55 <Riviera>	and whether that works in bash with =~ (which uses EREs) depends on the c-lib's regex engine that bash was linked to.
Sep 12 13:25:21 <wwilliam>	hello how to print name of the file and the time there in the form of 2019_09_07:02 i want the ouput to be like this
Sep 12 13:25:33 <wwilliam>	2019_09_07:02 testing2
Sep 12 13:25:47 <wwilliam>	fernandez@debian:~$ ls -l testing2
Sep 12 13:25:49 <wwilliam>	-rwxr--r-- 1 afernandez afernandez 328 Sep 12 07:02 testing2
Sep 12 13:26:23 <djph>	wwilliam: you write your own program in your favorite non-bash language to do that.
Sep 12 13:41:14 <thm>	wwilliam: ls -l --time-style=+%Y_%m_%d_%H:%M
Sep 12 13:43:51 <thm>	and maybe | awk '{print $6 " " $7}'
Sep 12 13:44:25 <earnestly>	$6, $7 (unless you actually need " " and not FS)
Sep 12 13:50:33 <pj>	piping the output of ls is not a good idea.
Sep 12 14:01:49 <_val_>	but you can use find in scripts :p: find -maxdepth 1 -name testing2 -printf '%AY_%Am_%Ad %f\n'
Sep 12 14:04:29 <wwilliam>	Thank you all will test.
Sep 12 14:05:45 <wwilliam>	I ended up with this which suits my needs:
Sep 12 14:05:46 <wwilliam>	stat -c '%y===========>%n' "$x" >> "$fl"
Sep 12 14:05:49 <ska>	I have a $1 I use with getopt for an optional string: Should I make that a getopt argument? I have other getopt args like b but I cant do a : mycommand dirname -b
Sep 12 14:07:15 <ska>	OR should I try to peel off non-getopt args ?
Sep 12 14:08:21 <geirha>	any reason why you're using the broken getopt rather than the getopts builtin?
Sep 12 14:09:18 <ska>	Sr.. I am using getopts builtin
Sep 12 14:10:15 <geirha>	ok, so you have a command with subcommands. I'd probably write a function for each subcommand, which each have their own option parsing with getopts
Sep 12 14:17:30 <ska>	Cant I put that un-opted option in *) of case?
Sep 12 14:18:14 <ska>	Is there some sort of bash debugger?
Sep 12 14:21:44 <geirha>	ska: that would mix global options with subcommand options. Are you sure you want that?
Sep 12 14:24:14 <geirha>	ska: Take git as an example. It globally takes a [-C path], and its grep subcommand, takes a [-C context]. So this invocation is allowed:  git -C /tmp/repo grep -C 3 '^[[:blank:]]*foo('   With the approach you want, you wouldn't be able to handle a case like that
Sep 12 14:49:44 <carstenhag>	Hey! I am trying to write a script, where a command outputs a number and I need to compare it.
Sep 12 14:50:08 <carstenhag>	I'm having a problem running the command, see https://gist.github.com/carstenhag/95c551900509c73455bae9b9c4f636a3 -- condition does not get filled
Sep 12 14:50:09 <checkbot>	carstenhag: I think the problem is on line 9. This is a unicode non-breaking space. Delete and retype it. See 7 issues on https://shellcheck.net/?id=cb92609
Sep 12 14:50:21 <carstenhag>	./convert_non_transparent_png_to_jpg.sh: line 9:  awk: command not found
Sep 12 14:50:21 <carstenhag>	./convert_non_transparent_png_to_jpg.sh: line 9: Image:: command not found
Sep 12 14:52:21 <geirha>	!nbsp
Sep 12 14:52:21 <greybot>	In some graphical environments, Alt+space, Alt Gr+space or Option+space generate a non-breaking space instead of a regular space. They look the same to us, but not to the shell. ''sed -n l'' will display them differently than regular spaces
Sep 12 14:53:41 <mknod>	"In each of the cases below, word is subject to tilde expansion, parameter expansion, command substitution, and arithmetic expansion.
Sep 12 14:53:41 <mknod>	[...]
Sep 12 14:53:42 <mknod>	${parameter:-word}"
Sep 12 14:53:55 <mknod>	# echo "${unset:-~}"
Sep 12 14:53:56 <shbot>	mknod: ~
Sep 12 14:54:12 <carstenhag>	Hmmm
Sep 12 14:54:53 <carstenhag>	https://gist.github.com/carstenhag/95c551900509c73455bae9b9c4f636a3 updated it -- Now the error is at the if test
Sep 12 14:54:57 <Soliton>	tilde is not expanded in quotes.
Sep 12 14:55:14 <Soliton>	!nbsp > carstenhag
Sep 12 14:55:14 <greybot>	carstenhag: In some graphical environments, Alt+space, Alt Gr+space or Option+space generate a non-breaking space instead of a regular space. They look the same to us, but not to the shell. ''sed -n l'' will display them differently than regular spaces
Sep 12 14:55:22 <carstenhag>	Yes, i fixed the nbsp
Sep 12 14:55:37 <Patsie>	carstenhag: you're missing a space before the closein ]
Sep 12 14:55:48 <carstenhag>	wow...
Sep 12 14:55:49 <carstenhag>	thanks
Sep 12 14:55:53 <mknod>	Soliton, but it's supposed to happen at the "word" level
Sep 12 14:55:59 <carstenhag>	seems silly to me :(
Sep 12 14:56:13 <Patsie>	carstenhag: you made it...
Sep 12 14:56:31 <carstenhag>	no, i did not made bash to care about the space before a ] :P
Sep 12 14:56:34 <Soliton>	you could write your own shell with your own syntax rules.
Sep 12 14:56:40 <mknod>	Soliton,
Sep 12 14:56:45 <mknod>	"If parameter is unset or null, the expansion of word is substituted. Otherwise, the value of parameter is substituted."
Sep 12 14:57:11 <mknod>	In this case, the expansion of word is $HOME.
Sep 12 14:57:20 <VSpike>	Does anyone know a simple way to consume open files or file descriptors to test ulimits?
Sep 12 14:57:51 <VSpike>	Trying to think of something that doesn't leave stuff on the disk to clean up
Sep 12 14:59:28 <carstenhag>	Soliton: not sure why the snark, but thanks
Sep 12 14:59:50 <mknod>	carstenhag, because you don't say something is silly if you have no clue about it
Sep 12 15:00:29 <Soliton>	complaining about syntax of a decades old language is fairly useless unless you want to invent your own.
Sep 12 15:01:50 <Soliton>	!drlwf > carstenhag
Sep 12 15:01:50 <greybot>	carstenhag: https://mywiki.wooledge.org/DontReadLinesWithFor ... "for" is for iterating arguments/arrays, not strings. Never do: for x in $(cat file), or for x in $var; instead, use a glob (*.txt), an array ("${hosts[@]}") or a while-read loop. See also https://mywiki.wooledge.org/BashPitfalls#pf1
Sep 12 15:02:03 <mknod>	So, what exactly am I misinterpreting in "the expansion of word is substituted"
Sep 12 15:02:37 <mknod>	This suggests "${unset:-"~"}" would not be subject to tilde expansion.
Sep 12 15:03:26 <Soliton>	VSpike: for ((c=10; c<=1025; c++)); do exec {fd}< file; done
Sep 12 15:05:08 <VSpike>	Soliton: that's awesome! Thanks
Sep 12 15:06:10 <mknod>	The same goes for
Sep 12 15:06:18 <mknod>	# echo "${unset:-5+5}"
Sep 12 15:06:20 <shbot>	mknod: 5+5
Sep 12 15:06:41 <mknod>	"word" is definitely not subject to arithmetic expansion here. The manual is broken.
Sep 12 15:07:14 <Soliton>	there is no arithmetic context there.
Sep 12 15:07:47 <Soliton>	you might as well complain it did not to command substitution.
Sep 12 15:07:53 <Soliton>	do*
Sep 12 15:07:53 <mknod>	Byt they ARE saying word is subject to arithmetic expansion in "${parameter:-word}"
Sep 12 15:08:04 <mknod>	But*
Sep 12 15:08:25 <Soliton>	if you put syntax there that suggests arithmetic expansion, sure.
Sep 12 15:08:45 <Soliton>	# echo "${unset:-$((5+5))}"
Sep 12 15:08:46 <shbot>	Soliton: 10
Sep 12 15:08:58 <mknod>	I remember when the manual was even more broken and stated "${parameter/word/string}" in place of "${parameter/pattern/string}"
Sep 12 15:09:37 <mknod>	Soliton, but that's not what they're saying, again. If I follow you, then the tilde should be equally expanded.
Sep 12 15:09:53 <mknod>	In your example, $((5+5)) is being expanded first.
Sep 12 15:10:07 <Soliton>	prove it.
Sep 12 15:10:17 <mknod>	It has nothing to do with the parameter Expansion
Sep 12 15:12:51 <mknod>	# echo "foo $((5+5)) bar"
Sep 12 15:12:52 <shbot>	mknod: foo 10 bar
Sep 12 15:13:05 <mknod>	proved it.
Sep 12 15:13:37 <Soliton>	yes, arithmetic expansion works in double quotes. well done.
Sep 12 15:14:26 <Soliton>	nothing about your suggested order of operations was proven.
Sep 12 15:15:35 <mknod>	what they want to say is "${parameter:-string}", because nothing here is subject to anything but parameter expansion.
Sep 12 15:16:11 <VSpike>	Soliton: what is {fd} in that one liner?
Sep 12 15:16:18 <Soliton>	then ${unset:-$((5+5))} would not work as it does.
Sep 12 15:16:39 <mknod>	Soliton, $((...)) IS subject ti parameter expansion
Sep 12 15:16:48 <Soliton>	anywhere?
Sep 12 15:17:00 <mknod>	as in?
Sep 12 15:17:12 <Soliton>	you make it sound like context doesn't matter.
Sep 12 15:17:57 <mknod>	Soliton, pretty much anywhere unless single quoted yeah...?
Sep 12 15:18:01 <Soliton>	VSpike: assigns fd the next free file descriptor.
Sep 12 15:18:37 <Soliton>	unless single quoted. right, so not everywhere.
Sep 12 15:18:56 <urthmove1>	I have some questions about "expect" does anyone know where the best place (different channel/server) is?
Sep 12 15:19:04 <Soliton>	so it would seem one would have to specify where it is done and where not.
Sep 12 15:19:13 <Soliton>	!expect
Sep 12 15:19:13 <greybot>	expect (http://expect.sf.net/) is a tool for scripting terminal applications in tcl, join #tcl for help. Alternative tools exist in most languages, for a shell version see http://empty.sf.net
Sep 12 15:19:19 *	urthmove1 is having trouble spawning screen within an expect script to automate vpn logins
Sep 12 15:19:23 <mknod>	I'm not sure how it relates to the issue I'm describing. Simply put: "word" is a made-up concept.
Sep 12 15:20:21 <Soliton>	ok.
Sep 12 15:21:59 <mknod>	Soliton, unless you can prove how different it is from "string"
Sep 12 15:22:18 <mknod>	Because that's my question ultimately
Sep 12 15:22:26 <VSpike>	Soliton: I've never seen that syntax before .. is that an exec thing or a bash thing? Does it have a name?
Sep 12 15:22:34 <VSpike>	I couldn't spot it in man bash
Sep 12 15:22:59 <Soliton>	look under REDIRECTION.
Sep 12 15:23:24 <Patsie>	# echo "$((~))"
Sep 12 15:23:25 <shbot>	Patsie: bash: ~: syntax error: operand expected (error token is "~")
Sep 12 15:23:43 <VSpike>	Doh .. just spotted it *facepalm*
Sep 12 15:24:42 <Soliton>	mknod: it's not much different that's why all the expansions you expect in double quoted strings were listed there.
Sep 12 15:25:17 <mknod>	Soliton, but they do make a difference in the manual
Sep 12 15:25:41 <Soliton>	feel free to point it out.
Sep 12 15:25:53 <mknod>	https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Shell-Parameter-Expansion
Sep 12 15:26:48 <Soliton>	feel free to point out exactly what you mean. i'm not going to read dozens of lines to guess what you're referring to.
Sep 12 15:26:59 <mknod>	${parameter%%word}, here we have "word" (as per their definition)
Sep 12 15:27:09 <mknod>	${parameter/pattern/string}, here we have "string"
Sep 12 15:27:33 <mknod>	I can see how pattern and string are a thing in Bash, but word seems made-up as previously said
Sep 12 15:28:05 <mknod>	unless both string and word behave differently, in which case I'd want to know where.
Sep 12 15:31:25 <Soliton>	you mean string is also subject to all the mentioned expansion for word?
Sep 12 15:32:17 <Soliton>	i suppose it doesn't say that.
Sep 12 15:33:08 <Soliton>	it dosn't say it for pattern either.
Sep 12 15:35:19 <mknod>	Soliton, I mean "word" is not any different from "string" as far as I can see.
Sep 12 15:35:30 <mknod>	# parameter="foo bar baz"; echo "${parameter/bar/$((5+5))}"
Sep 12 15:35:31 <shbot>	mknod: foo 10 baz
Sep 12 15:36:30 <Soliton>	sure.
Sep 12 15:37:31 <mknod>	And I mean that Bash doesn't comply with how "word" is described in the manual.
Sep 12 15:37:45 <Soliton>	so it could say that string and pattern are also subject to the mentioned expansions.
Sep 12 15:38:41 <Soliton>	word   A sequence of characters considered as a single unit by the shell.  Also known as a token.
Sep 12 15:39:04 <Soliton>	not sure what's wrong there.
Sep 12 15:39:04 <mknod>	that's pretty low-level heh.
Sep 12 15:39:33 <Soliton>	again point out exactly what you mean or i'll guess something.
Sep 12 15:40:17 <mknod>	<Soliton>	so it could say that string and pattern are also subject to the mentioned expansions.
Sep 12 15:40:41 <mknod>	they are the same thing, and none comply to the "mentioned expansions"
Sep 12 15:40:47 <mknod>	if by "mentioned expansions" you mean:
Sep 12 15:41:04 <mknod>	"In each of the cases below, word is subject to tilde expansion, parameter expansion, command substitution, and arithmetic expansion."
Sep 12 15:41:16 <Soliton>	you just showed that they do.
Sep 12 15:41:31 <Soliton>	which one does not work?
Sep 12 15:41:44 <mknod>	tilde expansion
Sep 12 15:41:55 <Soliton>	# var=foo; echo ${var/foo/~}
Sep 12 15:41:56 <shbot>	Soliton: /root
Sep 12 15:42:18 <mknod>	the result of ${var/foo/~} was tilde expanded
Sep 12 15:42:28 <mknod>	not ~
Sep 12 15:42:33 <Soliton>	prove it.
Sep 12 15:42:47 <mknod>	# var=foo; echo "${var/foo/~}"
Sep 12 15:42:48 <shbot>	mknod: /root
Sep 12 15:42:55 <mknod>	holy shit
Sep 12 15:43:16 <mknod>	32# var=foo; echo "${var/foo/~}"
Sep 12 15:43:17 <shbot>	mknod: ~
Sep 12 15:43:22 <mknod>	mmhm.
Sep 12 15:44:25 <mknod>	hey Soliton, you're fooling me
Sep 12 15:44:34 <skered>	Any idea what feature or bug fix in 5.x where this shows different results on 4.1/4.2 (RHEL 6/7 bash).  foo=bar; echo "${foo/bar/'$(echo baz)'}"   5: $(echo baz)  4: baz
Sep 12 15:44:40 <mknod>	# echo "${unset:-~}"
Sep 12 15:44:41 <shbot>	mknod: ~
Sep 12 15:44:46 <mknod>	^ here I'm proving it.
Sep 12 15:45:11 <Soliton>	no, you're not.
Sep 12 15:45:12 <skered>	er... is this kinda releated to what you're already talking about with ${.../...}?
Sep 12 15:45:19 <mknod>	# echo ${unset:-~}
Sep 12 15:45:20 <shbot>	mknod: /root
Sep 12 15:45:23 <mknod>	better?
Sep 12 15:57:30 <Soliton>	yes, so tilde expansion does work.
Sep 12 15:58:06 <Soliton>	what is a bit weird is when the word/string/pattern is considered quoted or not.
Sep 12 15:58:51 <mknod>	so we can finally agree something is a bit weird
Sep 12 15:58:52 <Soliton>	i think you could argue it should be true nested quoting so that tilde expansion does work even if the PE itself is quoted.
Sep 12 15:59:08 <mknod>	in     echo ${unset:-~}     tilde expansion works just as it works in      echo ~
Sep 12 15:59:15 <mknod>	what I proved above
Sep 12 15:59:36 <Soliton>	that still does not tell you anything about order of operations.
Sep 12 16:00:07 <Soliton>	you'd have to look at the code since i doubt you can make a test that would tell you.
Sep 12 16:00:22 <mknod>	That's not really what matters here. I'd be more interested in Bash doing what the manual say it does.
Sep 12 16:00:46 <Soliton>	it does. just not the way you interprete it.
Sep 12 16:01:02 <Soliton>	bash does all the expansions it mentions.
Sep 12 16:01:38 <mknod>	"In each of the cases below, word is subject to tilde expansion [...]"
Sep 12 16:01:48 <Soliton>	as mentioned the only somewhat surprising part is that for tilde expansion to work the whole PE must be unquoted... sometimes.
Sep 12 16:01:51 <mknod>	${parameter:-word}
Sep 12 16:02:05 <mknod>	sorry but no, "word" is not subject to tilde expansion in ${parameter:-word}
Sep 12 16:02:14 <mknod>	${parameter:-word} is, if and only if word is a tilde.
Sep 12 16:02:17 <Soliton>	# echo ${unset:-~}
Sep 12 16:02:18 <shbot>	Soliton: /root
Sep 12 16:02:28 <mknod>	what I've just said
Sep 12 16:02:29 <Soliton>	# echo ${unset:-~root}
Sep 12 16:02:30 <shbot>	Soliton: /root
Sep 12 16:02:53 <Soliton>	# echo ${unset:-~root/foo bar}
Sep 12 16:02:53 <mknod>	the result is expanded, because it's unquoted.
Sep 12 16:02:54 <shbot>	Soliton: /root/foo bar
Sep 12 16:03:02 <mknod>	word itself is not.
Sep 12 16:03:03 <Soliton>	wild guessing
Sep 12 16:03:19 <mknod>	otherwise "${parameter:-~}" would equally work.
Sep 12 16:03:40 <Soliton>	# var=foo; echo "${var/foo/~}"
Sep 12 16:03:41 <shbot>	Soliton: /root
Sep 12 16:03:50 <mknod>	because ~ would actually be substituted, as explained in the manpage
Sep 12 16:05:14 <iffraff>	Hi is there a command that will tell me if my script is running in linux or mac?
Sep 12 16:05:41 <twkm>	nope.
Sep 12 16:05:52 <mknod>	Soliton, in your last example, the parameter expansion is ${parameter/pattern/string}, notice it's "string", not "word"
Sep 12 16:05:54 <twkm>	you may be able to infer it from the bash version.
Sep 12 16:06:12 <mknod>	Soliton, also, notice that it does the exact opposite what the manual says
Sep 12 16:06:38 <twkm>	but normally one runs uname then guesses.
Sep 12 16:07:02 <iffraff>	twkm:  there must be a way.  I can't imagine I'm the only one who has a team using both mac and linux.  ok so uname does return linux in linux :) but what does it do in mac?
Sep 12 16:07:13 <twkm>	[repeat:] normally one runs uname then guesses.
Sep 12 16:07:16 <fructose>	iffraff: uname may help, e.g. https://gist.github.com/ashrithr/5752922
Sep 12 16:07:29 <mknod>	iffraff, on mac:
Sep 12 16:07:29 <twkm>	usually uname doesn't lie, but sometimes it does.
Sep 12 16:07:30 <mknod>	$ uname
Sep 12 16:07:30 <mknod>	Darwin
Sep 12 16:07:55 <skered>	iffraff: I use 'uname -s' to find the platform.
Sep 12 16:09:12 <iffraff>	skered: are you on a mac?
Sep 12 16:09:28 <skered>	iffraff: I'm on mutliple platforms.
Sep 12 16:10:00 <carstenhag>	I'm following https://unix.stackexchange.com/a/489457/88337 to change a file extension in a string, see https://gist.github.com/carstenhag/1086b5ec7bbde7af627943f805f4590a
Sep 12 16:10:12 <mknod>	iffraff, wake up
Sep 12 16:10:25 <twkm>	for example, darwin would be the opensource base under macos which in theory anyone might build a not-macos on top of, perhaps even having a newer bash.  in practice nobody gives a shit about darwin without the macos experience so Darwin=MacOS.
Sep 12 16:10:25 <iffraff>	skered: so I ran uname -s on ubuntu ( I'm afraid my only platform ) and it returned the sam with no -s
Sep 12 16:10:32 <carstenhag>	unfortunately bash on a mac says ./crap.sh: line 3: ${"$old"%.png}.jpg: bad substitution. I tried without the ", but welp, doesnt work either
Sep 12 16:11:00 <twkm>	carstenhag: duh.
Sep 12 16:11:13 <twkm>	that's not how PARAMETER expansion works.
Sep 12 16:11:16 <carstenhag>	i also looked at shellcheck first :D
Sep 12 16:11:41 <twkm>	also bash on mac is old as shit, though ${var%...} works for it.
Sep 12 16:11:58 <twkm>	!faq rename
Sep 12 16:11:59 <greybot>	https://mywiki.wooledge.org/BashFAQ/030 -- How can I rename all my *.foo files to *.bar, or convert spaces to underscores, or convert upper-case file names to lower case?
Sep 12 16:12:06 <carstenhag>	ah so an extra $
Sep 12 16:12:08 <carstenhag>	thanks
Sep 12 16:12:13 <iffraff>	right ok, so all I really care about is if running on linux do x so as long as uname doesn't throw on a mac and doesn't return "linux" :) then I gues I"m good
Sep 12 16:12:16 <twkm>	extra?!?!!?
Sep 12 16:12:34 <iffraff>	thanks skered and twkm.  not so much mknod
Sep 12 16:12:36 <carstenhag>	so an extra $, which was too much :D
Sep 12 16:12:38 <mknod>	iffraff, that's because mac ain't linux
Sep 12 16:12:47 <twkm>	beware some people have their uname return GNU/Linux.
Sep 12 16:13:16 <twkm>	(because none of the other contributors matter as much as gnu, i guess)
Sep 12 16:13:27 <Soliton>	perhaps rather check the tools work like you expect instead of guess based on OS or write portable scripts.
Sep 12 16:14:41 <iffraff>	tkazi: so... some mac useres may set up their local machine like that?  if that's the case that's ok, I don't thnk my peole are doing that
Sep 12 16:15:46 <twkm>	given tkazi hasn't spoken in the last 500 lines i'll guess that's for me.
Sep 12 16:15:48 <skered>	iffraff: I don't know about older macOS but the latest macOS has -s.  There's a lot of other tricks to find the proper platform but I've gotta away with uname for the most part.  Knowing the different between Linux or CentOS/RHEL might take a couple extra steps.
Sep 12 16:16:37 <twkm>	i can't imagine anyone with macos that would strip macos leaving darwin then build a new experience on that.
Sep 12 16:17:14 <iffraff>	skered: great,my case is fairly rudimentary.  basically I'm the oly one using linux and their damn scripts all says brew this and other mac only shite that.  so I'm good.
Sep 12 16:17:19 <iffraff>	thank you all again.
Sep 12 16:17:25 <mknod>	twkm, that's called iOS
Sep 12 16:17:26 <twkm>	there were some attempts to build a plain darwin, perhaps they continue.
Sep 12 16:17:42 <twkm>	mknod: hahahaha, no.
Sep 12 16:19:14 <twkm>	iffraff: macos users are often asked to use homebrew, etc, to get a newer bash because the one that comes with macos is very old.
Sep 12 16:21:18 <twkm>	for licensing reasons, which will eventually cause macos to change to zsh as the default shell at which time your mac users will probably ask why the script fails for that reason.
Sep 12 16:22:23 <iffraff>	great... but I'm using zsh, and uname seems to work for me.  anyway screw em.  they'll have to blow that bridge when they come to it
Sep 12 16:22:57 <greycat>	uname isn't a shell builtin, so it doesn't matter which shell you're using
Sep 12 16:23:19 <Soliton>	4# foo=bar; echo "${foo/bar/'$(echo baz)'}" # skered
Sep 12 16:23:20 <shbot>	Soliton: $(echo baz)
Sep 12 16:30:35 <skered>	4# echo $BASH_VERSION
Sep 12 16:30:36 <shbot>	skered: 4.4.23(1)-release
Sep 12 16:31:55 <skered>	Ok so it looks like something was changed past 4.2
Sep 12 16:32:08 <skered>	Doe shbot have different 4.x versions?
Sep 12 16:32:11 <skered>	Does*
Sep 12 16:32:43 <greycat>	!triggers
Sep 12 16:32:43 <greybot>	/msg shbot # triggers
Sep 12 16:33:36 <Soliton>	42# foo=bar; echo "${foo/bar/'$(echo baz)'}"
Sep 12 16:33:37 <shbot>	Soliton: 'baz'
Sep 12 16:33:40 <Soliton>	43# foo=bar; echo "${foo/bar/'$(echo baz)'}"
Sep 12 16:33:41 <shbot>	Soliton: $(echo baz)
Sep 12 16:43:35 <pyzozord>	hi guys, i made a bunch of aliases like `alias gco="git checkout"` but the bash autocomplete doesnt work with those aliases now :(
Sep 12 16:44:18 <greycat>	I'm guessing you mean bash-completion and its special handling of git subcommands and options.
Sep 12 16:44:42 <greycat>	You could read up on how bash-completion does its magic, and duplicate that for your alias.
Sep 12 16:59:52 <wwilliam>	oh shit you guys gonna kill me with this one:
Sep 12 17:00:05 <wwilliam>	I have a list of filenames in a file.
Sep 12 17:00:13 <emg>	nul separated?
Sep 12 17:00:19 <emg>	:-D
Sep 12 17:00:29 <wwilliam>	one per line
Sep 12 17:00:38 <emg>	ouch
Sep 12 17:00:49 <wwilliam>	the real files are in different directories nested
Sep 12 17:01:02 <wwilliam>	uhh wait if there nested i can use find
Sep 12 17:01:12 <wwilliam>	I will be right back
Sep 12 17:01:16 <emg>	heh
Sep 12 17:01:33 <emg>	wwilliam: just remember when you do come explain what you're doing, explain what you're actually doing and why, don't try to generalize it
Sep 12 17:01:44 <wwilliam>	OK
Sep 12 17:05:08 <wwilliam>	while read -r x;do find . -type f  -iname "$x" -exec stat -c '%y===========>%n' {} \;;done < <(cat logs_2019_09_10)
Sep 12 17:05:12 <wwilliam>	didnt work
Sep 12 17:05:15 <rafasc>	pyzozord: I think you could run: __git_complete gco _git_checkout
Sep 12 17:07:19 <wwilliam>	"work"=no hits
Sep 12 17:09:56 <rafasc>	bikeshed: why use done < <(cat file) instead of just: done < file
Sep 12 17:10:08 <emg>	uuoc
Sep 12 17:10:14 <wwilliam>	ok thank you
Sep 12 17:11:09 <emg>	wwilliam: 1) can you show us the content of logs_2019_09_10? 2) how was that file created? why is there a list of files? that's normally a sign you did osmething wrong already. 3) what are you trying to accomplish? why are you running find and stat? what's your goal?
Sep 12 17:11:11 <wwilliam>	still no hits
Sep 12 17:11:47 <wwilliam>	1) hold on....coming up
Sep 12 17:11:53 <lf94>	Hey, is there a way to play a beep whenever a program is finished executing?
Sep 12 17:12:11 <lf94>	I mean implicitly, not explicitly
Sep 12 17:12:11 <greycat>	lf94: printf '\a' might work; if it doesn't, ask your OS channel
Sep 12 17:12:20 <lf94>	implicitly
Sep 12 17:12:24 <emg>	lf94: probably add printf '\a' to your prompt command
Sep 12 17:12:27 <lf94>	I should not have to type it
Sep 12 17:12:32 <lf94>	Ah ha
Sep 12 17:12:34 <lf94>	Very good idea
Sep 12 17:12:39 <emg>	lf94: but first, check if printf '\a' actually beeps
Sep 12 17:12:46 <lf94>	yep
Sep 12 17:12:51 <emg>	you may need to modprobe pcspkr or something like that, I forget
Sep 12 17:12:56 <emg>	I think I always blacklist it
Sep 12 17:13:13 <lf94>	doesnt beep
Sep 12 17:13:27 <lf94>	iirc there are many beep commands on debian
Sep 12 17:13:31 <greycat>	OS channel time
Sep 12 17:13:35 <lf94>	In any case - not #bash's problem :)
Sep 12 17:13:55 <emg>	lf94: go to #debian to ask how to beep, come back here if you need help getting that beep into your PROMPT_COMMAND
Sep 12 17:14:01 <emg>	good luck!
Sep 12 17:14:17 <lf94>	My main concern is "how to always run program X after string-of-commands is done" or similar
Sep 12 17:14:35 <lf94>	Shouldnt it go into PS1?
Sep 12 17:14:51 <emg>	probably PROMPT_COMMAND
Sep 12 17:14:58 <lf94>	ok :)
Sep 12 17:15:14 <greycat>	If it's just the single \a character you can put it in PS1.  If you need to run a whole command, like aplay or beep, then put that command in PROMPT_COMMAND.
Sep 12 17:15:18 <lf94>	ah ha
Sep 12 17:15:28 <lf94>	This is a very cool feature
Sep 12 17:15:54 <wwilliam>	1) http://paste.debian.net/hidden/4b853493/
Sep 12 17:16:05 <emg>	hmm, I might try out PS1+=$'\a' for a day or two
Sep 12 17:16:28 <emg>	wwilliam: you won't match -name when it starts with ./
Sep 12 17:16:33 <greycat>	well, you want \[ \] around it too.
Sep 12 17:16:43 <emg>	indeed
Sep 12 17:16:43 <wwilliam>	2)
Sep 12 17:16:45 <wwilliam>	function fls ()
Sep 12 17:16:46 <wwilliam>	{
Sep 12 17:16:47 <wwilliam>	    find . -maxdepth 1 -type f -mtime -1 \( -iname "nypdf2ing2*.txt" -o -iname "ncfl*.txt" -o -iname "*nyfl*.txt" -o -iname "naetfl*.txt" -o -iname "drns2ing2*.txt" -o -iname "nc102fl*.txt" -o -iname "flpdfls*.txt" -o -iname "flpsfls*.txt" \) ! -size 0 -exec tail -n+1 {} + > "$emlfl"
Sep 12 17:16:49 <wwilliam>	};
Sep 12 17:16:52 <emg>	oh god why
Sep 12 17:17:05 <wwilliam>	3)
Sep 12 17:17:05 <emg>	well, if that's the exact files you want
Sep 12 17:17:09 <skered>	Soliton: I see thanks.
Sep 12 17:17:20 <emg>	use -exec in there, or use printf \0 to nul separate and handle them that way
Sep 12 17:17:29 <wwilliam>	i need like this for every file found:
Sep 12 17:17:59 <wwilliam>	stat -c '%y===========>%n' 632547_MDTA_STMT_9x12_MANUAL_001.PDF.done
Sep 12 17:18:01 <wwilliam>	2019-09-11 14:05:47.000000000 -0400===========>632547_MDTA_STMT_9x12_MANUAL_001.PDF.done
Sep 12 17:18:25 <wwilliam>	create another file with the output like this for everyfile found:
Sep 12 17:18:26 <emg>	wwilliam: also I'd recommend a paste site that doesn't have all the extra crap, ix.io is really nice, and easy to use from the terminal
Sep 12 17:18:26 <wwilliam>	2019-09-11 14:05:47.000000000 -0400===========>632547_MDTA_STMT_9x12_MANUAL_001.PDF.done
Sep 12 17:19:19 <wwilliam>	around where? greycat starting where and finishing where?
Sep 12 17:20:18 <emg>	wwilliam: well, if you just want to hack this together, let's continue with what you have because trying to get to the bottom of this and do it right is just too much for me to handle right now
Sep 12 17:20:30 <wwilliam>	ok
Sep 12 17:20:33 <emg>	wwilliam: in your while loop you want to remove the ./ from the file name
Sep 12 17:20:47 <emg>	while IFS= read -r file; do file=${file#./}; find ....
Sep 12 17:20:57 <wwilliam>	ah ok thanks
Sep 12 17:21:01 <wwilliam>	testing
Sep 12 17:22:19 <emg>	!ix > wwilliam
Sep 12 17:22:20 <greybot>	wwilliam: Upload to http://ix.io from your terminal: <command> | curl -n -F 'f:1=<-' http://ix.io # or add a function to your .bashrc: ix() { curl -n -F 'f:1=<-' http://ix.io; } # examples: ix < file; command | ix
Sep 12 17:22:28 <emg>	add that to your bashrc and use it
Sep 12 17:22:41 <wwilliam>	ok
Sep 12 17:25:25 <marcusal1987>	where would be a good place to start learning bash
Sep 12 17:25:41 <emg>	!guide
Sep 12 17:25:41 <greybot>	http://mywiki.wooledge.org/BashGuide or in PDF: http://s.ntnu.no/bashguide.pdf
Sep 12 17:25:53 <emg>	also check out the faq and especially the pitfalls
Sep 12 17:26:12 <emg>	also don't google or check stack overflow, most of the scripts in the wild are absolute shit
Sep 12 17:26:37 <emg>	ask here when you have questions or need help, and explain what you're working on and why very precisely
Sep 12 17:26:46 <emg>	good luck!
Sep 12 17:26:49 <wwilliam>	in this case what would be command for that function?
Sep 12 17:27:04 <emg>	wwilliam: what do you mean?
Sep 12 17:27:17 <wwilliam>	examples: ix < file; command | ix
Sep 12 17:28:18 <emg>	ah, the idea is the ix function will take whatever it reads on stdin and post it to the ix.io paste site
Sep 12 17:28:31 <emg>	so if you wanted to show the output of a command, you'd run that command and pipe it through the ix function
Sep 12 17:28:40 <emg>	if you watned to show the contents fo a file, you'd redirect input from the file
Sep 12 17:29:24 <wwilliam>	ah ok thank you.
Sep 12 17:29:32 <emg>	wwilliam: for example when I asked about the contents of that logs_2019_something you could do: ix < logs_2019_something
Sep 12 17:29:48 <wwilliam>	oh OK
Sep 12 17:29:50 <wwilliam>	let me test
Sep 12 17:29:57 <emg>	wwilliam: and if I asked what's the output when you run find . -name gazordnablotz you could run   find . -name gazordnablotz | ix
Sep 12 17:30:10 <lf94>	haha
Sep 12 17:30:13 <lf94>	This is awesome!
Sep 12 17:30:13 <wwilliam>	coll
Sep 12 17:30:15 <wwilliam>	cool
Sep 12 17:30:30 <lf94>	export PROMPT_COMMAND="play -q -n synth 0.1 sine 180 vol 0.5
Sep 12 17:30:30 <emg>	the two great things about ix.io are 1) easy to post from the terminal 2) easy to curl/wget from the terminal
Sep 12 17:30:48 <lf94>	Now I can an audible confirmation that something is done
Sep 12 17:30:59 <lf94>	rather than needing to look at my screen
Sep 12 17:31:09 <lf94>	better than visual notifications imo
Sep 12 17:31:10 <emg>	lf94: fun. I assume you're only using that in specific windows not for every session?
Sep 12 17:31:19 <lf94>	For all sessions
Sep 12 17:31:34 <lf94>	It is a very short, low frequency beep
Sep 12 17:31:38 <emg>	I can just imagine:   cd    (sound, wait for prompt)      ls (sound, wait for prompt)
Sep 12 17:31:40 <lf94>	so it's very easy on the ears
Sep 12 17:31:54 <lf94>	emg: nope. my cd command does ls automatically after.
Sep 12 17:32:05 <emg>	ah, I have cs for that :-)
Sep 12 17:32:23 <lf94>	and also: single tab press shows possible completions / directory listing
Sep 12 17:32:37 <lf94>	these tiny quality of life things are fricking great.
Sep 12 17:32:57 <lf94>	Is it possible to play a noise on program failure?
Sep 12 17:33:04 <rafasc>	lf94: I have this abomination as my nofify beep: play -n synth .15 sine A4 .15 sine F4 delay 0 .15 remix - fade 0 .3 .05 norm -10
Sep 12 17:33:18 <greycat>	lf94: you can use $? in PROMPT_COMMAND or in a command substitution in PS1.
Sep 12 17:33:20 <emg>	lf94: yes you can check $? in PROMPT_COMMAND and do something based on that
Sep 12 17:33:25 <wwilliam>	i did :
Sep 12 17:33:26 <wwilliam>	afernandez@debian:~$ ix < logs
Sep 12 17:33:27 <wwilliam>	afernandez@debian:~$
Sep 12 17:33:28 <emg>	damn I'm too slow
Sep 12 17:33:44 <emg>	wwilliam: should have printed a URL
Sep 12 17:33:51 <wwilliam>	did not
Sep 12 17:34:01 <lf94>	that is awesome.
Sep 12 17:34:09 <lf94>	rafasc: too long :)
Sep 12 17:34:30 <greycat>	background it
Sep 12 17:34:30 <wwilliam>	as always im an id=diot
Sep 12 17:34:32 <wwilliam>	http://ix.io/1UUy
Sep 12 17:34:38 <rafasc>	lf94: short beeps are hard to hear when you have other audio playing
Sep 12 17:34:42 <wwilliam>	i did on the first one only logs
Sep 12 17:35:19 <lf94>	rafasc: ah yeah
Sep 12 17:35:29 <lf94>	rafasc: I'm listening to jazz most of the day...easy to hear through :)
Sep 12 17:36:01 <rafasc>	lf94: try changing the .15 to something like .05
Sep 12 17:36:14 <emg>	or as greycat said, background it so you don't have to wait
Sep 12 17:40:25 <horribleprogram>	Prob the best channel to ask this
Sep 12 17:40:47 <horribleprogram>	bunch of my .mp4s have a title... something like 001 Vid.mp4
Sep 12 17:40:59 <horribleprogram>	In Finder and w/e they show the title
Sep 12 17:41:18 <horribleprogram>	when I drag them into let's say a VLC media playlist, a lot of them have the same "Udemy Video Asset"
Sep 12 17:41:25 <horribleprogram>	or into the iTunes database
Sep 12 17:41:56 <horribleprogram>	This is such a peculiar thing, so I grepped the ones that did this
Sep 12 17:42:10 <horribleprogram>	grep "Udemy Video Asset" myvid.mp4 # For example
Sep 12 17:42:32 <horribleprogram>	it says "Binary file myvid.mp4 matches"
Sep 12 17:42:42 <horribleprogram>	so there's this string within the binary file
Sep 12 17:43:59 <larryv>	horribleprogram: what is your question?
Sep 12 17:44:01 <horribleprogram>	what I seriously don't understand is this... a file (an .mp4) is on the HDD, the Filesystem calls it something
Sep 12 17:44:22 <horribleprogram>	yet it changes its name
Sep 12 17:44:51 <horribleprogram>	larryv: uhh I'll record the problem and see if you can fix it
Sep 12 17:46:14 <horribleprogram>	http://www.giphy.com/gifs/XH50CFfheZUw2uYySH
Sep 12 17:47:27 <larryv>	VLC/iTunes/whatever reads titles out of files' internal metadata
Sep 12 17:47:51 <horribleprogram>	larryv: Okay sweet, now I got the question
Sep 12 17:48:11 <horribleprogram>	I'm going to have to write a bash script that goes through each file, changing the file's internal metadata name from "Udemy Video Asset" to the actual filename
Sep 12 17:49:09 <horribleprogram>	now obviously there's binary files, but the characters "Udemy Video Asset" must be coded in there somewhere, probably at a specific location conforming to the .mp4 format
Sep 12 17:49:14 <horribleprogram>	they're*
Sep 12 17:49:32 <greycat>	They may be in a multi-byte encoding like that one Windows uses where every second byte is NUL.
Sep 12 17:50:00 <horribleprogram>	impossible
Sep 12 17:50:12 <horribleprogram>	grep worked... it should the string, so it's gotta be ASCII
Sep 12 17:50:18 <horribleprogram>	s/should/found
Sep 12 17:50:58 <horribleprogram>	ik this was a hard fix
Sep 12 17:50:59 <greycat>	If grep determines that the *file* is "binary", it will refuse to print the matching "line".
Sep 12 17:51:24 <horribleprogram>	no it shows "Binary file matches
Sep 12 17:51:25 <greycat>	It will instead say "Binary file ... matches" to let you know that it matched, but it can't show you the result because it's not safe to do so.
Sep 12 17:51:28 <horribleprogram>	yeah
Sep 12 17:51:57 <horribleprogram>	so here's what I'm going to do
Sep 12 17:52:22 <horribleprogram>	maybe a sed script that goes into each .mp4, replacing the match of "Udemy Video Asset" to the filename
Sep 12 17:52:33 <greycat>	so apparently you got lucky and the string is in an ASCII-compatible character set, rather than $'A\0s\0s\0e\0t\0'
Sep 12 17:52:39 <horribleprogram>	yeah
Sep 12 17:52:51 <horribleprogram>	what tools are available for this sort of thing
Sep 12 17:53:01 <greycat>	you could ask #ffmpeg or whatever
Sep 12 17:53:03 <greycat>	or your OS channel
Sep 12 17:53:09 <horribleprogram>	kk
Sep 12 17:53:18 <horribleprogram>	ty :) I didn't even know ffmpeg existed
Sep 12 17:55:40 <dendazen_>	Saw in someone's code func A{ export local VAR1='blah' ...}. does it even make sense?
Sep 12 17:56:48 <greycat>	TIAS.  I bet it creates an environment variable named local.
Sep 12 17:58:09 <dendazen_>	What does TIAS mean, if you don't mind me asking.
Sep 12 17:58:16 <greycat>	!tias
Sep 12 17:58:16 <greybot>	Try It And See
Sep 12 17:58:26 <dendazen_>	Thank you.
Sep 12 18:01:25 <wwilliam>	tias=aunts in spanish
Sep 12 18:01:48 <wwilliam>	could not figure the file stuff from before could not find files.
Sep 12 18:01:56 <wwilliam>	and they are there.
Sep 12 18:04:02 <dendazen_>	No, it doesn't set local as variable.
Sep 12 18:04:40 <greycat>	# f() { export local foo=bar; }; f; env | grep local
Sep 12 18:04:41 <shbot>	greycat: no output
Sep 12 18:04:59 <greycat>	# f() { export local foo=bar; declare -p local foo; }; f
Sep 12 18:05:00 <shbot>	greycat: declare -x local
Sep 12 18:05:00 <shbot>	greycat: declare -x foo="bar"
Sep 12 18:05:25 <greycat>	Well, it creates a placeholder variable named local with the -x flag on it.  If you were to assign it a value, I bet it would appear in the env.
Sep 12 18:05:40 <greycat>	# f() { export local foo=bar; }; f; local=x; env | grep local
Sep 12 18:05:41 <shbot>	greycat: local=x
Sep 12 18:05:43 <greycat>	Yup.
Sep 12 18:06:46 <dendazen_>	So that code 'export local VAR' inside the function makes no sense then.
Sep 12 18:07:30 <dendazen_>	Why most of the bash code even init scripts on linux contain so many mistakes?
Sep 12 18:08:25 <dendazen_>	I guess, it can be said for any code, not just bash.
Sep 12 18:08:59 <dendazen_>	publicly avaliable
Sep 12 18:10:39 <Soliton>	!itworks2
Sep 12 18:10:39 <greybot>	"I have no idea what I've written, but it works"
Sep 12 18:11:23 <Soliton>	barrier to entry is perhaps lowest for bash since many people use it daily even if they don't know too much about it.
Sep 12 18:15:22 <wwilliam>	OK this command found too many it looks like is not reading from logs_2019_09_10 because it found files not in that log list
Sep 12 18:15:32 <wwilliam>	while IFS= read -r file; do file=${file#./} find . -type f  -iname "$file*.done" -exec stat -c '%y===========>%n' {} \;;done < logs_2019_09_10
Sep 12 18:16:05 <emg>	well you put a *
Sep 12 18:16:24 <Soliton>	!faq echo
Sep 12 18:16:25 <greybot>	https://mywiki.wooledge.org/BashFAQ/104 -- Why doesn't foo=bar echo "$foo" print bar?
Sep 12 18:16:28 <emg>	so if the file it reads is     foo     that won't just find    foo.done    it'll also match on    foobar.done    etc.
Sep 12 18:16:57 <emg>	also you used iname so it'll find   FOO.DONE and FoObAr.DoNe etc.
Sep 12 18:17:33 <wwilliam>	this found nothing:
Sep 12 18:17:34 <Soliton>	file is only set in the env of find.
Sep 12 18:17:35 <wwilliam>	while IFS= read -r file; do file=${file#./} find . -type f  -iname "$file.done" -exec stat -c '%y===========>%n' {} \;;done < logs_2019_09_10
Sep 12 18:18:12 <emg>	Soliton: good catch
Sep 12 18:18:17 <emg>	wwilliam: file=${file#./};
Sep 12 18:18:20 <emg>	you forgot that semicolon
Sep 12 18:18:35 <wwilliam>	oh
Sep 12 18:18:37 <wwilliam>	shoot
Sep 12 18:19:13 <wwilliam>	ok that did it Thank you very much all
Sep 12 18:26:44 <wwilliam>	is there a way to input multiple logs?
Sep 12 18:27:38 <knstn>	wwilliam: yes, use systemd-journald or epylog
Sep 12 18:28:04 <knstn>	wwilliam: Oh sorry, i was missing context
Sep 12 18:28:36 <dendazen_>	would "< join my_logs*" work?
Sep 12 18:28:38 <wwilliam>	It is OK Thank you knstn
Sep 12 18:28:52 <wwilliam>	or cat them?
Sep 12 18:29:09 <Soliton>	< <(cat logs*)
Sep 12 18:29:16 <wwilliam>	Thank you.
Sep 12 18:53:36 *	Disconnected ()
**** ENDING LOGGING AT Thu Sep 12 18:53:36 2019

**** BEGIN LOGGING AT Thu Sep 12 18:54:02 2019

Sep 12 18:54:02 *	Now talking on #bash
Sep 12 18:54:02 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 12 18:54:02 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 12 18:54:02 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 12 20:00:45 <darkxploit>	I failed a ssh bash test today
Sep 12 20:03:10 <llua>	k
Sep 12 20:03:31 <Soliton>	!ssh
Sep 12 20:03:31 <greybot>	Secure SHell (#openssh, http://mywiki.wooledge.org/CategorySsh). To run rm "$localVar" remotely, use: printf 'rm %q\n' "$localVar" | ssh user@host bash
Sep 12 20:03:37 <earnestly>	run the else clause
Sep 12 20:05:00 <vishal>	die "this is how it ends"; fi
Sep 12 20:05:25 <darkxploit>	there were a HOST = ( google.com xxx.com dsds.com ) and a for loop to ping it
Sep 12 20:05:37 <Soliton>	!assignment
Sep 12 20:05:37 <greybot>	To assign to a variable, use varname=value . Do not include spaces around the '=', and do not write $varname on the left hand side.
Sep 12 20:05:38 <darkxploit>	there were several errors in the script
Sep 12 20:05:41 <greycat>	do not put spaces around = in an assignment
Sep 12 20:06:35 <earnestly>	life is one big if statement with many consequents and alternative, but all with the same final clause
Sep 12 20:06:40 <greycat>	don't use all-caps variable names (I don't know whether HOST is reserved, but HOSTNAME is), and stylistically, I would use a plural noun for the name of a list variable
Sep 12 20:06:58 <earnestly>	alternatives*
Sep 12 20:21:00 <twobitsprite>	darkxploit: job interview or something?
Sep 12 20:21:23 <darkxploit>	twobitsprite: yeahh that was a job interview
Sep 12 20:22:04 <twobitsprite>	darkxploit: were you supposed to debug an existing script with that line, or did you have to write the script and failed because you wrote that line?
Sep 12 20:22:05 <darkxploit>	i also forgot to use sort and trying to use uniq -u directly
Sep 12 20:22:26 <darkxploit>	it was debugging a script
Sep 12 20:23:27 <twobitsprite>	darkxploit: oh, yeah, those can be tricky. I usually will just run the script through "bash -x" if I can't find the issue
Sep 12 20:23:36 <darkxploit>	that twhat I did
Sep 12 20:23:36 <greycat>	oh, the goal was to find as many of the errors as you could in x minutes?
Sep 12 20:23:53 <greycat>	or was it to *fix* the script?
Sep 12 20:23:59 <darkxploit>	yeahh within less that 3 mins
Sep 12 20:24:27 <darkxploit>	well it could be more.. may be 7 mins
Sep 12 20:24:33 <darkxploit>	time went so fast
Sep 12 20:24:39 <greycat>	that's still a really brutal deadline
Sep 12 20:25:07 <twobitsprite>	arbitrary timelimits like that are a red-flag for me. I don't know if I would want to take a job with management who thought in those terms
Sep 12 20:27:16 <azonenberg_work>	Hey, so I just discovered the $(<file.txt) syntax and was wondering... is there any way to turn this off in rbash?
Sep 12 20:27:41 <lopid>	pirate bash?
Sep 12 20:27:42 <greycat>	!rbash
Sep 12 20:28:14 <greycat>	Restricted shells are such a joke that we don't even have a bot factoid for them.
Sep 12 20:28:18 <jan6>	lol
Sep 12 20:28:21 <darkxploit>	twobitsprite: I understand, but i have no choice….
Sep 12 20:28:33 <jan6>	why are they such a joke?
Sep 12 20:29:26 <greycat>	Well.  You know how chroot is such a joke that the Linux chroot(2) man page literally tells you how to bust out of one?
Sep 12 20:29:30 <greycat>	Restricted shells are even more so.
Sep 12 20:29:40 <jan6>	lol, how so?
Sep 12 20:30:02 <twobitsprite>	jan6: just look at azonenberg_work's question
Sep 12 20:30:06 <azonenberg_work>	greycat: lol, well sadly some people won't accept such recommendations
Sep 12 20:30:18 <jan6>	at least on first glance, it's not obvious how to execute custom programs ;P
Sep 12 20:30:26 <azonenberg_work>	I can't stop them from shooting themselves in the foot, but i can at least take out one or two bullets :p
Sep 12 20:30:28 <twobitsprite>	perfect example. he probably has $(cat file.txt) blocked in rbash, but just realized there's an alternative way to read a file to a variable
Sep 12 20:30:46 <greycat>	(why does he want to prevent reading a file)
Sep 12 20:31:00 <jan6>	(super seecreeet filee ;)
Sep 12 20:31:00 <twobitsprite>	in fact, I can think of a dozen ways to just read a file in to a variable off the top of my head
Sep 12 20:31:10 <greycat>	(why did he GIVE A COMMAND SHELL to a person that he doesn't want to be able to read files)
Sep 12 20:31:23 <twobitsprite>	(I just work here *shrug* :P)
Sep 12 20:31:25 <darkxploit>	azonenberg_work: can you give more details how the script is
Sep 12 20:31:30 <greycat>	It's not a script.
Sep 12 20:31:36 <greycat>	It's a user's interactive shell.
Sep 12 20:31:51 <greycat>	He wants to cripple his user.
Sep 12 20:31:55 <azonenberg_work>	Cant say too much as it's not my system, it's somebody else's
Sep 12 20:31:57 <twobitsprite>	greycat: we don't know that... it could be running arbitrary user scripts in rbash XD
Sep 12 20:32:04 <twobitsprite>	bwahahahahah
Sep 12 20:32:04 <greycat>	*plonk*
Sep 12 20:32:05 <azonenberg_work>	i'm just advising them on how to not be tooo stupid
Sep 12 20:32:23 <azonenberg_work>	and apparently "dont use rbash" isnt an option
Sep 12 20:32:27 <greycat>	"and I can't tell you why!"
Sep 12 20:33:01 <jan6>	pretty sure chroot was also never a security measure, but a utility, but has gained the reputation of one, for whatever reason
Sep 12 20:33:37 <greycat>	https://en.wikipedia.org/wiki/Restricted_shell#Weaknesses_of_a_restricted_shell
Sep 12 20:33:42 <greycat>	WIKI FUCKING PEDIA
Sep 12 20:34:07 <greycat>	I mean, that's a *lame* critique section, but still.
Sep 12 20:34:22 <jan6>	https://fireshellsecurity.team/restricted-linux-shell-escaping-techniques/ "Some of them are just normal shells with some simple common restrictions not actually configurable, such as rbash (restricited Bash), rzsh and rksh (Korn Shell in restricted mode), which are really trivial to bypass"
Sep 12 20:34:57 <greycat>	yup, that result was slightly farther down google's response for me
Sep 12 20:35:08 <jan6>	duckduckgo for me, and pretty top ;P
Sep 12 20:35:23 <jan6>	(second, right after tecmint)
Sep 12 20:36:24 <mknod>	the exception which confirms the rule
Sep 13 07:15:49 *	Disconnected ()
**** ENDING LOGGING AT Fri Sep 13 07:15:49 2019

**** BEGIN LOGGING AT Fri Sep 13 07:16:13 2019

Sep 13 07:16:13 *	Now talking on #bash
Sep 13 07:16:13 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 13 07:16:13 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 13 07:16:13 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 13 07:17:38 <alphageek>	it was a super simple routine to reverse engineer, so I included 2 routines to do precisely that. use the "md5sum" binary if it's available. if it's not, use the slower but still effective md5 routine from openssl
Sep 13 07:18:14 <alphageek>	I'm big on belt & suspenders :)
Sep 13 07:20:09 <alphageek>	3 ranked routines for transforming obfuscated path *prefixes* in scanfs. if 1 isn't available, try 2. if 2's not available, try 3. if 3's not available, whimper & cry
Sep 13 07:24:22 <alphageek>	b1tninja: not ignoring you, just yammering here & testing array/string ideas locally
Sep 13 07:25:18 <alphageek>	tbh, my current answer is "no clue"
Sep 13 07:26:26 <alphageek>	I suspect these fine folks will know
Sep 13 07:28:02 <akoana>	alphageek:  gotta leave now, good luck then with your dedup project :)
Sep 13 07:28:17 <alphageek>	thanks. tot zo!
Sep 13 07:42:38 <voldial>	How do I kill "unbuffer this_process | on_first_line_output"?
Sep 13 07:43:58 <voldial>	I tried |& head -n 1, this_process keeps running
Sep 13 07:47:53 <voldial>	it does not even need to be a line, I want to kill the process if it outputs on stdout or stderr at all
Sep 13 08:02:10 <wwalker>	I have a grep that does what I expect it to from the command line, but in a script it doesn't match.  The line is grep '^ *(source|\.)  *(/home/wwalker|\$HOME|~)/.bashrc.local' ~/.bashrc    more detail:  https://gist.github.com/wwalker/8cc26bdb625b0933011d5b5bcefdf80c
Sep 13 08:05:42 <alphageek>	welp, way past the time I should have rolled off to bed.. o/
Sep 13 08:06:03 <voldial>	here's what I have... it almost works, how do I get the pidof head? http://dpaste.com/2AK1EF7
Sep 13 08:12:16 <geirha>	wwalker: In BRE, ( and | are not special, they just match ( and |. Switch to ERE with -E
Sep 13 08:13:38 <geirha>	voldial: you can't wait for head, because it's not a direct child of your shell
Sep 13 08:14:39 <wwalker>	voldial: that's an interesting thing to do
Sep 13 08:14:43 <wwalker>	https://gist.github.com/wwalker/d715b88adbd2756bf76e44588dc7cba9
Sep 13 08:14:55 <wwalker>	should get you started on a solution voldial
Sep 13 08:15:19 <voldial>	wwalker: thx. deciphering!
Sep 13 08:15:53 <wwalker>	geirha: Thanks!  I have an alias at the prompt for grep.  It's bit me twice now.  Alias is going to die now.
Sep 13 08:15:55 <geirha>	if read -d '' -rn1 < <(ffmpeg ...); then printf 'ffmpeg output somehting\n'; fi; kill "$!"; wait "$!"
Sep 13 08:17:01 <geirha>	err, the kill should be inside the block
Sep 13 08:17:01 <wwalker>	voldial: whether you go with my syntax or with geirha 's  you can replace the program to run with "$@"
Sep 13 08:17:53 <wwalker>	DOH, i left out getting the pid.  geirha has a solution that works as is
Sep 13 08:18:07 <voldial>	got it. applying (and moving the fi;)
Sep 13 08:18:07 <wwalker>	if you want a one liner, use his.
Sep 13 08:18:50 <geirha>	so I take it ffmpeg doesn't return a useful exit status? so you have to do this terrible hack to see if it outputs error messages?
Sep 13 08:18:52 <wwalker>	If you want a generalized script, use geirha 's just replacce ffmpeg with "$@" (including the quotes!)
Sep 13 08:19:37 <wwalker>	The problem he is wanting to work around is that ffmpeg could spend hours encode video before it exits.
Sep 13 08:19:53 <geirha>	aha
Sep 13 08:20:00 <wwalker>	If it is outputing warnings, he wants it to die quick rather than after hours of encoding
Sep 13 08:20:14 <geirha>	still might if it buffers the output
Sep 13 08:20:52 <wwalker>	I don't remember if the exit codes are usefull.  Last used ffmpeg at a dead company about 10 years ago (we wrote a video player for the Play Station 2 :-)
Sep 13 08:21:37 <wwalker>	I don't think that output is buffered.  Not sure how it behaves writing to a pipe (keep that in mind voldial
Sep 13 08:22:06 <wwalker>	Thanks again for finding my stupidity geirha .  Good night all....
Sep 15 22:38:27 *	Disconnected ()
**** ENDING LOGGING AT Sun Sep 15 22:38:27 2019

**** BEGIN LOGGING AT Sun Sep 15 22:38:53 2019

Sep 15 22:38:53 *	Now talking on #bash
Sep 15 22:38:53 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 15 22:38:53 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 15 22:38:53 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 16 00:02:01 <mearon>	Hi. From within a bash script, I want to run several commands in a container. But for some reason, it doesn't work...  https://dpaste.de/gXjs/raw
Sep 16 00:02:08 <mearon>	It has probably to do with systemd-nspawn
Sep 16 00:03:08 <mearon>	so in the end I was planning to have just this in my script:  https://dpaste.de/oNss/raw
Sep 16 00:04:32 <mearon>	Probably the here document doesn't work the way I intended...
Sep 16 00:05:07 <Riviera>	mearon: perhaps check systemd-nspawn's --console option.
Sep 16 00:05:36 <mearon>	Riviera: cool, thanks!
Sep 16 00:05:51 <Riviera>	mearon: just a wild guess, it's indeed not really related to bash. :)
Sep 16 00:06:22 <mearon>	okay, sorry for that. I was not sure...
Sep 16 00:07:24 <twkm>	you probably should have started at #systemd.
Sep 16 00:08:16 <mingdao>	Just curious how one can "Press ^] three times within 1s..."
Sep 16 00:08:38 <mearon>	mingdao: It's ctrl and the ] key
Sep 16 00:19:18 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep 16 00:19:18 2019

**** BEGIN LOGGING AT Mon Sep 16 00:19:45 2019

Sep 16 00:19:45 *	Now talking on #bash
Sep 16 00:19:45 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 16 00:19:45 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 16 00:19:45 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 16 00:43:00 <Jonta>	I have some longer one-liners, with a bunch of pipes. What's the best way of separating them for readability/comments? Assigning each part to a variable seems a bit off
Sep 16 00:45:16 <Riviera>	Jonta: functions perhaps.
Sep 16 00:49:42 <Jonta>	Riviera: That seems equivalent to variables. Oh well. Variables it is :)
Sep 16 00:50:11 <mknod>	# bash -c $'echo foo | # comment\n cat'
Sep 16 00:50:13 <shbot>	mknod: foo
Sep 16 00:50:30 <mknod>	make them multi-liners?
Sep 16 00:50:46 <jan6>	^ simple, but effective ;P
Sep 16 00:50:52 <cttttt>	Riviera: well named functions can sometimes describe what cryptic commands are intended to do.
Sep 16 00:51:06 <cttttt>	Err...Jonta
Sep 16 00:51:15 <jan6>	multi-line function it is, then ;P
Sep 16 00:51:46 <cttttt>	It's almost like we're programming here....lol.
Sep 16 00:52:09 <jan6>	almost ;P
Sep 16 00:52:35 <Jonta>	mknod: Ah, that seems like what I was looking for
Sep 16 00:52:44 <Jonta>	cttttt: Well yes, but so can variable names
Sep 16 00:53:31 <jan6>	variables are meant to store DATA, not code, but you do you, I suppose
Sep 16 00:54:12 <cttttt>	Jonta: I think both go hand in hand in a well written program you intend to maintain (or have maintained by a group).
Sep 16 00:54:12 <jan6>	been here long enough to know people tend to be very set in their ways ;P
Sep 16 00:55:06 <cttttt>	If it's not written for the long term on purpose, though, make it all one line 😂😂😂
Sep 16 00:55:16 <Jonta>	jan6: variable names, not variables
Sep 16 00:56:49 <Riviera>	Jonta: you can add comments to functions
Sep 16 00:57:20 <Riviera>	Jonta: functions can be part of pipelines, contrary to variables you wouldn't require terminating programs and memory to store entire outputs.
Sep 16 00:58:30 <cttttt>	^ this. Functions describe how to do a thing and can be reused throughout your program to do the same thing.  If they actually do one thing, a proper name can even replace a comment.
Sep 16 00:59:05 <cttttt>	Variable names describe the result of some operation and only have meaning in a single context.
Sep 16 01:00:31 <Riviera>	Jonta: i find it opaque what you mean with that equivalence.
Sep 16 09:05:08 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep 16 09:05:08 2019

**** BEGIN LOGGING AT Mon Sep 16 09:05:35 2019

Sep 16 09:05:35 *	Now talking on #bash
Sep 16 09:05:35 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 16 09:05:35 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 16 09:05:35 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 16 10:05:26 <berkley>	hello
Sep 16 10:05:39 <berkley>	is it possible for bash to read a command within a file.txt?
Sep 16 10:05:55 <berkley>	inside the file.txt i have `ping -c4 127.0.0.1`
Sep 16 10:06:18 <berkley>	but i would like to execute it in `main.sh`
Sep 16 10:11:27 <_val_>	berkley: is that the only line in file.txt?
Sep 16 10:12:25 <pigeon123>	Is this posix?    find
Sep 16 10:13:59 <_val_>	!faq1 > berkley
Sep 16 10:13:59 <greybot>	berkley: https://mywiki.wooledge.org/BashFAQ/001 -- How can I read a file (data stream, variable) line-by-line (and/or field-by-field)?
Sep 16 10:14:07 <pigeon123>	Because I know Mac OS rejects
Sep 16 10:14:26 <pigeon123>	I wonder why it requires  find .
Sep 16 10:14:47 <berkley>	@_val_  lots of ping and curl commands
Sep 16 10:20:17 <_val_>	berkley: did you read faq1?
Sep 16 10:24:46 <berkley>	not yet, im still trying to code with awk before looping it
Sep 16 10:24:56 <berkley>	i saved the article
Sep 16 11:02:35 <Soliton>	pigeon123: no, that's not posix. find requires at least one path argument.
Sep 16 11:31:06 <snooky>	moin
Sep 16 11:33:15 <reactormonk>	I have a list of newline-separated stuff I want to use as stdin for a process - one line at a time, different process each time. Can xargs do that?
Sep 16 11:34:57 <pj>	reactormonk: no
Sep 16 11:35:03 <sshine>	hi reactormonk :)
Sep 16 11:36:00 <reactormonk>	sshine, o/
Sep 16 11:36:15 <sshine>	I've got a sh function, apply_filter() { if ...; then some_filter; ... else; cat; fi } # so cat is the identity filter
Sep 16 11:36:48 <pj>	reactormonk: actually yes, I think I misundestood what you want.
Sep 16 11:37:01 <pj>	you want the same program to be run but separate processes, right?
Sep 16 11:37:30 <reactormonk>	Yep
Sep 16 11:38:13 <sshine>	and now I'd like to rename this to apply_filter_inner() and wrap it in the following, apply_filter() { if grep -q '^/me '; then sed 's/^\/me //' | apply_filter_inner | sed 's/^/\/me /'; else apply_filter_inner; fi }
Sep 16 11:38:29 <pj>	yeah, look at the xargs man page, look at the -n and -L and -P args.
Sep 16 11:39:17 <geirha>	requires non-standard extensions to xargs though
Sep 16 11:39:53 <pj>	oh, and it passes the lines as args, not as stdin
Sep 16 11:40:45 <sshine>	so, for example, if apply_filter_inner() { perl -ple 'tr/a-z/A-Z/' }, then echo "/me jumps" | apply_filter # should give me back "/me JUMPS". but it gives me nothing. it's as if the output is lost somewhere around the 'if'.
Sep 16 11:40:46 <reactormonk>	pj, hmm, as stdin would make it a bit easier
Sep 16 11:40:55 <sshine>	I'll try and post a working example.
Sep 16 11:41:25 <geirha>	I'd do it with a bash loop instead
Sep 16 11:41:42 <Soliton>	sshine: grep reads the input. just remove it, seems fairly useless.
Sep 16 11:42:16 <sshine>	Soliton, oh, ok. well, if I only remove '/me ' and reinsert it afterwards, it doesn't get conditionally inserted.
Sep 16 11:42:32 <sshine>	Soliton, then echo "hello" | apply_filter becomes "/me hello".
Sep 16 11:42:34 <Soliton>	ah, you insert it again.
Sep 16 11:42:34 <pj>	reactormonk: yeah, you can do it with bash.
Sep 16 11:42:36 <geirha>	i=0; n=5; while read -r line; do if (( i++ > n )); then wait -n; fi; cmd <<< "$line" & done < infile; wait
Sep 16 11:42:50 <sshine>	Soliton, yes, I basically unwrap-rewrap '/me's.
Sep 16 11:42:56 <Soliton>	perhaps think of a better design.
Sep 16 11:43:05 <sshine>	Soliton, I'm in that process.
Sep 16 11:49:54 <sshine>	geirha, was the "I'd do it with a bash loop instead" directed at me, by the way?
Sep 16 11:50:28 <sshine>	I see that going out one layer, there is a 'while read -r line; do ...; done where this kind of manipulation might be more fitting.
Sep 16 11:52:28 <pj>	sshine: no, it was for reactormonk
Sep 16 11:52:50 <sshine>	right, I thought so.
Sep 16 11:53:08 <sshine>	what are you up to, reactormonk?
Sep 16 11:54:08 <pj>	sshine: you do realize that () after a bash function name is only for declaring the function?
Sep 16 11:55:09 <sshine>	pj, yes.
Sep 16 11:55:28 <pj>	ok, not really sure what you're trying to do with this, then: [21:40] <sshine> so, for example, if apply_filter_inner() { perl -ple 'tr/a-z/A-Z/' }, then echo "/me jumps" | apply_filter # should give me back "/me JUMPS". but it gives me nothing. it's as if the output is lost somewhere around the 'if'.
Sep 16 11:55:32 <reactormonk>	sshine, messing with elasticsearch, mostly
Sep 16 11:56:26 <sshine>	pj, I'll try and make this with a 'while', which I think I can, and I can ask again how one might do it without.
Sep 16 11:56:45 <pj>	I have to go.
Sep 16 11:56:55 <sshine>	sure.
Sep 16 11:57:36 <sshine>	reactormonk, I saw a talk by Chris Allen on bloodhound (Haskell wrapper for elasticsearch) and you have my condolences.
Sep 16 12:12:22 <zouhair>	Hi, is there a decent way to convert the "ISO 8601 duration format"  to seconds? https://www.digi.com/resources/documentation/digidocs/90001437-13/reference/r_iso_8601_duration_format.htm
Sep 16 12:12:45 <zouhair>	youtube uses it in theri API for the video duration
Sep 16 12:13:20 <zouhair>	it's a pain
Sep 16 12:14:04 <zouhair>	for ex a video of 1h 10m and 20s will be PT1h10M20S
Sep 16 12:14:44 <zouhair>	but a one with 1h and 20sec will be PT1H20S ommiting the M because it's zero
Sep 16 12:15:39 <Soliton>	!faq 100
Sep 16 12:15:39 <greybot>	https://mywiki.wooledge.org/BashFAQ/100 -- How do I do string manipulations in bash?
Sep 16 12:15:55 <zouhair>	as a noob all i could do is an multiple if/elif statements to check for each case
Sep 16 12:16:19 <zouhair>	if [[ $duration =~ ^PT([0-9]{1,})H([0-9]{1,})M([0-9]{1,})S$ ]];  for PT1H1M1S
Sep 16 12:16:24 <zouhair>	and so on and so forth
Sep 16 12:18:08 <Soliton>	just go through the string according to the format and extract the numbers.
Sep 16 12:30:47 <zamba>	hi! i have the following command to rsync only files from the last day: find . -mtime -1 -print0 | rsync -avz -0 --files-from=- . <host>:<dst_folder>
Sep 16 12:30:55 <zamba>	the problem with this command is that it syncs every file every time
Sep 16 12:31:06 <zamba>	instead of just doing what i thought rsync did - only the changes/differences
Sep 16 12:32:12 <mingdao>	zamba: /join #rsync
Sep 16 12:32:20 <zamba>	mingdao: #rsync's dead
Sep 16 12:32:41 <mingdao>	zamba: No, it's not.
Sep 16 12:33:45 <zamba>	mingdao: prove me wrong :)
Sep 16 12:34:22 <mingdao>	zamba: Just because BasketCase isn't at your beck and call doesn't mean "#rsync's dead".
Sep 16 12:34:54 <mingdao>	zamba: And...BasketCase already solved your problem in #rsync.
Sep 16 12:35:34 <mingdao>	zamba: !notbash
Sep 16 12:35:39 <mingdao>	!notbash
Sep 16 12:35:39 <greybot>	We only answer bash-related questions. Apt-get? #debian. Adding users? ##linux. Sending mail in a PHP script? #php. Makefiles? ##c or ##workingset. Complex regular expressions? #regex.
Sep 16 13:36:48 <zeroes>	I have a unit test folder. I want to run all tests in there. I can achieve this by utests/test1 && utests/test2 && ... utests/testN. Is there more automatic way with for-loop?
Sep 16 13:38:53 <nvz>	zeroes: I was just using a globbing approach to deal with sequential numbers using 00{000001..020000}.jpg to break up a large framedump into smaller more managable chunks, you could probably do something similar
Sep 16 13:39:29 <nvz>	I'd taken nearly 120,000 files and broke them up into 6 dirs of 20,000 each
Sep 16 13:40:22 <nvz>	120,000 files is way too many to work with at once, even the mv command can't handle that many arguments.. but 20,000 is totally doable :P
Sep 16 15:45:11 *	Disconnected ()
**** ENDING LOGGING AT Mon Sep 16 15:45:11 2019

**** BEGIN LOGGING AT Mon Sep 16 15:45:39 2019

Sep 16 15:45:39 *	Now talking on #bash
Sep 16 15:45:39 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 16 15:45:39 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 16 15:45:40 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 16 17:01:32 <omry>	is there anything that influences the order of displayed tab completions? I have an integration test using expect that is testing bash completion and in some environments (under an IDE) the render order of the completion is different than the one I am actually producing.
Sep 17 10:23:00 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep 17 10:23:00 2019

**** BEGIN LOGGING AT Tue Sep 17 10:23:27 2019

Sep 17 10:23:27 *	Now talking on #bash
Sep 17 10:23:27 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 17 10:23:27 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 17 10:23:27 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 17 11:10:57 <Naabs>	Hello all.
Sep 17 11:31:20 <ryszard>	hey
Sep 17 11:31:33 <ryszard>	by: "readelf -p 25 <binaryelf>" I can read section header string table of the binaryelf
Sep 17 11:32:00 <ryszard>	but now how can I write those section to separate files ?
Sep 17 11:55:21 <earnestly>	ryszard: objcopy should be able to do that
Sep 17 12:13:53 <ryszard>	earnestly: and if I have only those .bss .data .text etc files can I roll them back to the binary ?
Sep 17 12:14:36 <earnestly>	Yes
Sep 17 12:15:44 <ryszard>	relly? how?
Sep 17 12:15:55 <ryszard>	can't find it in the man
Sep 17 12:16:51 <adac>	How can I sort these kind of strings by splittin for the dash  and sorting all after 3rd dash   "v4.7.1-15-gc3327c980-79-master"
Sep 17 12:19:52 <Soliton>	tell sort to use - as separator and to use field 4.
Sep 17 12:21:08 <adac>	Soliton, tahnks
Sep 17 12:22:16 <Soliton>	i would guess you really want just field 4 as numeric though.
Sep 17 12:23:27 <ryszard>	earnestly: how can I do that ?
Sep 17 12:25:15 <earnestly>	ryszard: --add-section
Sep 17 12:25:37 <earnestly>	Or --update-section perhaps for your case
Sep 17 12:26:12 <earnestly>	ryszard: (This GNU objcopy fwiw)
Sep 17 12:26:34 <ryszard>	hmm ok let me take a look to man
Sep 17 12:28:00 <ryszard>	earnestly: then as I understand I have to add all sections one by one to build a original binary ?
Sep 17 12:28:26 <earnestly>	ryszard: You can use --*-section multiple times in the same call to objcopy
Sep 17 12:28:41 <earnestly>	ryszard: E.g. https://0x0.st/zy0y.txt
Sep 17 12:29:12 <ryszard>	interesting, will try
Sep 17 12:29:15 <ryszard>	give me a sec
Sep 17 12:34:44 <ryszard>	hmm got error
Sep 17 12:35:05 <adac>	Soliton, yes field four you are right :)
Sep 17 12:35:13 <ryszard>	# objcopy --add-section .data=.data ddd.elf results in: objcopy: 'ddd.elf': No such file
Sep 17 12:35:15 <shbot>	ryszard: bash: objcopy: command not found
Sep 17 12:37:16 <Soliton>	adac: sort -n -t- -k 4,4
Sep 17 12:40:36 <ryszard>	earnestly: in the example you provided there is one filename but as I see objcopy requires two ?
Sep 17 12:42:54 <earnestly>	ryszard: [outfile] is optional as the [] syntax denotes
Sep 17 12:43:19 <earnestly>	The manual explains what happens if you don't provide an outfile as well
Sep 17 12:43:57 <ryszard>	then to rollup those dumped parts I have to have the original binary file ?
Sep 17 12:47:52 <earnestly>	I guess, never used it without
Sep 17 12:48:10 <earnestly>	But you can experiment and try things
Sep 17 12:53:11 <docmax>	i need a regex
Sep 17 12:53:18 <docmax>	https://www.edicolanazionale.it/wp-content/jh7my-bnqb2-zxav  ->   edicolanazionale.it:443
Sep 17 12:53:23 <docmax>	in sed
Sep 17 12:55:22 <Riviera>	docmax: sed 's/http\(s\{0,1\}\):\/\/\([^/]*\).*/\2:\1/;s/$/80/;s/s80/443/'
Sep 17 12:55:38 <Riviera>	docmax: note this is not a regex but a sed script, also, there are ##sed and #regex
Sep 17 12:55:48 <Riviera>	docmax: a wait, minor correction:
Sep 17 12:56:00 <Riviera>	docmax: sed 's/http\(s\{0,1\}\):\/\/\([^/]*\).*/\2:\1/;s/$/80/;s/s80$/443/'
Sep 17 12:56:29 <ryszard>	earnestly: ok, thanks
Sep 17 12:56:59 <Riviera>	docmax: oh, and the www should also go, damn. what's that in English? Remove the first part of the host, or, keep the last two? Or, be aware of top-level-domains and keep one hierarchy higher?
Sep 17 12:58:06 <dreisner>	seems like a job for python or some other language with a URL parser.
Sep 17 12:58:53 <dreisner>	what happens when the TLD is multiple components?
Sep 17 12:59:08 <dreisner>	www.ponies.co.uk, for example
Sep 17 13:00:11 <docmax>	Riviera: thanks!!!
Sep 17 13:00:30 <Riviera>	docmax: ... see my questions? :) And dreisner's, which is one of the ones I asked. :)
Sep 17 13:00:49 <earnestly>	dreisner: Not that python can consistently get url parsing right across its different libraries
Sep 17 13:00:55 <docmax>	sorry
Sep 17 13:01:01 <docmax>	https://www.edicolanazionale.it/wp-content/jh7my-bnqb2-zxav  ->   www.edicolanazionale.it:443
Sep 17 13:01:03 <earnestly>	(Or perhaps anyone else)
Sep 17 13:01:09 <docmax>	i want the www
Sep 17 13:01:12 <Riviera>	docmax: ah, so that sed thing does that then, good. :)
Sep 17 13:01:21 <docmax>	the second?
Sep 17 13:01:33 <docmax>	sed 's/http\(s\{0,1\}\):\/\/\([^/]*\).*/\2:\1/;s/$/80/;s/s80$/443/
Sep 17 13:01:33 <Riviera>	docmax: yup
Sep 17 13:01:39 <docmax>	perfect
Sep 17 13:02:15 <docmax>	wait
Sep 17 13:02:21 <docmax>	http should be ignored!
Sep 17 13:03:00 <Riviera>	docmax: so, it should always be 443? :)
Sep 17 13:03:07 <docmax>	only if https matches
Sep 17 13:03:12 <docmax>	:443
Sep 17 13:03:14 <Riviera>	docmax: and what should happen when it's http?
Sep 17 13:03:29 <Riviera>	docmax: only the hostname?
Sep 17 13:03:33 <docmax>	if http the line shouldnt be touched
Sep 17 13:03:37 <Riviera>	docmax: ah.
Sep 17 13:03:50 <docmax>	can you rewrite please?
Sep 17 13:04:55 <Riviera>	docmax: sed 's/https:\/\/\([^/]*\).*/\1:443/'
Sep 17 13:05:02 <docmax>	thank you!!
Sep 17 13:05:07 <Riviera>	np
Sep 17 13:14:16 *	earnestly .oO(Hmm, awk -F / '$1 == "https:" {print $3 ":443"}')
Sep 17 13:22:10 <mknod>	Do you find it acceptable to rely on lexicographic order to sort date strings? (as long as they are formatted accordingly). Cannot help but feel uneasy about this.
Sep 17 13:22:27 <geirha>	yes
Sep 17 13:23:18 <earnestly>	mknod: The "formatted accordingly" was designed in such a way that they were lexical
Sep 17 13:23:53 <earnestly>	That was one of the main principles, to make lexicographical order the same as the chronological order
Sep 17 13:26:22 <mknod>	I didn't know there is a standard that was designed with this in mind (is that what you are saying?). I'm just using %Y-%m-%d out of common sense.
Sep 17 13:26:37 <geirha>	iso8601
Sep 17 13:26:59 <mknod>	Nice. Thank you both
Sep 17 13:31:30 <Riviera>	although using this date format solely for being able to have an easy time sorting is a medieval hack
Sep 17 13:32:55 <survietamine>	I use medieval hack to process gdpr cleaning :p
Sep 17 13:40:23 <mknod>	It feels like a hack when used to make programming easier, and it feels like good computer hygiene when ensuring my file system sorts naturally. So I must be biased.
Sep 17 13:59:54 <kreyren>	Looking for recommendations for Shellcheck for vim
Sep 17 14:01:08 <kerframil>	kreyren: ale, perhaps
Sep 17 14:01:14 <kreyren>	kerframil, thanks
Sep 17 14:01:22 <kerframil>	I know it has a shellcheck linter.
Sep 17 14:01:57 <earnestly>	Reinventing errorformat in viml was never better
Sep 17 14:02:50 <earnestly>	The only linter with a "battery saving mode"
Sep 17 14:08:13 <xochilpili>	hello everyone
Sep 17 14:09:17 <xochilpili>	im trying to do something like this: cat my_sample | grep $(cat another | awk -F ":" '{print $2}') | awk -F ":" '{print $1}', directly from shell, but i cant ?
Sep 17 14:10:10 <xochilpili>	 how can i grep (from a result of a cat | awk ) ?
Sep 17 14:10:29 <geirha>	might work if you quote the command substitution, but it's probably better to just do it all in a single awk
Sep 17 14:10:36 <Soliton>	!grepawk
Sep 17 14:10:36 <greybot>	Awk can do almost everything grep can do. Instead of doing grep 'foo' | awk '{ statement }', try awk '/foo/{ statement }'
Sep 17 14:10:41 <xochilpili>	geirha, what you mean?
Sep 17 14:10:54 <geirha>	awk is a powerful language
Sep 17 14:11:27 <xochilpili>	geirha, but i want to find results from one file, depending of second one
Sep 17 14:11:38 <geirha>	right, and awk can do that
Sep 17 14:11:58 <xochilpili>	any example?
Sep 17 14:13:25 <geirha>	wild guessing on what you're tring to do:  awk -F: 'FNR == NR {a[$2];next} $2 in a {print $1}' another my_sample
Sep 17 14:13:29 <Soliton>	what use is it to come up with an example if you have one? problem solving the most useless way?
Sep 17 14:17:10 <xochilpili>	geirha, thanks
Sep 17 14:17:59 <wwilliam>	Hello the following script fails from crontab the line failing is find . -maxdepth 1 -daystart -mtime 1 -name 'ing2_file_*.txt' -print when running from command line it finds the file.  any insights please?  thank you.
Sep 17 14:18:03 <wwilliam>	http://paste.debian.net/hidden/98ec7cf3/
Sep 17 14:18:17 <Soliton>	what is . in cron?
Sep 17 14:18:29 <wwilliam>	like what?
Sep 17 14:18:38 <Soliton>	ok, what is .?
Sep 17 14:19:03 <wwilliam>	I dont understand the question.
Sep 17 14:19:12 <kerframil>	literally: what does . mean?
Sep 17 14:19:20 <geirha>	as a path
Sep 17 14:19:21 <kerframil>	knowing that is key to diagnosing the issue.
Sep 17 14:19:21 <wwilliam>	present directory
Sep 17 14:19:39 <Soliton>	so what is the present directory in cron?
Sep 17 14:19:40 <kerframil>	ok, so what's the current working directory for code executed in your crontab?
Sep 17 14:19:54 <kerframil>	and what was the current working directory for "running from command line"?
Sep 17 14:20:23 <wwilliam>	wdir=/u/CCDev
Sep 17 14:20:35 <Patsie>	foo=bar!
Sep 17 14:20:43 <wwilliam>	kerframil: /u/CCDev
Sep 17 14:20:44 <geirha>	the find is on line 8, cd "$wdir" is on line 14
Sep 17 14:20:47 <geirha>	try again
Sep 17 14:20:53 <wwilliam>	ok
Sep 17 14:20:55 <wwilliam>	Thanks
Sep 17 14:32:27 <wwilliam>	it "worked" doing this but why? dont i have to declare the vars at the beggining then do the cd and the find im confused like always
Sep 17 14:32:29 <wwilliam>	cd "$wdir" || exit;
Sep 17 14:32:30 <wwilliam>	emlfl=$(find . -maxdepth 1 -daystart -mtime 1 -name "ing2_file_*.txt" -print)
Sep 17 14:32:32 <wwilliam>	echo "$emlfl"
Sep 17 14:32:50 <geirha>	I can't fathom why that is confusing
Sep 17 14:33:09 <wwilliam>	you know me im clueless.
Sep 17 14:33:26 <Soliton>	. means current dir. if you issue a cd call the meaning of . obviously changes.
Sep 17 14:33:41 <Soliton>	nothing to do with any variables.
Sep 17 14:34:02 <wwilliam>	Ok Thank you will analize.
Sep 17 14:34:11 <wwilliam>	Thank you all for your time.
Sep 17 14:47:52 <xochilpili>	geirha, dont get it, i create 2 files, file one: 1000:sample\n2000:sample1\n3000:sample3, file_two: sample:2000\ndemo:1000\nex:3000 then using awk -F: 'FNR=NR{a[$1]=$1;next} $2 in a {print $1}' file_one file_two and prints nothing
Sep 17 14:48:27 <xochilpili>	geirha, dont get it, i create 2 files, file one: 1000:sample\n2000:sample1\n3000:sample3, file_two: sample:2000\ndemo:1000\nex:3000 then using awk -F: 'FNR==NR{a[$1]=$1;next} $2 in a {print $1}' file_one file_two and prints nothing << corrected == in FNR==NR
Sep 17 14:50:26 <geirha>	# printf '1000:sample\n2000:sample1\n3000:sample3\n' > f1; printf 'sample:2000\ndemo:1000\nex:3000\n' > f2; awk -F: 'FNR==NR{a[$1]=$1;next} $2 in a {print $1}' f1 f2
Sep 17 14:50:28 <shbot>	geirha: sample
Sep 17 14:50:28 <shbot>	geirha: demo
Sep 17 14:50:28 <shbot>	geirha: ex
Sep 17 14:51:10 <geirha>	!wfm
Sep 17 14:51:10 <greybot>	Works For Me!
Sep 17 14:51:33 <xochilpili>	geirha, dont know why here is not working
Sep 17 14:51:56 <geirha>	did you create the files on windows? if so, it's the \r in its \r\n line endings that's causing trouble
Sep 17 14:52:13 <xochilpili>	geirha, no, im in linux
Sep 17 14:53:14 <timvisher>	Is there a way to emit a NUL delimited stream? i.e. I want to pipe some arbitrary command/pipeline to `xargs -0` to ensure that I don't overrun the command line length limit.
Sep 17 14:53:40 <geirha>	printf '%s\0' "${array[@]}" | xargs -0 ...
Sep 17 14:53:42 <timvisher>	The solutions I've come up with so far all leave a trailing NUL character which obviously doesn't work.
Sep 17 14:53:54 <timvisher>	Or maybe it does?
Sep 17 14:53:59 <geirha>	it should
Sep 17 14:54:03 <timvisher>	Because geirha suggested one of the ones I wanted to do.
Sep 17 14:54:06 <xochilpili>	geirha, oh i see!
Sep 17 14:54:08 <xochilpili>	:D :D
Sep 17 14:54:12 <xochilpili>	thanks!
Sep 17 14:55:11 <timvisher>	gerlo: 2 questions: 1. Won't that pass an extra arg because of the trailing NUL and 2. Will that not run afoul of the command length rule if array is very large?
Sep 17 14:55:22 <timvisher>	Or is printf being a builtin going to save me there?
Sep 17 14:56:35 <timvisher>	Nope. Actually the trailing NUL is expected.
Sep 17 14:56:36 <timvisher>	TIL
Sep 17 14:57:11 <timvisher>	So then only question 2 remains. And I'm guessing that bash will handle that for me with the builtin.
Sep 17 14:58:08 <geirha>	# printf 'foo\0bar\0' | xargs -0 printf '<%s>'
Sep 17 14:58:10 <shbot>	geirha: <foo><bar>
Sep 17 14:58:12 <ultrav1olet>	How can I `basename "$1"` only the first argument of a script which has many invocations like this which I wouldn't want to change: application "$@"
Sep 17 14:58:33 <timvisher>	So basically if I can get NUL interleaved into the stream in some way, either by reading into an array and then using printf or by some other means then I can send a pipeline to xargs -0.
Sep 17 14:58:34 <geirha>	timvisher: printf is a builtin, so it's not limited by the argmax limit
Sep 17 14:58:55 <ultrav1olet>	$1 doesn't look a variable you could change, cause without $ it's just a number :-)
Sep 17 14:59:11 <timvisher>	geirha: Thanks for confirming. That's what I expected. And I also confirmed that `find … -print0` emits a trailing NUL so `xargs -0` definitely allows for it because that's what it was designed for. :)
Sep 17 14:59:26 <geirha>	ultrav1olet: is it a bash script or sh script?
Sep 17 14:59:34 <ultrav1olet>	geirha: bash
Sep 17 14:59:59 <ultrav1olet>	(technically it's sh but sh defaults to bash in Fedora Linux)
Sep 17 15:00:02 <geirha>	ultrav1olet: then you can store them in an array
Sep 17 15:00:35 <ultrav1olet>	and change each invocation of "$@" to "$array" or something?
Sep 17 15:00:43 <geirha>	ah wait, no, if it's an sh script, don't use arrays
Sep 17 15:00:48 <geirha>	even if sh is bash
Sep 17 15:00:49 <ultrav1olet>	it's exactly what I wanted to avoid
Sep 17 15:01:16 <geirha>	tmp=$1; shift; set -- "$(basename "$tmp")" "$@"
Sep 17 15:01:34 <ultrav1olet>	wow, gonna check it right away
Sep 17 15:01:37 <geirha>	or just run your command with application "$(basename "$tmp")" "$@" instead
Sep 17 15:03:51 <ultrav1olet>	I'm hitting some infinite loop with  tmp=$1; shift; set -- "$(basename "$tmp")" "$@"
Sep 17 15:03:54 <ultrav1olet>	No idea why
Sep 17 15:04:20 <geirha>	then it's probably inside a loop
Sep 17 15:04:30 <geirha>	that's infinite
Sep 17 15:06:04 <xochilpili>	geirha, now im trying to make somethig like this as output: sample:demo\nsample1:sample using awk -F: 'FNR==NR{a[$1]=$1":"$2;next} $1 in a {print a[$1]":"$2}' sample_one sample_two
Sep 17 15:06:20 <xochilpili>	same logic, but dont get it work, what am i missing ?
Sep 17 15:07:15 <xochilpili>	# printf '1000:sample\n2000:sample1\n3000:sample3\n' > f1; printf 'sample:2000\ndemo:1000\nex:3000\n' > f2; awk -F: 'FNR==NR{a[$1]=$1","$2;next} $2 in a {print a[$1]","$1}' f1 f2
Sep 17 15:07:16 <shbot>	xochilpili: ,sample
Sep 17 15:07:16 <shbot>	xochilpili: ,demo
Sep 17 15:07:16 <shbot>	xochilpili: ,ex
Sep 17 15:07:39 <geirha>	a[$2]","$1
Sep 17 15:07:48 <xochilpili>	# printf '1000:sample\n2000:sample1\n3000:sample3\n' > f1; printf 'sample:2000\ndemo:1000\nex:3000\n' > f2; awk -F: 'FNR==NR{a[$2]=$1","$2;next} $2 in a {print a[$1]","$1}' f1 f2
Sep 17 15:07:49 <shbot>	xochilpili: no output
Sep 17 15:08:02 <xochilpili>	# printf '1000:sample\n2000:sample1\n3000:sample3\n' > f1; printf 'sample:2000\ndemo:1000\nex:3000\n' > f2; awk -F: 'FNR==NR{a[$1]=$1","$2;next} $2 in a {print a[$2]","$1}' f1 f2
Sep 17 15:08:03 <shbot>	xochilpili: 2000,sample1,sample
Sep 17 15:08:03 <shbot>	xochilpili: 1000,sample,demo
Sep 17 15:08:03 <shbot>	xochilpili: 3000,sample3,ex
Sep 17 15:08:15 <geirha>	there you go
Sep 17 15:08:29 <xochilpili>	geirha, thanks
Sep 17 15:08:54 <geirha>	now you've implemented join(1) in awk
Sep 17 15:09:31 <geirha>	though awk is arguably much more understandable than the archaic syntax of join(1), so I'd stick with awk
Sep 17 15:21:45 <xochilpili>	geirha, i will learn more about awk :D
Sep 17 15:23:09 <xochilpili>	but i have this question geirha , if i do this: a{$1}=$4":"$2;next $1 in a {print a[$2]} im not able to print column 2 of file one ?
Sep 17 15:23:34 <xochilpili>	it is saved in the array a as "sample:1234" but cant access only to 1234 ?
Sep 17 15:24:04 <greycat>	your syntax is completely messed up, to the point I can't even tell what you're trying to do
Sep 17 15:24:10 <geirha>	you can use two arrays.  a[$1]=$4;b[$1]=$2
Sep 17 15:32:11 <kurahaupo>	xochilpili: also, your habitual quoting is backwards for the shell; you should double-quote variables and other expansions,  but
Sep 17 15:32:12 <kurahaupo>	ordinary text need not be quoted (though you may if you wish).
Sep 17 15:32:17 <kurahaupo>	xochilpill: So the colon is the one part of your text that *doesn't* need quoting; the variable expansions of either side of it are what should be quoted.
Sep 17 15:32:33 <wwilliam>	http://paste.debian.net/1101234/
Sep 17 15:32:41 <greycat>	but in awk, ":" is correct for a literal string
Sep 17 15:33:08 <greycat>	it might have been *really* hard to tell because of how broken the syntax was, but xochilpili was trying to write awk there.
Sep 17 15:33:12 <kurahaupo>	Ah, didn't read that far back
Sep 17 15:33:25 <geirha>	yeah, it was meant to be awk syntax, but pretty broken at that too
Sep 17 15:34:06 <greycat>	(although it's academic if the actual goal is to store two values per line, in two arrays, as geirha hinted)
Sep 17 15:34:20 <kurahaupo>	(that explains why neither of you mentioned it)
Sep 17 15:36:39 <kurahaupo>	wwilliam: same way that you would pipe between any other two commands. just make sure that function has been defined first
Sep 17 15:36:57 <wwilliam>	Thank you kurahaupo
Sep 17 15:37:37 <kurahaupo>	wwilliam: it pays to put a synopsis of your question in the channel; don't assume anyone will read a paste with no explanation
Sep 17 15:38:00 <wwilliam>	Sorry.
Sep 17 15:47:17 <wwilliam>	kurahaupo: the function is in /root/.bashrc i am getting this:
Sep 17 15:47:19 <wwilliam>	++ fndlgs
Sep 17 15:47:20 <wwilliam>	./testfind: line 2: fndlgs: command not found
Sep 17 15:47:49 <greycat>	why would you expect a script to be able to execute a function that's in root's .bashrc file?
Sep 17 15:48:00 <greycat>	did your script source that file?
Sep 17 15:48:13 <wwilliam>	no greycat
Sep 17 15:48:17 <geirha>	.bashrc is only for setting up interactive shells
Sep 17 15:48:26 <geirha>	when your shell runs a script, it's non-interactive
Sep 17 15:48:37 <forgon>	 /buffer 3
Sep 17 15:48:39 <wwilliam>	Thank you.
Sep 17 15:50:12 <greycat>	One of the basic objectives in programming (which includes shell scripts) is being able to count on the behavior of a program, without having to guess whether any of dot files in some user's directory will change that behavior.
Sep 17 15:50:50 <greycat>	There are places where this ideal does not hold up (exported functions, for example), but generally speaking, you should be able to tell what a script will do by reading ONLY the script.
Sep 17 15:53:56 <alsaiduq>	hey guys, i want o diff the output of `mount` and cat /etc/mtab
Sep 17 15:54:09 <alsaiduq>	cat /etc/mtab | diff < $(mount)
Sep 17 15:54:27 <greycat>	diff -u <(sort /etc/mtab) <(mount | sort)
Sep 17 15:54:31 <kurahaupo>	alsaiduq: reverse them
Sep 17 15:54:32 <alsaiduq>	i'm trying this command but it's giving ambiguios redirection
Sep 17 15:54:47 <greycat>	!<(
Sep 17 15:54:47 <greybot>	Process Substitution: <(command) or >(command) is replaced by a FIFO or /dev/fd/* entry. Basically shorthand for setting up a named pipe. See <http://mywiki.wooledge.org/ProcessSubstitution>. Example: diff -u <(sort file1) <(sort file2)
Sep 17 15:56:04 <kurahaupo>	alsaiduq: the filename given to the < redirection operator must be quoted if it contains spaces, which the output of mount is likely to
Sep 17 15:56:20 <greycat>	no, the bugs are deeper than that
Sep 17 15:56:33 <kurahaupo>	alsaiduq: <$(…) is almost always wrong
Sep 17 15:56:45 <greycat>	they tried to redirect two different stdin streams to one diff command, and the second one wasn't even syntactically correct
Sep 17 15:57:02 <greycat>	diff needs to *file name arguments*.
Sep 17 15:57:06 <greycat>	two
Sep 17 15:57:18 <greycat>	<() is a filename.  < "$(cmd)" is not.
Sep 17 15:57:26 <kurahaupo>	mount | diff - /etc/mtab
Sep 17 15:57:53 <greycat>	and this will work without sorting...?
Sep 17 15:58:14 <greycat>	*shrug* I guess that's an OS channel question
Sep 17 15:59:15 <kurahaupo>	alsaiduq: the mtab file often contains additional options that are not reflected in the information that mount gets from the kernel; eg the "user" option that allows the owner of the directory to unmount it, as well as root
Sep 17 16:00:04 <kurahaupo>	Or, on some systems, 'mount' simply prints the contents of mtab, so the comparison would be pointless
Sep 17 16:00:23 <greycat>	wooledg:~$ grep /dev/sda3 /etc/mtab
Sep 17 16:00:23 <greycat>	/dev/sda3 /boot ext4 rw,relatime 0 0
Sep 17 16:00:23 <greycat>	wooledg:~$ mount | grep /dev/sda3
Sep 17 16:00:23 <greycat>	/dev/sda3 on /boot type ext4 (rw,relatime)
Sep 17 16:00:30 <greycat>	On mine, every single line is different.
Sep 17 16:01:09 <kurahaupo>	I'm not surprised…
Sep 17 16:02:11 <alsaiduq>	kurahaupo yes, that's why I've though about diffing them, to check their difference
Sep 17 16:02:20 <alsaiduq>	on mine every single line is different as well
Sep 17 16:02:33 <kurahaupo>	Linux makes it really entertaining, where a single fs can be mounted concurrently in two places AND a single directory can have multiple mounts stacked on it
Sep 17 16:02:35 <alsaiduq>	but I didn't know that
Sep 17 16:03:47 <alsaiduq>	isn't dangerous to mount a single fs concurrently in two different places?
Sep 17 16:03:52 <alsaiduq>	kurahaupo
Sep 17 16:03:56 <greycat>	ask your OS channel
Sep 17 16:04:24 <kurahaupo>	not in Linux; the kernel merely makes both mount points refer to the same instance of the fs driver
Sep 17 16:04:42 <kurahaupo>	on other OSes, yes, that would be terrible
Sep 17 16:05:16 <kurahaupo>	oh except for ocfs, which is supposed to be used that way
Sep 17 16:06:15 <kurahaupo>	alsaiduq: it would be dangerous to mount an fs using multiple kernels, such as Xen guests
Sep 17 16:06:49 <kurahaupo>	but not multiple containers that share one kernel
Sep 17 16:09:26 <kurahaupo>	(I have mount -t tmpfs mytmpfs ~/tmp in my .profile; arranging not to stack multiple mounts is actually tricky in Linux)
Sep 17 16:09:28 <alsaiduq>	kurahaupo i though Xen, for example, wouldn't modify a kernel at the point of chaing its fs mounting guidelines
Sep 17 16:09:35 <alsaiduq>	changing*
Sep 17 16:10:21 <kurahaupo>	alsaiduq: each guest has its own kernel, and a separate instance of the fs driver within each kernel; that's where the danger lies
Sep 17 16:10:44 <kurahaupo>	even if they are identical kernels, they are separate instances
Sep 17 16:11:56 <kurahaupo>	but Xen generally stops you from sharing a "block device" between guests unless you ask extra nicely, so you're unlikely to encounter the problem
Sep 17 16:11:59 <greycat>	depending on which VM machinery is in use, guests may have their own kernels, or they may share the host's kernel
Sep 17 16:12:06 <greycat>	this is getting way off topic
Sep 17 16:12:11 <kurahaupo>	indeed
Sep 17 16:13:32 <kurahaupo>	alsaiduq: continue this in pm if you wish
Sep 17 16:27:49 <oskie>	acmc
Sep 17 16:59:58 <InnerUbuntu>	Is there a way to redirect stdout to a file, but at the same time keep printing it in the terminal?
Sep 17 17:00:03 <greycat>	tee
Sep 17 17:00:37 <InnerUbuntu>	ok but what if I have to stop the stdout stream by using CTRL+C
Sep 17 17:00:46 <InnerUbuntu>	tee doesnt write anything to the file
Sep 17 17:00:57 <greycat>	!faq buffer
Sep 17 17:00:57 <greybot>	https://mywiki.wooledge.org/BashFAQ/009 -- What is buffering?  Or, why does my command line produce no output: tail -f logfile | grep 'foo bar' | awk ...
Sep 17 17:01:13 <InnerUbuntu>	:)
Sep 17 17:01:17 <InnerUbuntu>	thx
Sep 17 17:01:36 <greycat>	you'll have to find some way to stop your long-running-expects-to-be-killed command from buffering stdout when it's being piped
Sep 17 17:02:14 <InnerUbuntu>	thanks again :)
Sep 17 17:23:12 <arinov>	september... the stdin/stdout questions period
Sep 17 17:23:40 <alsaiduq>	lmao
Sep 17 17:23:42 <arinov>	the next will be grep, cut, awk, then lvm
Sep 17 17:23:50 <greycat>	Every month is frequently asked questions month.
Sep 17 17:24:01 <arinov>	in december it will bash syntax
Sep 17 17:24:36 <arinov>	greycat: its a student course relative
Sep 17 17:25:00 <arinov>	greycat: they starts from pipes and in december they will code something in bash
Sep 17 17:26:08 <alsaiduq>	they questions are just done gradually for you guys don't quickly grasp it's student course relative lol
Sep 17 17:26:40 <alsaiduq>	but i don't judge, i do those questions as well
Sep 17 17:28:37 <arinov>	its always interesting to answer for myself, so the channel is a generator of interesting questions
Sep 17 17:31:35 <alsaiduq>	we go through a loop of interesting and previously answered questions, which keep us remembering the concepts
Sep 17 17:31:38 <alsaiduq>	learning by spaced repetition
Sep 17 17:36:46 <bashquest>	hello. i did a bash test on the internet and i failed. feels a bit depressing. like i overestimated myself. however. come over it.
Sep 17 17:36:52 <bashquest>	btw, i have question
Sep 17 17:36:59 <bashquest>	declare file_name="$(basename ""${media}"")"
Sep 17 17:37:04 <bashquest>	why is this not working?
Sep 17 17:37:11 <greycat>	!quotes
Sep 17 17:37:11 <greybot>	http://mywiki.wooledge.org/Quotes
Sep 17 17:37:13 <bashquest>	how to do that with quotes
Sep 17 17:37:39 <greycat>	!forget quotes
Sep 17 17:37:39 <greybot>	OK, greycat
Sep 17 17:37:40 <greycat>	!learn quotes https://mywiki.wooledge.org/Quotes
Sep 17 17:37:40 <greybot>	OK, greycat
Sep 17 17:37:41 <bashquest>	cant u just say whats from with my quotes ... ? im just concatenating strings
Sep 17 17:37:46 <bashquest>	dude
Sep 17 17:37:56 <bashquest>	it works inline on the command line but not in a script
Sep 17 17:37:58 <bashquest>	why
Sep 17 17:38:00 <bashquest>	dude, why
Sep 17 17:38:15 <greycat>	What you've written is wrong.  We have a page that explains why.
Sep 17 17:38:45 <greycat>	It's about 60% of the way down.  I could add an anchor, but that's a pain.
Sep 17 17:39:03 <greycat>	using the natural anchors already in the wiki... it's at https://mywiki.wooledge.org/Quotes#line-129
Sep 17 17:39:52 <bashquest>	oh thank you nevertheless, for the anchor, greycat ... !
Sep 17 17:40:18 <greycat>	I strongly recommend reading the whole page.
Sep 17 17:40:33 <bashquest>	looks like you dont have to concat strings when "$()"? the interpreter is really that smart?
Sep 17 17:45:15 <kerframil>	this was explained in excruciating detail on the last occasion this same question was asked. between that and the linked page, you have all the information that's needed.
Sep 17 17:45:59 <greycat>	Every day is quotes day.
Sep 17 17:46:57 <bashquest>	i want do to it perfectly you know... and i want to avoid e.g. glob-hacks or the like to you know...
Sep 17 17:47:10 <kerframil>	but it's not every day you get your explanations thrown back in your face with constant, erroneous, contradictory statements.
Sep 17 17:47:15 <kurahaupo>	bashquest: unlike other languages you've used, quotes DON'T delimit strings
Sep 17 17:47:23 <greycat>	kerframil: *cough*
Sep 17 17:47:25 <kerframil>	he thinks there's a "glob exploit", if written the correct way.
Sep 17 17:47:26 <greycat>	it... is.
Sep 17 17:48:49 <kerframil>	even though it's his incantation that has an unquoted expansion of the variable.
Sep 17 17:49:01 <greycat>	The hardest part of offering support in this channel is that people come in here with serious misunderstandings about extremely fundamental, important things.
Sep 17 17:49:03 <bashquest>	yeah, i know, burnout is a real problem in ICT
Sep 17 17:49:11 <bashquest>	thank you nevertheless
Sep 17 17:49:17 <bashquest>	i guess, i learned something new
Sep 17 17:49:22 <kerframil>	you didn't. that's the problem.
Sep 17 17:49:30 <bashquest>	burnout.
Sep 17 17:49:36 <bashquest>	thats your problem,.
Sep 17 17:50:58 <kerframil>	!b18
Sep 17 17:50:58 <greybot>	The newbie will not accept the answer you give, no matter how right it is.
Sep 17 17:52:12 <greycat>	wooledg:~$ args 'one' "two" $'three'
Sep 17 17:52:12 <greycat>	3 args: <one> <two> <three>
Sep 17 17:52:13 <greycat>	wooledg:~$ echo "$(args 'one' "two" $'three')"
Sep 17 17:52:13 <greycat>	3 args: <one> <two> <three>
Sep 17 17:52:43 <greycat>	inside "$(...)" you quote exactly the way you would if the "$(...)" were not present
Sep 17 17:54:16 <bashquest>	such a dumb bot.
Sep 17 17:54:28 <bashquest>	who has the longest penis community, huh?
Sep 17 17:54:41 <greycat>	... what the hell are you talking about now?
Sep 17 17:54:49 <kerframil>	greycat: I tried to warn you.
Sep 17 17:54:50 <bashquest>	sorry that i need to read a book five to three times to understand it properly
Sep 17 17:55:23 <bashquest>	i will... hack you! dumbasses!
Sep 17 17:55:26 *	bashquest is kidding
Sep 17 17:57:06 <Soliton>	perhaps you should concentrate on solving/understanding your issue instead of acting like you don't deserve any attention.
Sep 17 17:57:19 <bashquest>	i had a mentor who put me all the lucid explanations into my throat.
Sep 17 17:57:28 <bashquest>	unfortunately hes dead now. car accident.
Sep 17 17:57:44 <bashquest>	amen
Sep 17 17:59:02 <polyzen>	okay then
Sep 17 17:59:52 <kerframil>	a cyber-stalker in the making.
Sep 17 18:04:26 <timvisher>	Whoa. Had not heard of `args` before.
Sep 17 18:04:38 <greycat>	it's not a standard command.  it's a script.
Sep 17 18:04:46 <greycat>	#!/bin/sh
Sep 17 18:04:47 <greycat>	printf "%d args:" "$#"
Sep 17 18:04:47 <greycat>	printf " <%s>" "$@"
Sep 17 18:04:47 <greycat>	echo
Sep 17 18:04:55 <timvisher>	Oh so you're not using https://manpages.debian.org/stretch/ucommon-utils/args.1.en.html?
Sep 17 18:05:23 <greycat>	no.
Sep 17 18:05:32 <timvisher>	I guess that should've been obvious by your next statement. :)
Sep 17 18:05:58 <timvisher>	I have often wanted something like that when demonstrating word splitting gotchas to coworkers. :)
Sep 17 18:06:34 <greycat>	it's on  http://mywiki.wooledge.org/WordSplitting  also
Sep 17 18:07:31 <timvisher>	I have also managed never to read this wiki page…
Sep 17 18:07:34 *	timvisher sighs
Sep 17 18:07:41 <timvisher>	So much to do.
Sep 17 18:07:48 <greycat>	it's not one of the common ones
Sep 17 18:09:49 <davidfetter_work>	Is there some kind of guideline for when something's gotten too big to be a bash program? I was thinking one of them might be when I start looking for ways to do the things getopt_long does.
Sep 17 18:10:25 <greycat>	I can't imagine there will ever be any kind of consensus over what language to use for each thing.
Sep 17 18:10:41 <OMGOMG>	i think when you start looking for guidelines it's a good sign already
Sep 17 18:10:54 <davidfetter_work>	I specifically didn't mention a particular alternative
Sep 17 18:11:12 <timvisher>	davidfetter_work: Mine is always the moment I think to myself 'I should rewrite this in a better language.' which is always followed directly by the 'Shoot this is too big to rewrite now.' thought.
Sep 17 18:11:26 <Soliton>	rather than too big i would switch when you want features bash doesn't have.
Sep 17 18:11:33 <Soliton>	!weakness
Sep 17 18:11:33 <greybot>	http://mywiki.wooledge.org/BashWeaknesses
Sep 17 18:12:05 <davidfetter_work>	yeah, I've hit #2 more often so far than #1
Sep 17 18:12:19 <davidfetter_work>	(partly because when I'm going for #1, I'm mostly thinking C)
Sep 17 18:12:45 <Soliton>	there is a lot between bash and c performance wise.
Sep 17 18:13:56 <davidfetter_work>	of course. It's just that by the time I'm thinking about performance on a green field project, I'm already looking at C.
Sep 17 18:14:39 <timvisher>	The thing is there's always a way to force it to work in bash, even if you are reinventing wheels language X has built in. My problem is always that my scripts grow from tiny little things in unexpected ways and the moment I'm one hack too far it's too late.
Sep 17 18:16:08 <davidfetter_work>	I guess I've been lucky that way so far. When a bash program I've written needs to grow in any significant way, I figure I got the design wrong.
Sep 17 18:16:36 <timvisher>	davidfetter_work: You sound more discipline than me. :)
Sep 17 18:16:46 <davidfetter_work>	Just lazier
Sep 17 18:16:46 <timvisher>	disciplined*
Sep 17 19:07:18 <dwts>	hi all, I have a question supposing that I have a file /etc/my-jvm-opts where I set some options in a bash string like this: JAVA_OPTS="my_opts_here" and then from another script I `source /etc/my-jvm-opts`. If I run `java $JAVA_OPTS` everything runs fine. If I run `java "$JAVA_OPTS"` I get heap-related errors
Sep 17 19:07:35 <dwts>	any ideas why the double quotes mess the behaviour of the script in this context ?
Sep 17 19:07:50 <dwts>	I thought taht it's always a good practice to double quote variables ?
Sep 17 19:08:01 <dwts>	s/taht/that
Sep 17 19:08:45 <greycat>	You're trying to store a list of argument words in a string variable.  This is never going to work in the general case.  You *might* be able to get away with it if you can guarantee that no argument word contains whitespace or globbing chars.
Sep 17 19:09:09 <dwts>	the word contains spaces and dashes :P
Sep 17 19:09:12 <greycat>	The only generalized alternative is to store the arguments in an array, which means sh can't do it.
Sep 17 19:09:39 <twkm>	sounds like you need to export the variable.
Sep 17 19:09:46 <dwts>	greycat: so basically the spaces and special characters like - break things for me?
Sep 17 19:10:05 <dwts>	twkm: I'm exporting the variable in the /etc/my-jvm-opts file
Sep 17 19:10:18 <greycat>	- is not a globbing character.  * and ? and [ are.
Sep 17 19:10:48 <dwts>	hmmm, I don't think I'm using any chars like these, only spaces and dashes
Sep 17 19:10:58 <dwts>	greycat: is this documented somewhere in the bash manual?
Sep 17 19:11:04 <greycat>	Are there spaces *inside* any of your arguments, like CFLAGS="-g -O" ?
Sep 17 19:11:15 <greycat>	Is what documented?  How word splitting works?  Yes.
Sep 17 19:11:21 <greycat>	In a trillion places.
Sep 17 19:11:36 <dwts>	greycat: yes it's like the CFLAGS example
Sep 17 19:11:41 <greycat>	Then you cannot do it in sh.
Sep 17 19:11:50 <greycat>	If your /etc/java-whatever is read by an sh script, you are fucked.
Sep 17 19:12:02 <dwts>	but I'm using bash not posix scripts
Sep 17 19:12:04 <greycat>	If your JAVA_OPTS is exported as an environment variable, you are fucked.
Sep 17 19:12:10 <dwts>	hmmmm
Sep 17 19:13:33 <superboot>	Hi all. I'm writing a loop to find the most recently changed file in locates output:    x=0 max=0 locate duke| grep -i energy | while read line; do x=$(stat -c %Y "$line"); if [[ "$x" -gt "$max" ]]; then max="$x"; f=$line; fi; done; echo "$max"; echo $f;       This outputs nothing. I can see x, max, and f, are all asigned to if I run this under bash -x. Why are they not surviving the loop?
Sep 17 19:13:46 <dwts>	greycat: so, my best alterative is creating a bash array of strings with each element being a single "CFLAG" ?
Sep 17 19:13:50 <superboot>	I'm all ears if there is an easier way to do this.
Sep 17 19:13:57 <greycat>	!faq disappear > superboot
Sep 17 19:13:57 <greybot>	superboot: https://mywiki.wooledge.org/BashFAQ/024 -- I set variables in a loop that's in a pipeline. Why do they disappear after the loop terminates? Or, why can't I pipe data to read?
Sep 17 19:14:20 <superboot>	greycat: Awesome! Thanks.
Sep 17 19:14:28 <greycat>	dwts: I don't know what you're designing here.  The ALL_CAPS_NAME implies an environment variable.
Sep 17 19:14:53 <dwts>	greycat: you are correct, what other information would you need to help me?
Sep 17 19:15:12 <greycat>	If it's an environment variable, you are fucked.  Start over.  Throw everything away.
Sep 17 19:15:23 <dwts>	lol, ok
Sep 17 19:15:31 <greycat>	An environment variable is a string, never an array.  You can't store a list of strings in an string.  There's no way to tell where each one ends.
Sep 17 19:15:40 <dwts>	so, if i throw things away, how can I properly start over?
Sep 17 19:15:43 <twkm>	dwts: your discussion does not state that you did.
Sep 17 19:15:48 <greycat>	What are you trying to do?
Sep 17 19:16:27 <dwts>	I'm having an /etc file which holds env variables. This /etc file is sourced by a script that starts a java service
Sep 17 19:16:50 <dwts>	the variables are java options to be passed to the java executable
Sep 17 19:16:55 <dwts>	to start the java service
Sep 17 19:17:05 <dwts>	does that help ?
Sep 17 19:17:21 <greycat>	Consider alternatives like "instead of passing arguments in an environment variable, I'll have a special file that lists the arguments one per line".
Sep 17 19:17:46 <dwts>	greycat: ok, I can give that a try I guess
Sep 17 19:17:47 <greycat>	Or "I'll write a wrapper script that invokes jave --foo="bar quux" and make my service use that."
Sep 17 19:18:07 <dwts>	lol that also helps
Sep 17 19:18:22 <dwts>	I'llgive a try.
Sep 17 19:18:23 <dwts>	thanks
Sep 17 19:18:42 <greycat>	Or "instead of configuring my service with an environment variable that comes from outside the run script, I'll put the java arguments IN the run script".
Sep 17 19:19:04 <dwts>	can you guys remember which bash manual section would allow me to see that what I was doing so far is wrong?
Sep 17 19:19:20 <greycat>	https://mywiki.wooledge.org/WordSplitting
Sep 17 19:19:26 <dwts>	greycat: I would actually do that greycat
Sep 17 19:19:30 <dwts>	but I didnt write the script
Sep 17 19:19:35 <dwts>	I'm trying to fix it though :P
Sep 17 19:20:04 <dwts>	the person that wrote the script has a general /etc file with all the jvm options (for different java services) :P
Sep 17 19:20:27 <dwts>	your latest suggestion would be my goto option most likely
Sep 17 19:21:23 <philipp64>	hi. I’ve got a script that’s mysteriously stopping execution midway.  I’m not using -e.  I’ve tried tracing it with -x and there’s nothing obvious. Is there a simple way to set up a handler (signal or err) that would give me more insight as to why it’s dying?  Any examples out there someone could point to or an pastebin?  Thanks
Sep 17 19:21:30 <dwts>	greycat: and twkm thank you very much for your time
Sep 17 19:21:32 <dwts>	cheers
Sep 17 19:22:34 <greycat>	Bash only stops running your script if you call exit, or if you exec something else, or if you have set -e or set -u in effect and trigger it, or if bash dies from a fatal syntax error (can't continue parsing).
Sep 17 19:23:10 <greycat>	Or, I suppose, if you send it a signal externally.
Sep 17 19:23:24 <greycat>	We can't rule that out yet.
Sep 17 19:23:28 <twkm>	what's the last thing that is show in your xtrace?
Sep 17 19:23:34 <twkm>	shown.
Sep 17 19:26:52 <philipp64>	greycat: what about a signal, such as SIGPIPE?
Sep 17 19:27:50 <greycat>	I'm counting that as external.
Sep 17 19:28:48 <philipp64>	It dies as: https://paste.fedoraproject.org/paste/eg3H7CxY~gm-B0JKpGzTSA/
Sep 17 19:31:10 <greycat>	If this is a bash script, rather than an sh script, a single EXIT trap is preferred over trapping individual signals like that.
Sep 17 19:31:37 <twkm>	nothing obvious there.  you'll probably need to [dkls]trace/truss it.
Sep 17 19:31:48 <greycat>	Is there any chance that this is being executed and then terminated, e.g. by a timeout command or other strict resource limit?
Sep 17 19:33:03 <philipp64>	well, it’s on CentOS 6 and it says “#!/bin/sh” but’s a link to bash… though I don’t know if bash detects it’s being invoked as “sh” and behaves differently or not.
Sep 17 19:33:12 <twkm>	it does.
Sep 17 19:33:27 <philipp64>	how so?
Sep 17 19:33:39 <llua>	tries to conform closer to the posix standard
Sep 17 19:34:06 <Soliton>	!sh
Sep 17 19:34:06 <greybot>	sh is NOT bash; it is a POSIX or Bourne shell. To run bash code, your script MUST use a bash shebang, and it MUST be executed directly or with bash (NOT sh myscript). Sometimes /bin/sh symlinks to bash, but you can't rely on this and it will disable many bash features. <http://mywiki.wooledge.org/BashGuide/Practices#Choose_Your_Shell>
Sep 17 19:35:02 <llua>	man bash | col -b | awk '/a description of posix mode/'
Sep 17 19:35:06 <llua>	to be more specific
Sep 17 19:35:37 <greycat>	invoking as sh isn't fully posix mode, though
Sep 17 19:35:56 <greycat>	pretty close, though.
Sep 17 19:37:17 <dwts>	that sh info is interesting
Sep 17 19:37:39 <dwts>	I thought that it didnt matter because of the symlink to bash
Sep 17 19:37:42 <dwts>	TIL I guess
Sep 17 19:41:58 <philipp64>	hmmm… I trap EXIT but that handler isn’t being called… I trap ERR and that doesn’t happen either.
Sep 17 19:42:17 <greycat>	In sh, the EXIT trap is not called when terminated by a signal.
Sep 17 19:42:31 <greycat>	That's why I said "If this is a bash script, rather than an sh script"
Sep 17 19:43:04 <philipp64>	okay, assuming the quasi-posix mode of being invoked as “sh”, how do I get my smoking gun?
Sep 17 19:43:24 <greycat>	How does this script get executed?
Sep 17 19:45:07 <philipp64>	greycat: looking…
Sep 17 19:46:25 <twkm>	[repeat:] nothing obvious there.  you'll probably need to [dkls]trace/truss it.
Sep 17 19:47:09 <greycat>	even doing that will likely require some intervention in the parent, so they still have to track down how it gets executed
Sep 17 19:53:29 <kodachi>	I got a couple of files, their names are like: test.sh.save1 test.sh.save2 and test.sh.save3
Sep 17 19:53:43 <kodachi>	Now how do I use a search pattern with rm to delete them?
Sep 17 19:53:49 <kodachi>	the pattern should look for save
Sep 17 19:53:57 <greycat>	rm test.sh.save*
Sep 17 19:54:12 <kodachi>	Ah
Sep 17 19:54:23 <kodachi>	How do I use the other notations like [] and the other one
Sep 17 19:54:43 <greycat>	!glob
Sep 17 19:54:43 <greybot>	Globs are shell patterns that can be used for matching strings or expanding pathnames: [[ $name = Bob* ]]; rm -- *.txt; see http://mywiki.wooledge.org/glob
Sep 17 20:03:48 <bashtux>	hello all, what is the recommended way to post code here if i wanted guidance? i dont want to breaking any posting rules
Sep 17 20:04:32 <earnestly>	!paste
Sep 17 20:04:32 <greybot>	Paste short snippets (<= 5 lines) in channel. Paste more using https://gist.github.com/ or http://paste.debian.net/ or see !ix or !sprunge. Please don't use pastebin.com -- it's full of ads and mangles whitespace. NEVER upload screen shots. Don't use a paste site that requires Javascript, or registration to view raw.
Sep 17 20:04:45 <greycat>	If it's one line you have a question about, just paste the line here, and ask the question.  If it's longer, you can use a TEXT BASED paste site, but many of us won't bother reading it.
Sep 17 20:05:35 <bashtux>	thanks guys
Sep 17 20:05:37 <bashtux>	https://gist.github.com/natemcmaster/5e36e3953c586e4b407a7bb9316b8772
Sep 17 20:05:50 <bashtux>	im still quite novice at bash
Sep 17 20:05:52 <twkm>	!check
Sep 17 20:05:52 <checkbot>	bashtux: Line 3: < is for string comparisons. Use -lt instead. Line 12: Double quote to prevent globbing and word splitting. Line 31: Double quote to prevent globbing and word splitting. See https://shellcheck.net/?id=cb43552 for all 9 issues.
Sep 17 20:06:27 <bashtux>	so the fuction in that script....
Sep 17 20:06:40 <bashtux>	 [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
Sep 17 20:07:17 <bashtux>	i get most of what its doing, accept the very last or ||
Sep 17 20:07:21 <greycat>	!pf ||
Sep 17 20:07:21 <greybot>	https://mywiki.wooledge.org/BashPitfalls#pf22 -- Don't do this! -- cmd1 && cmd2 || cmd3
Sep 17 20:08:06 <greycat>	It appears to be trying to convert a relative path, given as an argument, to an absolute path, by assuming that its notion of the current working directory can be concatenated with the argument and produce something viable.
Sep 17 20:08:15 <greycat>	It'll probably work most of the time.
Sep 17 20:08:41 <greycat>	I probably can't say anything that will make you stop doing this, especially since apparently you did not WRITE this script, since you don't even understand it.
Sep 17 20:09:29 <bashtux>	no i have no need for it.....im purely looking at examples and seeing what i can comprehend from given scripts....
Sep 17 20:09:47 <bashtux>	so thank you for the explanation and guidance
Sep 17 20:10:13 <greycat>	!crap
Sep 17 20:10:13 <greybot>	The overwhelming majority of bash scripts, code, tutorials, and guides on the Internet are crap. Sturgeon was an optimist.
Sep 17 20:11:13 <bashtux>	is there any good resources you can recommend to start at with bash.....im just doing this for personal gain...no work related or anything
Sep 17 20:11:19 <greycat>	!guide
Sep 17 20:11:19 <twkm>	funnily enough we point to a guide and the manual on the internet.
Sep 17 20:11:19 <greybot>	http://mywiki.wooledge.org/BashGuide or in PDF: http://s.ntnu.no/bashguide.pdf
Sep 17 20:11:28 <bashtux>	i would just love to start better understanding bash
Sep 17 20:12:04 <bashtux>	thank you very much!
Sep 17 20:14:53 <bashtux>	probably a stupid question for you guys :) , i have no real programming knowledge so this is probably why i ask..... i have seen -echo some text blah and then i have seen echo "some text blah"
Sep 17 20:15:01 <bashtux>	when do you and dont you use the "" ?
Sep 17 20:15:09 <greycat>	!quotes
Sep 17 20:15:10 <greybot>	https://mywiki.wooledge.org/Quotes
Sep 17 20:15:47 <bashtux>	thanks ;)
Sep 17 20:16:35 <Jonta>	Best practices for printf-ing source code? I want to try having a script that prints the syntax of common shell-things. Also: Syntax highlighting on that would be nice, but tput setaf everywhere seems a bit cumbersome
Sep 17 20:16:49 <greycat>	!pretty
Sep 17 20:16:49 <greybot>	"Pretty-print" your bash code: pretty() { printf 'pretty() { %s\n }; declare -f pretty' "$(cat)" | bash | sed '1d;2d;$d;s/^ //'; } ## Usage: pretty < myscript
Sep 17 20:16:50 <greycat>	that?
Sep 17 20:17:12 <Jonta>	Testing…
Sep 17 20:19:57 <kerframil>	or use --pretty-print if you have >=5.0
Sep 17 20:20:52 <Jonta>	I do not
Sep 17 20:21:36 <greycat>	kerframil: ... what?
Sep 17 20:21:55 <greycat>	there is no occurrence of "pretty" in my bash(1)
Sep 17 20:22:35 <kerframil>	# printf '%s\n' '#!/bin/bash' 'f() { echo 123; }' > script; bash --pretty-print script
Sep 17 20:22:39 <shbot>	kerframil:
Sep 17 20:22:39 <shbot>	kerframil: f ()
Sep 17 20:22:39 <shbot>	kerframil: etc... ( http://ix.io/1VAz )
Sep 17 20:22:57 <greycat>	Huh.  It's in bash --help but not in the man page.
Sep 17 20:23:47 <kodachi>	Hey, I'm basically writing a script that will delete files that have 0 size. I've written:
Sep 17 20:24:08 <greycat>	find . -type f -size 0 -delete   # assuming GNU find
Sep 17 20:24:09 <twkm>	find ... -size 0 -exec rm {} +
Sep 17 20:24:23 <kerframil>	^ how not to assume GNU find
Sep 17 20:24:40 <kodachi>	filesize=(stat -c%s); files=*; [[ $filesize $files ]] && rm -i || bla bla
Sep 17 20:24:46 <kodachi>	I see
Sep 17 20:25:01 <kodachi>	oh and after $files in the condition I also wrote == 0
Sep 17 20:25:05 <kodachi>	But that still doesn't work
Sep 17 20:25:14 <greycat>	kodachi: there are so many errors in that, I won't even bother trying.
Sep 17 20:25:19 <kodachi>	lmao Ikr
Sep 17 20:25:33 <kodachi>	Its really tuff to work with bash as a beginner
Sep 17 20:25:37 <kodachi>	need lots of practice
Sep 17 20:25:52 <greycat>	!find
Sep 17 20:25:53 <greybot>	http://mywiki.wooledge.org/UsingFind
Sep 17 20:26:07 <kerframil>	don't put code in variables, to begin with
Sep 17 20:26:36 <kodachi>	I saw on that unixstackexchange site that the guy had put that stat code in a variable
Sep 17 20:26:47 <greycat>	!crap
Sep 17 20:26:47 <greybot>	The overwhelming majority of bash scripts, code, tutorials, and guides on the Internet are crap. Sturgeon was an optimist.
Sep 17 20:26:48 <also_uplime>	i think they were expecting filesize=($(stat -c%s))
Sep 17 20:26:56 <kerframil>	I'm almost impressed. no offense, but that does pack a lot wrongness into so little code.
Sep 17 20:26:57 <also_uplime>	(not that its any better)
Sep 17 20:26:58 <greycat>	I think they're just stupid.
Sep 17 20:27:00 <kerframil>	lot of*
Sep 17 20:27:19 <also_uplime>	could be ¯\_(ツ)_/¯
Sep 17 20:27:22 <kodachi>	Damn, even stack sites can't be trusted for good answers?
Sep 17 20:27:26 <kodachi>	relating to bash.
Sep 17 20:27:26 <greycat>	!so
Sep 17 20:27:26 <greybot>	Like virtually every other web site you find via Google, StackOverflow is chock full of wrong answers. Verify everything you read there before using it.
Sep 17 20:27:45 <kodachi>	Have every answer in the bot lmao
Sep 17 20:27:55 <kodachi>	Alright tho, I'm surprised tbh
Sep 17 20:28:06 <kodachi>	I'll come here for answers then
Sep 17 20:28:38 <Jonta>	kodachi: But what if #bash is also chock full of wrong answers?
Sep 17 20:28:52 <greycat>	then you need to /ignore knstn and others
Sep 17 20:28:54 <kodachi>	Jonta Can't be
Sep 17 20:29:34 <kodachi>	greycat and lhunath take bash seriously, so.. they can't really be like the rest
Sep 17 20:30:26 <greycat>	There's a solid group of people here who give reliably good answers.  After a while you'll figure out who those people are.
Sep 17 20:30:43 <vlm>	i found many good answers for things on internet from a person named Geirha or so dunno if its same person here though
Sep 17 20:30:54 <greycat>	geirha is definitely one of them
Sep 17 20:30:55 <kerframil>	it almost certainly is.
Sep 17 20:31:47 <vlm>	i wanted to thank him but not sure if its same person,if so many thanks,have helped me much
Sep 17 20:32:53 <Soliton>	he's on SO at least with the same username.
Sep 17 20:35:37 <kerframil>	kodachi: incidentally, while you definitely should use find, here's a not-so-broken pure bash implementation, assuming that globstar is enabled: for f in **/*; do [[ -f $f ]] && [[ ! -s $f ]] && rm -- "$f"; done
Sep 17 20:37:09 <kodachi>	kerframil I see, thanks.
Sep 17 20:46:53 <Jonta>	Got !pretty working. No such easy trick on the syntax highlighting then? I suppose the script could just be "vim -R my_syntax_file"
Sep 17 20:47:28 <Riviera>	Jonta: note there's also --pretty-print
Sep 17 20:47:53 <greycat>	apparently new in 5.0 and not in the man page, only visible in --help
Sep 17 20:47:58 <Riviera>	yup
Sep 17 20:49:07 <Jonta>	(And I'm running 3.2)
Sep 17 20:49:42 <Riviera>	my sympathies
Sep 17 20:50:30 <Jonta>	Soon, there will be an upgrade. Just has to bubble up to the top of my list first. I prefer POSIX when feasable anyway
Sep 17 20:51:28 <Riviera>	ah, but i'd repeat myself
Sep 17 20:51:56 <Jonta>	Sympathies <3
Sep 17 21:16:20 <kodachi>	There's some file called core in my home directory, I am going to delete it. Was wondering if it's a system file and I shouldn't delete it
Sep 17 21:16:44 <kodachi>	Binary file
Sep 17 21:16:51 <greycat>	A file named 'core' is a memory dump from a process that terminated in a specific way (SIGQUIT or similar).
Sep 17 21:17:03 <greycat>	If you don't intend to debug the program using the core file, just remove it.
Sep 17 21:17:13 <kodachi>	K thanks!
Sep 17 21:17:46 <greycat>	core(5) on Debian
Sep 17 21:20:10 <knstn>	omg, i haven't give an answer to anyone here for weeks.
Sep 17 21:34:57 <lavalike>	when one starts a completion with   "some words   and successfully completes with TAB it becomes   some\ words\ ...   is it possible to configure bash to leave it in quoted form?
Sep 17 21:37:15 <Jonta>	lavalike: You type         "so       hit tab, and then it completes to     some     ? Here it completes to      "some"
Sep 17 21:37:44 <lavalike>	Jonta: the completed path must contain spaces to show this
Sep 17 21:38:47 <nil>	doesn't for me, on bash 5.0.9
Sep 17 21:39:16 <greycat>	Sounds like bash-completion strikes again...
Sep 17 21:39:28 <greycat>	wooledg:~$ cat "with
Sep 17 21:39:28 <greycat>	withcess146-s.png  with spaces
Sep 17 21:39:28 <greycat>	wooledg:~$ cat "with spaces"
Sep 17 21:42:27 <lavalike>	https://imgur.com/rLpcuOk
Sep 17 21:43:01 <also_uplime>	what if you try it with `bash --norc --noprofile`
Sep 17 21:43:37 <lavalike>	nothing changes
Sep 17 21:44:45 <lavalike>	if I   touch "a b c d"   that one completes with quotes if started with a quote, curious
Sep 17 22:43:51 *	Disconnected ()
**** ENDING LOGGING AT Tue Sep 17 22:43:51 2019

**** BEGIN LOGGING AT Tue Sep 17 22:44:16 2019

Sep 17 22:44:16 *	Now talking on #bash
Sep 17 22:44:16 *	Topic for #bash is: http://mywiki.wooledge.org/BashFAQ | http://mywiki.wooledge.org/BashGuide | http://gnu.org/s/bash/manual | http://wiki.bash-hackers.org/ | http://mywiki.wooledge.org/Quotes | http://www.shellcheck.net/ | https://lists.gnu.org/mailman/listinfo/help-bash | https://git.savannah.gnu.org/cgit/bash.git?h=devel
Sep 17 22:44:16 *	Topic for #bash set by izabera (Wed May 15 19:55:21 2019)
Sep 17 22:44:16 -ChanServ-	[#bash] Welcome to #bash, we discuss the GNU bash shell.  Be explicit if your question is about another shell.  Don't trust the Internet on bash, learn from the resources in the topic instead.  You must be identified to send to the channel.
Sep 17 22:44:26 <ave_milia>	I have issues making crafting https://pastebin.com/PpCxXjen , in particular line 15, where I want to run the command as if I would run it verbatim. if I write there $(./blah args <<< input) it works. but with variables my program treats "<<< input" as trailing nonpositional arguments (basically something is wrong). how to make it work with variables too?
Sep 17 22:44:27 <pasteban>	Paste is available without ads on http://pastebin.com/raw/PpCxXjen
Sep 17 22:44:51 <greycat>	!check
Sep 17 22:44:51 <checkbot>	ave_milia: Line 15: Double quote to prevent globbing and word splitting. See https://shellcheck.net/?id=cb53091 for all 3 issues.
Sep 17 22:45:31 <ave_milia>	(I checked with that advice applied as well)
Sep 17 22:45:40 <greycat>	are you attempting to do something like  args=(foo bar '<<<' 'input'); mycmd "${args[@]}" ?  If so, that won't work.
Sep 17 22:46:12 <ave_milia>	<<< /must/ be specified verbatim?
Sep 17 22:46:16 <ave_milia>	or what is the problem?
Sep 17 22:46:38 <greycat>	another person whose questions can only be determined by reading their pastebins...
Sep 17 22:46:42 <ave_milia>	iirc @ expands array args
Sep 17 22:47:02 <ave_milia>	-args
Sep 17 22:47:18 <also_uplime>	bash won't process <<< after it has been expands the array. it will just be passed to the cmd literally
Sep 17 22:47:52 <also_uplime>	# foo=(cat '<<<' 'hi there'); "${foo[@]}"
Sep 17 22:47:54 <shbot>	also_uplime: cat: '<<<': No such file or directory
Sep 17 22:47:54 <shbot>	also_uplime: cat: 'hi there': No such file or directory
Sep 17 22:47:57 <also_uplime>	oops
Sep 17 22:48:03 <also_uplime>	# foo=(echo '<<<' 'hi there'); "${foo[@]}"
Sep 17 22:48:04 <shbot>	also_uplime: <<< hi there
Sep 17 22:48:47 <ave_milia>	I see. any way to make it treat <<< verbatim?
Sep 17 22:49:00 <greycat>	It *is* treating it verbatim, as a string.
Sep 17 22:49:27 <ave_milia>	ok, "treat it as special bash thing", or something
Sep 17 22:49:33 <greycat>	If you want to put bash syntax in variables and then have it act as bash syntax in a future evaluation, that's what eval is for.  But you should SERIOUSLY RETHINK YOUR DESIGN.
Sep 17 22:50:37 <ave_milia>	thanks, forgot about it
Sep 17 22:52:14 <also_uplime>	could put a wrapper around it. redir() { local out=$1; shift; cmd "$@" <<< "$out"; }
Sep 17 22:52:50 <greycat>	I don't know what the design goals are, or why he's trying to pass redirection operators jumbled together with arguments.
Sep 17 22:52:56 <ave_milia>	having <<< in args is stupid, I know, but I want to write one function for all kinds of programs to be tested
Sep 17 22:54:23 <ave_milia>	(some of them will not accept stdin, so I'll have to remember to call another function, and so on)
**** ENDING LOGGING AT Tue Sep 17 22:58:03 2019

**** BEGIN LOGGING AT Tue Sep 17 22:58:03 2019

